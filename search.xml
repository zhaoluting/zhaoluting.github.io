<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>对高效会议的思考</title>
    <url>/ability-meeting/</url>
    <content><![CDATA[<p>打工人免不了要开会，我们程序员也是，有各种各样的会议需要参加。当时项目组制度改革，规范了流程，但是要参加的会实在是太多了，开会效率也挺差，于是我整理出了下面这篇文章，最后大家都同意了我的想法，改善了很多。所以有觉得不合理的地方，果断提出来，一起追求高效工作💪。</p>
<span id="more"></span>

<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p><strong>目前存在的问题：</strong></p>
<ul>
<li>会议多，效率较差，导致工作时间被压缩</li>
<li>需求评审感觉没问题，会后看了代码才发现漏洞</li>
<li>会议要点没记，会后就给忘了或者记错了</li>
<li>有些会时间太长，后面容易疲于思考</li>
<li>会后需要确定的事项难以同步到所有人，尤其口头复述的</li>
</ul>
<p><strong>小想法：</strong></p>
<ul>
<li><strong>做好会前准备</strong>：主持人准备好资料和议程大纲，参会人员提前阅读</li>
<li><strong>控制会议时长</strong>：尽量不要超过两小时，超过一个半小时最好中间有休息时间</li>
<li><strong>精简参会人数</strong>：参会人依据“相关性”和“少而精”的原则，同时由主持人指定好记录员</li>
<li><strong>编写会议记录</strong>：记录员记录下重点内容和待办事项</li>
<li><strong>会后及时追踪</strong>：待办事项及时去跟进并记录</li>
<li><strong>减少会议频率</strong>：在会前或会末确定下次会议内容，简单需求的话考虑多个评审一起开</li>
</ul>
<br/>

<h2 id="参考模板"><a href="#参考模板" class="headerlink" title="参考模板"></a>参考模板</h2><p>在“产品需求”文件下按年份、月份创建文件夹，每个需求建一个文档，例如</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">- 2020年</span><br><span class="line">	- 11月</span><br><span class="line">		- 20201119-小班16人</span><br><span class="line">	- 12月</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="需求评审"><a href="#需求评审" class="headerlink" title="需求评审"></a>需求评审</h3><p><strong>会议时间</strong>：2020-11-19 10:00 ~ 12:00 </p>
<p><strong>会议地点</strong>：708会议室</p>
<p><strong>会议大纲</strong>：</p>
<ul>
<li><p>APP V1.4.0：约课详情升级，支持固定班级，直播工具替换…</p>
</li>
<li><p>教室端：约课页面升级，支持预约16人小班课和固定班级课程…</p>
</li>
<li><p>鳄鱼后台：整合课程管理、教师资料增加内容、课程支持三级分类…</p>
</li>
</ul>
<p><strong>重点参会人员：</strong></p>
<blockquote>
<p>主持人在会前十分钟检查这个表格，若有人没填”准备情况”就去私聊提醒下看会议资料</p>
</blockquote>
<table>
<thead>
<tr>
<th>参会人</th>
<th>准备情况</th>
</tr>
</thead>
<tbody><tr>
<td>XXX（主持人）</td>
<td>原型地址</td>
</tr>
<tr>
<td>XXX（记录员）</td>
<td>资料已阅，有问题的地方写在这里，好让主持人能提前思考或修改资料</td>
</tr>
<tr>
<td>XXX</td>
<td>资料已阅</td>
</tr>
</tbody></table>
<p><strong>会议要点</strong>：</p>
<blockquote>
<p>记录员记下认为比较重要的点和补充PRD里没体现出来的内容</p>
</blockquote>
<ul>
<li><p>APP约课详情页的”已约课同学”不可点击</p>
</li>
<li><p>。。。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>待办</th>
<th>跟踪</th>
</tr>
</thead>
<tbody><tr>
<td>各端回去确认排期</td>
<td>iOSAndroid教师端后台</td>
</tr>
<tr>
<td>向业务方确认啥啥啥</td>
<td>已确认，要怎么怎么样，并同步给相关人员</td>
</tr>
</tbody></table>
<hr>
<h3 id="UI评审"><a href="#UI评审" class="headerlink" title="UI评审"></a>UI评审</h3><p><strong>会议时间</strong>：2020-11-20 10:00 ~ 12:00 </p>
<p><strong>会议地点：</strong>：708会议室</p>
<p><strong>会议大纲</strong>：</p>
<ul>
<li>校对APP、教师端的UI</li>
</ul>
<p><strong>重点参会人员：</strong></p>
<table>
<thead>
<tr>
<th>参会人</th>
<th>准备情况</th>
</tr>
</thead>
<tbody><tr>
<td>XXX（主持人）</td>
<td>设计稿</td>
</tr>
<tr>
<td>XXX（记录员）</td>
<td>资料已阅，有问题的地方写在这里，好让主持人能提前思考或修改资料</td>
</tr>
<tr>
<td>XXX</td>
<td>资料已阅</td>
</tr>
</tbody></table>
<p><strong>会议要点</strong>：</p>
<ul>
<li><p>APP约课详情页的”已约课同学”不可点击</p>
</li>
<li><p>。。。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>待办</th>
<th>跟踪</th>
</tr>
</thead>
<tbody><tr>
<td>详情页重复课程icon优化</td>
<td>已优化</td>
</tr>
</tbody></table>
<hr>
<h3 id="技术评审"><a href="#技术评审" class="headerlink" title="技术评审"></a>技术评审</h3><p><strong>会议时间</strong>：2020-11-20 10:00 ~ 12:00 </p>
<p><strong>会议地点</strong>：708会议室</p>
<p><strong>会议大纲</strong>：</p>
<ul>
<li>重复课程的排课逻辑</li>
</ul>
<p><strong>重点参会人员：</strong></p>
<table>
<thead>
<tr>
<th>参会人</th>
<th>准备情况</th>
</tr>
</thead>
<tbody><tr>
<td>林今奕（主持人）</td>
<td>接口文档</td>
</tr>
<tr>
<td>XXX（记录员）</td>
<td>资料已阅，有问题的地方写在这里，好让主持人能提前思考或修改资料</td>
</tr>
<tr>
<td>XXX</td>
<td>资料已阅</td>
</tr>
</tbody></table>
<p><strong>会议要点</strong>：</p>
<hr>
<h3 id="测试用例评审"><a href="#测试用例评审" class="headerlink" title="测试用例评审"></a>测试用例评审</h3><p><strong>会议时间</strong>：2020-11-20 10:00 ~ 12:00 </p>
<p><strong>会议地点</strong>：XXX会议室</p>
<p><strong>会议大纲</strong>：</p>
<ul>
<li><p>APP v1.4.0测试用例</p>
</li>
<li><p>教师端16人小班需求的测试用例</p>
</li>
</ul>
<p><strong>重点参会人员：</strong></p>
<table>
<thead>
<tr>
<th>参会人</th>
<th>准备情况</th>
</tr>
</thead>
<tbody><tr>
<td>XXX（主持人）</td>
<td>测试用例文档</td>
</tr>
<tr>
<td>XXX（记录员）</td>
<td>资料已阅，有问题的地方写在这里，好让主持人能提前思考或修改资料</td>
</tr>
<tr>
<td>XXX</td>
<td>资料已阅</td>
</tr>
</tbody></table>
<p><strong>会议要点</strong>：</p>
]]></content>
      <categories>
        <category>能力</category>
      </categories>
      <tags>
        <tag>ability</tag>
      </tags>
  </entry>
  <entry>
    <title>如何提高前端的自测能力</title>
    <url>/ability-slefTest/</url>
    <content><![CDATA[<div class="note info">一个小菜鸟的感悟与总结</div>
## 名词解释  

<mark class="label success"> // 最常见的三种测试类型。单元测试主要由开发人员来做，功能测试与集成测试由测试人员来做。</mark>

<p><strong>单元测试</strong>：指对软件中的最小可测试单元进行检查和验证；<br><strong>功能测试</strong>：对产品的各功能进行验证，根据功能测试用例，逐项测试，检查产品是否达到用户要求的功能；<br><strong>集成测试</strong>：也叫组装测试或联合测试。在单元测试的基础上，将所有模块按照设计要求（如根据结构图〕组装成为子系统或系统，进行集成测试；</p>
<span id="more"></span>

<mark class="label success"> // 客户端主要是用黑盒测试，服务端主要用白盒测试，灰盒测试比较少用。</mark>

<p><strong>黑盒测试</strong>：也称功能测试，把程序看作一个不能打开的黑盒子，在完全不考虑程序内部结构和内部特性的情况下，在程序接口进行测试，它只检查程序功能是否按照需求规格说明书的规定正常使用，程序是否能适当地接收输入数据而产生正确的输出信息。<br><strong>白盒测试</strong>：也称结构测试或逻辑驱动测试，它是知道产品内部工作过程，可通过测试来检测产品内部动作是否按照规格说明书的规定正常进行，按照程序内部的结构测试程序，检验程序中的每条通路是否都有能按预定要求正确工作。<br><strong>灰盒测试</strong>：介于黑盒白盒二者之间，灰盒测试关注输出对于输入的正确性，同时也关注内部表现，但这种关注不象白盒那样详细、完整，只是通过一些表征性的现象、事件、标志来判断内部的运行状态。有时候输出是正确的，但内部其实已经错误了，这种情况非常多。</p>
<h2 id="前端自测三个方面"><a href="#前端自测三个方面" class="headerlink" title="前端自测三个方面"></a>前端自测三个方面</h2><p>1、界面交互是否符合要求、逻辑<br>2、接口请求是否正确<br>3、数据展示是否准确</p>
<h2 id="推荐工具"><a href="#推荐工具" class="headerlink" title="推荐工具"></a>推荐工具</h2><ul>
<li><strong>公用记录型</strong>：JIRA（推荐）、wiki（没有测试人员时可以简单记在wiki上）</li>
<li><strong>自用记录型</strong>：mac自带备忘录、有道云笔记、Excel、XMind</li>
<li><strong>接口测试工具</strong>：swagger、postman</li>
<li><strong>代码内部测试工具</strong>：eslint、karma 等等</li>
</ul>
<h2 id="平时积累的技巧"><a href="#平时积累的技巧" class="headerlink" title="平时积累的技巧"></a>平时积累的技巧</h2><h3 id="问（很重要）"><a href="#问（很重要）" class="headerlink" title="问（很重要）"></a>问（很重要）</h3><mark class="label success"> // 公司测试小哥说这点是最重要。</mark>
<ul>
<li>问清楚项目需求，对需求理解透彻；</li>
<li>向经验丰富的开发、测试人员讨教经验；</li>
<li>询问用户的使用体验及意见；</li>
</ul>
<h3 id="列"><a href="#列" class="headerlink" title="列"></a>列</h3><ul>
<li>需求点要清楚得罗列出来，产品或者后端没有罗列就自己罗列。</li>
<li>每做完一个需求就做个标记，每提一个bug也要列进去。</li>
<li>优点是整个开发过程会很清晰，日后排期、更改需求也有参照，有据可循。</li>
<li>缺点就是费时。</li>
</ul>
<blockquote>
<p>例如下图，需求多时，花点时间理清思路，用markdown等工具列出来：</p>
</blockquote>
<p><img src="/image/selfTest/list.png" alt="罗列需求"></p>
<blockquote>
<p>又例如下图（优化与修复），有较多bug或优化点时，用wiki做一个表格，方便产品验收：</p>
</blockquote>
<p><img src="/image/selfTest/bugList.png" alt="罗列Bug">  </p>
<h3 id="写"><a href="#写" class="headerlink" title="写"></a>写</h3><ul>
<li>代码里多写备注，readme文件不能偷懒，不留坑也方便转手；</li>
<li>commit 多打字，提交历史会很清晰；</li>
<li>发布系统里不随便填写信息，需求列表会很清楚；<br><img src="/image/selfTest/featList.png" alt="需求列表"></li>
</ul>
<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><ul>
<li>每次提交代码前利用工具检查修改过的内容。（全局搜下有没有未去掉的debugger，搜“&lt;&lt;&lt;&lt;&lt;”看有没有冲突代码）;<br><img src="/image/selfTest/code.png" alt="代码">  </li>
<li>发布前有时间就顺手检查下提交历史;<br><img src="/image/selfTest/gitlab.png" alt="代码"></li>
</ul>
<h3 id="学"><a href="#学" class="headerlink" title="学"></a>学</h3><ul>
<li>多学习其他优秀系统的交互与设计，对比思考自己做的那些系统的不足；</li>
<li>平时多学习交互规范、用户体验设计类的书籍，让自己更加专业；</li>
</ul>
<p><strong>论坛网站</strong>：<a href="http://bbs.51testing.com/forum.php">51testing软件测试论坛</a><br><strong>学习文档</strong>：软件工程中的测试技术(第一部分).pdf、软件工程中的测试技术(第二部分).pdf<br><strong>测试相关的学习资料不是很多</strong>，主要还是靠平时实践的积累，理论的话看上面的《软件工程中的测试技术》就差不多了。</p>
<h2 id="几个常用组件的checklist"><a href="#几个常用组件的checklist" class="headerlink" title="几个常用组件的checklist"></a>几个常用组件的checklist</h2><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><ul>
<li><strong>各种<mark class="label success">数据类型</mark>的输入情况:</strong> 全汉字输入、全英文输入、全字符输入、全数字输入、混搭输入、大小写处理、半&#x2F;全角输入;</li>
<li><strong>数字需要关注<mark class="label success">边界值</mark>:</strong> 最大&#x2F;小值、正&#x2F;负数、小数点保留位;</li>
<li>**不同的输入<mark class="label success">文本长度</mark>:**为空、文本溢出、文本未溢出;</li>
<li>**输入框<mark class="label success">校验规则</mark>:**为空校验、数据类型校验、正则检测、多个数据之间大小校验;</li>
<li>**保障<mark class="label success">数据准确性</mark>:**输入输出结果是否一致、数据是否进行处理;</li>
<li>**<mark class="label success">隐藏部分</mark>的显示:**选择下拉框的文本显示溢出情况、日期时间选择框是否超出屏幕、选择下拉框数据量过大的情况;</li>
<li>**<mark class="label success">操作按钮</mark>检查:**字段完整性检查、快键建检查、回车键检查、重复提交检查;</li>
<li>**<mark class="label success">安全性</mark>检查:**恶意代码注入;</li>
<li>**屏幕大小不同情况下的<mark class="label success">自适应</mark>:**浏览器置于桌面、浏览器全屏、浏览器投放至大显;</li>
</ul>
<h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><ul>
<li><strong>各种<mark class="label success">数据类型</mark>的显示情况:</strong> 全汉字、全英文、全字符、全数字、混搭、大小写识别;</li>
<li><strong>不同<mark class="label success">文本长度</mark>:</strong> 为空、短文本、超长文本、数字位数保留;</li>
<li><strong>保障<mark class="label success">数据准确性</mark>:</strong> 显示结果是否正确、是否进行格式&#x2F;映射处理、映射为空时的情况;</li>
<li>**<mark class="label success">脱敏情况</mark>:**身份证号、手机等数据是否脱敏完全;</li>
<li>**屏幕大小不同情况下的<mark class="label success">自适应</mark>:**浏览器置于桌面、浏览器全屏、浏览器投放至大显;</li>
</ul>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><ul>
<li>**<mark class="label success">表格展示</mark>情况:**列表为空、列数过多、数据量过大、loading状态、是否错位;</li>
<li>**单元格内不同<mark class="label success">文本长度</mark>:**为空、文本溢出、文本未溢出;</li>
<li>**单元格内各种<mark class="label success">数据类型</mark>的显示情况:**全汉字、全英文、全字符、全数字、混搭;</li>
<li><strong>保障<mark class="label success">数据准确性</mark></strong>:<ul>
<li>单元格显示结果是否正确、是否进行格式&#x2F;映射处理、映射为空时的情况;</li>
<li>整个表格数据分页是否准确、选中时结果是否一致、筛选排序结果是否正确;</li>
</ul>
</li>
<li>**屏幕大小不同情况下的<mark class="label success">自适应</mark>:**浏览器置于桌面、浏览器全屏、浏览器投放至大显;</li>
</ul>
<h3 id="附件上传"><a href="#附件上传" class="headerlink" title="附件上传"></a>附件上传</h3><ul>
<li>**<mark class="label success">附件显示情况</mark>:**不同尺寸文件预览的显示、不同文件格式预览的显示、文件预览失败&#x2F;不存在时的显示、文件预览加载过慢的情况;</li>
<li>**<mark class="label success">附件准确性</mark>:**是否错位展示;</li>
<li>**<mark class="label success">安全性</mark>检查:**上传时脚本后缀改为图片等格式（文件内容校验）;</li>
<li>**屏幕大小不同情况下的<mark class="label success">自适应</mark>:**浏览器置于桌面、浏览器全屏、浏览器投放至大显;</li>
</ul>
]]></content>
      <categories>
        <category>能力</category>
      </categories>
      <tags>
        <tag>ability</tag>
      </tags>
  </entry>
  <entry>
    <title>《你不知道的JavaScript》笔记</title>
    <url>/book-dontKnowJS/</url>
    <content><![CDATA[<p>本文是我阅读<a href="https://book.douban.com/subject/26854244/">《你不知道的JavaScript》</a>过程中记录下来的笔记。书我挺早就买了，买来看了几次，后来就放书架上积灰了。时隔多年，已经忘光了🥲趁这段时间有空又看了一遍，把笔记记了下来。</p>
<span id="more"></span>
<h1 id="上卷"><a href="#上卷" class="headerlink" title="上卷"></a>上卷</h1><h2 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h2><h3 id="JavaScript编译"><a href="#JavaScript编译" class="headerlink" title="JavaScript编译"></a>JavaScript编译</h3><ul>
<li>JavaScript代码片段通常在执行前就进行编译，并且马上执行。</li>
<li><strong>传统编译过程（三步）</strong><ul>
<li>分词&#x2F;词法分析：将由字符串组成的字符串分解成有意义的代码块。这些代码块被称为”词法单元”。</li>
<li>解析&#x2F;语法分析：将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树被称为“抽象语法树（AST）”。</li>
<li>代码生成：将AST转换为可执行代码的过程。</li>
</ul>
</li>
<li><strong>编译器</strong>：负责语法分析及代码生成等工作。</li>
<li><strong>引擎</strong>：负责整个JavaScript程序的编译及执行过程。<ul>
<li><strong>LHS查询</strong>：取到赋值操作的目标。目的是为了对变量进行赋值。</li>
<li><strong>RHS查询</strong>：取到赋值操作的源头。目的是为了获取变量的值。</li>
<li><strong>异常</strong>：<ul>
<li>当RHS查询在所有嵌套的作用域中遍寻不到所需的变量，引擎会抛出ReferenceError异常；</li>
<li>当LHS查询在全局作用域也无法找到目标变量，在严格模式下会抛出类似ReferenceError的异常，在非严格模式下会自动创建一个全局变量；</li>
<li>当对通过RHS查询到的变量进行不合理操作时，会抛出TypeError类型的异常，如引用null中的属性。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul>
<li>作用域负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。即根据标识符名称查找变量的一套规则。</li>
<li><strong>作用域嵌套</strong>：在当前作用域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，知道找到该变量或抵达全局作用域为止。</li>
<li><strong>词法作用域</strong>：JavaScript采用的是词法作用域，定义过程发生在代码的书写阶段，词法作用域由写代码时将变量和块作用域写在哪里决定的。<ul>
<li>和另一种动态作用域的区别是，动态作用域是在运行时确定的，关注函数从何处调用，很像this机制。</li>
</ul>
</li>
<li><strong>遮蔽效应</strong>：作用域查找会在找到第一个匹配的标识符时停止，所以可以在多层嵌套作用域中定义同名的标识符，内部标识符将“遮蔽”外部标识符。</li>
<li><strong>欺骗词法</strong>：在运行时改变词法作用域，但会导致性能下降。均不推荐使用，并且有被严格模式所限制。<ul>
<li>eval函数：将传入的字符串参数作为代码段来执行，用于执行动态创建的代码。</li>
<li>setTimeout、setInterval函数：第一个参数可为字符串，该字符串可被解释为动态生成的函数代码。</li>
<li>new function(..)：最后一个参数可为代码字符串，并将其转化为动态生成的函数。</li>
<li>with关键字：重复引用同一个对象中的多个属性的快捷方式。本质上是通过将一个对象的引用当做作用域来处理，将对象属性当做作用域中的标识符来处理，从而创建了一个新的词法作用域。</li>
</ul>
</li>
<li><strong>函数作用域</strong>：属于这个函数的全部变量都可以在整个函数的范围内使用及复用。<ul>
<li><strong>立即执行函数</strong>：能够解决函数名污染所在作用域的问题，并且能够自动运行。有两种书写形式<code>(function foo()&#123;..&#125;)()</code>、<code>(function()&#123;..&#125;())</code></li>
</ul>
</li>
<li><strong>块级作用域</strong>：变量和函数在指定的代码块里（通常是{..}）才能访问。例如with关键字、try&#x2F;catch、let、const。</li>
<li><strong>提升</strong>：所有的声明（变量和函数）都被“移动”到各自作用域的最顶端。<ul>
<li>JavaScript引擎会将<code>var a = 2</code>看成两个声明，第一个是<code>var a</code>定义声明在编译阶段进行，第二个是<code>a = 2</code>赋值声明被留在原地等待执行。</li>
<li>每个作用域都会进行提升操作，只有声明本身会被提升，包括函数表达式的赋值在内的赋值操作或其他运行逻辑会留在原地。</li>
<li>函数声明和变量声明都会被提升，但函数会被优先提升到普通变量之前</li>
</ul>
</li>
</ul>
<h3 id="作用域闭包"><a href="#作用域闭包" class="headerlink" title="作用域闭包"></a>作用域闭包</h3><ul>
<li>当函数可以记住并访问所在的词法作用域，即使函数是在当前词法作用域之外执行，这时就产生了闭包。</li>
<li><strong>应用</strong>：定时器、事件监听器、AJAX请求、跨窗口通信、Web workers或者任何其他的异步（或同步）任务中，只要使用了回调函数，实际上就是在使用闭包。</li>
<li><strong>模块模式必要条件</strong>：必须有外部的封闭函数，该函数必须至少被调用一次；封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。</li>
</ul>
<h2 id="this和对象原型"><a href="#this和对象原型" class="headerlink" title="this和对象原型"></a>this和对象原型</h2><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><ul>
<li>this是在函数被调用时发生的绑定，它的上下文取决于函数调用时的各种条件，this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。</li>
<li><strong>根据绑定规则判断this</strong>：需要直接找到函数的直接调用位置，优先级 new绑定 &gt; 显式绑定 &gt; 隐式绑定 &gt; 默认绑定<ul>
<li><strong>new绑定</strong>：函数是否在new中调用？<ul>
<li>this绑定的是新创建的对象。</li>
<li><code>var bar = new foo()</code></li>
<li>使用<code>new</code>来调用函数，或者说发生构造函数调用时，会自动执行以下操作<ul>
<li>创建（构造）一个全新的对象；</li>
<li>新对象会被执行<code>[[prototype]]</code>连接；</li>
<li>新对象会被绑定到函数对象的this；</li>
<li>如果函数没有返回其他对象，那么<code>new</code>表达式中的函数调用会自动返回这个新对象；</li>
</ul>
</li>
</ul>
</li>
<li><strong>显式绑定</strong>：函数是否通过call、apply或者硬绑定（显式绑定的一个变种，this指针不会丢失，如bind）？<ul>
<li>this绑定的是指定的对象。</li>
<li><code>var bar = foo.call(obj2)</code></li>
</ul>
</li>
<li><strong>隐式绑定</strong>：函数是否在某个上下文对象中调用？<ul>
<li>this绑定的是那个上下文对象。</li>
<li><code>var bar = obj1.foo()</code></li>
<li>参数传递其实就是一种隐式赋值；调用回调函数的函数可能会修改this。</li>
</ul>
</li>
<li><strong>默认绑定</strong>：都不是的话，使用独立函数调用，即默认绑定<ul>
<li>严格模式下绑定到undefined，否则绑定到全局对象。</li>
<li><code>var bar = foo</code></li>
</ul>
</li>
</ul>
</li>
<li><strong>this绑定例外</strong>：<ul>
<li>把null或者undefined作为this的绑定对象传入call、apply或者bind，这些值在调用时会被忽略，实际应用的是默认绑定规则。常见场景是使用apply来“展开”一个数组并当做参数传入函数，类似地，bind可以对参数进行柯里化（部分求值）。</li>
<li>被创建了“间接引用”的函数会应用默认绑定规则。</li>
<li>软绑定softBind(..)会对指定的函数进行封装，检查调用时的this，如果this绑定到全局对象或者undefined，就把指定的默认对象obj绑定到this，否则不会修改this，防止函数调用应用默认绑定规则，实现了和硬绑定相同的效果，同时保留了隐式绑定或者显式绑定修改this的能力。</li>
</ul>
</li>
<li><strong>箭头函数</strong>：不使用this的四种标准规则，而是根据外层（函数或者全局）作用域来决定this，且箭头函数的绑定无法被修改。箭头函数和<code>self = this</code>机制一样。</li>
</ul>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul>
<li><strong>两种定义形式</strong>：声明（文字）形式和构造形式。二者唯一的区别是文字声明可以添加多个键&#x2F;值对，构造形式必须逐个添加属性。</li>
<li><strong>六种语言类型</strong>：string、number、boolean、null、undefined、object<ul>
<li>简单基本类型（string、number、boolean、null、undefined）本身不是对象，<code>typeof null</code>会返回“object”是个bug。<ul>
<li>不同的对象在底层都表示为二进制，二进制前三位都为0的话会被判断为object类型，null的二进制表示全是0，所以typeof会返回“object”。</li>
</ul>
</li>
<li>JavaScript中的函数是“一等公民”，是对象的一个子类型，本质上和普通对象一样（只是可以调用）。</li>
</ul>
</li>
<li><strong>内置对象</strong>：对象子类型（注意大写的首字母），String、Number、Boolean、Object、Function、Array、Date、RegExp、Error。<ul>
<li>这些内置对象可以当做构造函数来使用，从而构造一个对应子类型的新对象。</li>
<li>null和undefined没有对应的构造形式，只有文字形式；Date只有构造没有文字形式。</li>
</ul>
</li>
<li><strong>内容</strong>：对象的内容由一些存储在特定命名位置的值组成，称为属性。存储在对象容器内部的是属性的名称，属性名永远是字符串，就像指针一样指向这些值真正的存储位置。<ul>
<li><strong>可计算属性名</strong>：ES6新增功能，可以在文字形式中使用<code>[]</code>包裹一个表达式来当做属性名。</li>
<li><strong>属性和方法</strong>：函数永远不会“属于”一个对象，即使在对象的文字形式中声明一个函数表达式，这个函数也不会“属于”这个对象，只是对于相同函数对象的多个引用。</li>
<li><strong>复制对象</strong>：<ul>
<li><code>var newObj = JSON.parse(JSON.stringify(someObj))</code>，需要保证对象是JSON安全的，只适用于部分情况。</li>
<li><code>object.assign(..)</code>会遍历一个或多个源对象的所有可枚举的自有键并把它们复制到目标对象，最后返回目标对象，实现浅拷贝。</li>
</ul>
</li>
<li><strong>属性描述符</strong>：从ES5开始所有属性都具备了属性描述符，包含<code>value</code>（属性值）、<code>writable</code>（控制是否可以修改属性值）、<code>enumerable</code>（控制是否会出现在对象的属性枚举中）、<code>configurale</code>（控制是否允许配置，修改成false是单项操作无法撤销）特性。<ul>
<li>创建普通属性时，属性描述符会使用默认值，也可以使用<code>Object.defineProperty(..)</code>来添加一个新属性或者修改一个已有属性并对特性进行设置。</li>
</ul>
</li>
<li><strong>不变性</strong><ul>
<li>对象常量：结合<code>writable:false</code>和<code>configurable:false</code>就可以创建真正的常量属性（不可修改、重定义或者删除）。</li>
<li>禁止扩展：<code>Object.preventExtensions(..)</code>可以禁止一个对象添加新属性并且保留已有属性。</li>
<li>密封：<code>Object.seal(..)</code>会创建一个“密封”的对象，在现有对象上调用<code>Object.preventExtensions(..)</code>并把所有现有属性标记为<code>configurable:false</code>。</li>
<li>冻结：<code>Object.freeze(..)</code>会创建一个冻结对象，在现有对象上调用<code>Object.seal(..)</code>并把所有“数据访问”属性标记为<code>writable:false</code>，这是可以应用在对象上的级别最高的不可变性（不过这个对象引用的其他对象是不受影响的）</li>
</ul>
</li>
<li>**[[Get]]和[[Put]]]**：对象默认的[[Get]]和[[Put]]]操作分别可以控制属性值的获取和设置。</li>
<li><strong>Getter和Setter</strong>：getter和setter都是隐藏函数，可以改写默认操作，但是只能应用在单个属性上。<ul>
<li>getter会在获取属性值时调用，setter会在设置属性值时调用。</li>
<li>当给一个属性定义getter、setter或者两者都有时，这个属性会被定义为“访问描述符”，JavaScript会忽略它们的value和writable特性，取而代之的是关心set、get、configurable和enumerable特性。</li>
<li>通常来说getter和setter是成对出现的。</li>
<li>属性不一定包含值，它们可能是具备getter&#x2F;setter的“访问描述符”。</li>
</ul>
</li>
<li><strong>存在性</strong>：<ul>
<li><code>&quot;a&quot; in myObject</code>使用in操作符可以检查属性是否在对象及其<code>[[Prototype]]</code>链中。</li>
<li><code>myObject.hasOwnPrototype(&quot;a&quot;)</code>只会检查属性是否存在myObject对象中，不会检查<code>[[Prototype]]</code>链。</li>
<li><code>myObject.prototypeIsEnumerable(&quot;a&quot;)</code>可以检查给定的属性名是否直接存在于对象中，而不是在原型链上，并且满足<code>enumerable:true</code>。</li>
<li><code>Object.keys(myObject)</code>会返回一个数组，包含所有可枚举属性，只会查找对象直接包含的属性。</li>
<li><code>Object.getOwnPrototypeNames(myObject)</code>会返回一个数组，包含所有属性，无论它们是否可枚举，只会查找对象直接包含的属性。</li>
</ul>
</li>
<li><strong>遍历</strong>：<ul>
<li><code>for..in</code>会遍历对象的可枚举属性列表，包括<code>[[Prototype]]</code>链。</li>
<li><code>forEach(..)</code>会遍历数组中的所有值并忽略回调函数的返回值。</li>
<li><code>every(..)</code>会一直运行直到回调函数返回false。</li>
<li><code>some(..)</code>会一直运行直到回调函数返回true。</li>
<li><code>for..of</code>会直接遍历值而不是数组下标或者对象属性。它首先会向被访问对象请求一个迭代器对象，然后通过调用迭代器对象的next()方法来遍历所有返回值。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="混合对象“类”"><a href="#混合对象“类”" class="headerlink" title="混合对象“类”"></a>混合对象“类”</h3><ul>
<li><strong>类理论</strong>：<ul>
<li>JavaScript没有类，但提供了一些近似类的语法，js只有对象，可以不通过类直接创建对象。</li>
<li>面向类的设计模式：实例化、继承、（相对）多态。</li>
<li>面向对象编程强调的是数据和操作数据的行为本质上是互相关联的。</li>
<li>多态（在继承链的不同层次名称相同但是功能不同的函数）是类的一个核心概念，父类的通用行为可以被子类用更特殊的行为重写，相对多态性允许从重写行为中引用基础行为。</li>
<li>类实例是由一个特殊的类方法构造的，这个方法名通常和类型相同，被称为构造函数。这个方法的任务就是初始化实例需要的所有信息（状态）。</li>
</ul>
</li>
<li><strong>混入</strong>：可以用来模拟类的复制行为，但是通常会产生丑陋并且脆弱的语法，比如显式伪多态<code>otherObj.methodName.call(this, ...)</code>。<ul>
<li><strong>显式混入</strong>：实际上显式混入并不能完全模拟面向类的语言中的复制，因为对象只能复制引用。<ul>
<li><code>mixin(..)</code>会遍历sourceObj的属性，如果在targetObj没有这个属性就会进行复制。</li>
<li>JavaScript中的函数无法用标准可靠的方法真正的赋值，所以只能复制对共享函数对象的引用。</li>
<li>寄生继承是显式混入模式的一种变体，既是显式又是隐式的。先复制一份父类对象的定义，然后混去子类对象的定义，然后用这个复合对象构建实例。</li>
</ul>
</li>
</ul>
</li>
<li><strong>隐式混入</strong>：通过在构造函数调用或者方法调用中使用<code>Something.cool.call(this)</code>，借用了Something.cool()在Another的上下文中调用了它（通过this绑定），最终Something.cool()中的赋值操作都会应用在Another对象上而不是Something对象上，这样就把Something的行为混入了Another中。但是要避免使用这种结构，已保证代码的整洁和可维护性。</li>
</ul>
<h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><ul>
<li>所有普通的<code>[[Prototype]]</code>链最终都会指向内置的Object.prototype。</li>
<li><strong>屏蔽</strong>：<ul>
<li>如果属性名foo既出现在myObject中也出现在myObject的<code>[[Prototype]]</code>链上层，myObject中包含的foo属性就会屏蔽原型链上层的所有foo属性，myObject.foo总会选择原型链中最底层的foo属性。</li>
<li>如果foo不直接存在于myObject中而是存在于原型链上层时，<code>myObject.foo = &quot;bar&quot;</code>会出现的三种情况<ul>
<li>如果在<code>[[Prototype]]</code>链上层存在名为foo的普通数据访问属性并且没有标记为只读，就会直接在在myObject中添加一个名为foo的新属性，它是屏蔽属性。</li>
<li>如果在<code>[[Prototype]]</code>链上层存在foo，但被标记为只读，那么无法修改已有属性或者在myObject上创建屏蔽属性。严格模式下会抛错，否则这条赋值语句会被武略。</li>
<li>如果在<code>[[Prototype]]</code>链上层存在foo并且是一个setter，那就会调用这个setter，foo不会被添加到myObject，也不会重新定义foo这个setter。</li>
<li>如果希望在上述的第二和第三种情况下也屏蔽foo，就不能使用&#x3D;操作符来赋值，而是使用<code>Object.defineProperty(..)</code>来向myObject添加foo。</li>
</ul>
</li>
</ul>
</li>
<li><strong>“类”函数</strong>：<ul>
<li>所有的函数默认都会拥有一个名为prototype的公有并且不可枚举的属性，它会指向Foo的原型。</li>
<li><code>new Foo()</code>会生成一个新对象，这个新对象的内部链接<code>[[Prototype]]</code>关联的是Foo.prototype对象。实际上我们并没有初始化一个类，也没有从“类”中复制任何一个行为到一个对象中，只是让两个对象互相关联。</li>
<li><strong>构造函数</strong>：<code>Foo.prototype</code>默认有一个公有并且不可枚举的属性<code>.constructor</code>，这个属性引用的是对象关联的函数（本例中是Foo）。<ul>
<li>当且仅当使用new时，函数调用就会变成“构造函数调用”。new会劫持所有普通函数并用构造对象的形式来调用它。</li>
<li><code>Foo.prototype.constructor</code>默认指向Foo，但实际上，<code>.constructor</code>引用是被委托给了<code>Foo.prototype</code>。</li>
</ul>
</li>
<li><strong>原型继承</strong>：在JavaScript中并不会将一个对象（“类”）复制到另一个对象（“实例”），只是将它们关联起来，这个机制被称为原型继承。但是继承意味着复制操作，js并不会复制，所以事实上“委托”这个术语描述会更加准确。<ul>
<li><strong>创建关联对象</strong>：需要调用<code>Object.create(..)</code>，它会凭空创建一个“新”对象并把新对象内部的<code>[[prototype]]</code>关联到指定的对象。缺点是需要抛弃旧对象，不能修改已有的默认对象，和轻微性能损失（抛弃的对象需要进行垃圾回收），但实际上比ES6及其之后的方法更短、可读性更高。</li>
<li>ES6前只能通过设置<code>.__proto__</code>属性来修改对象的<code>[[prototype]]</code>关联，<code>.__proto__</code>存在于内置的<code>Object.prototype</code>中，它引用了内部的<code>[[Prototype]]</code>对象，但无法兼容所有浏览器。ES6添加了<code>Object.setPrototypeOf(..)</code>这个标准并且可靠的修改关联的辅助函数。</li>
<li><strong>验证委托关联</strong>：<ul>
<li>ES5的标准方法：<code>Object.getPrototype(a) === Foo.prototype</code></li>
<li>非标准方法：<code>a.__proto__ === Foo.prototype</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="行为委托"><a href="#行为委托" class="headerlink" title="行为委托"></a>行为委托</h3><ul>
<li>XYZ通过<code>Object.create(..)</code>创建，它的<code>[[prototype]]</code>委托了Task对象。这种编码风格称为“对象关联”。</li>
<li>委托行为意味着某些对象（XYZ）在找不到属性或者方法引用时会把这个请求委托给另一个对象（Task）。</li>
<li>行为委托认为对象之间是兄弟关系，互相委托，而不是父类和子类的关系。JavaScript的<code>[[prototype]]</code>机制本质上就是行为委托机制。</li>
<li>我们可以选择在JavaScript中努力实现类机制，也可以拥抱更自然的<code>[[prototype]]</code>委托机制，<strong>类并不适用于JavaScript</strong>。</li>
<li><strong>行为委托和类设计模式的不同之处</strong>：<ul>
<li>通常来说，在<code>[[prototype]]</code>委托中最好把状态保存在委托者（XYZ、ABC）而不是委托目标（Task）上。</li>
<li>尽量避免在<code>[[prototype]]</code>链的不同级别中使用相同的命名，否则就要用笨拙脆弱的语法来消除歧义。</li>
<li><code>this.setID(ID)</code>，XYZ中没有这个方法名，会通过<code>[[prototype]]</code>委托关联到Task中找到这个方法，由于调用位置触发了this的隐式绑定规则，运行时this会绑定到XYZ，这正是我们想要的。</li>
<li>使用类构造函数需要在同一个步骤中实现构造和初始化，对象关联则更好地支持关注分离原则，创建和初始化不需要合并为一个步骤。</li>
<li>对象关联能让代码更加简洁、更具扩展性，简化了代码结构，用一种简单的设计实现了同样的功能。</li>
</ul>
</li>
<li><strong>互相委托（禁止）</strong>：无法在两个或者两个以上互相（双向）委托的对象之间创建循环委托。如果引用了一个两边都不存在的属性或者方法，就会在<code>[[prototype]]</code>链上产生一个无限递归的循环。</li>
<li><strong>对象关联风格的实现方法</strong>：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">init</span>: <span class="keyword">function</span>(<span class="params">who</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">me</span> = who;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">identify</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;I am &quot;</span> + <span class="variable language_">this</span>.<span class="property">me</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Bar</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Foo</span>);</span><br><span class="line"><span class="title class_">Bar</span>.<span class="property">speak</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Hello, &quot;</span> + <span class="variable language_">this</span>.<span class="title function_">identify</span>() + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Bar</span>);</span><br><span class="line">b1.<span class="title function_">init</span>(<span class="string">&quot;b1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> b2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Bar</span>);</span><br><span class="line">b2.<span class="title function_">init</span>(<span class="string">&quot;b2&quot;</span>);</span><br><span class="line"></span><br><span class="line">b1.<span class="title function_">speak</span>();</span><br><span class="line">b2.<span class="title function_">speak</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="ES6的class"><a href="#ES6的class" class="headerlink" title="ES6的class"></a>ES6的class</h3><ul>
<li>class不是向JavaScript引入了一种新的“类”机制，而是现有<code>[[prototype]]</code>委托机制的一种语法糖。</li>
<li>class并不会像传统面向类的语言一样在声明时静态复制所有行为，如果修改或者替换了父“类”中的一个方法，子“类”的所有实例都会受到影响。</li>
<li><strong>优点</strong>：<ul>
<li>语法更好看，不再引用杂乱的<code>.prototype</code>，不再需要使用<code>Object.create(..)</code>、<code>.__proto__</code>、<code>Object.setPrototypeOf(..)</code>;</li>
<li>可以通过<code>super(..)</code>来实现多态，任何方法都可以引用原型链上层的同名方法，还可以解决构造函数无法互相应引用的问题；</li>
<li>class字面语法不能声明属性，只能声明方法，可以帮你避免犯错；</li>
<li>可以通过<code>extends</code>很自然的扩展对象（子）类型，甚至是内置的对象（子）类型。</li>
</ul>
</li>
<li><strong>缺点</strong>：<ul>
<li>加深了过去二三十年对于JavaScript中“类”的误解，让<code>[[prototype]]</code>机制变得非常别扭；</li>
<li>class语法无法定义类成员属性，只能定义方法，如果为了追踪势力之间共享状态必须要这么做，只能使用丑陋的<code>.prototype</code>语法，这违背了class语法的本意；</li>
<li>依然面临意外屏蔽的问题，如id属性屏蔽了id()方法；</li>
<li>出于性能考虑，super是在声明时“静态”绑定的，根据应用方式的不同，super可能不会绑定到合适对象，这时需要用toMethod(..)来手动绑定。</li>
</ul>
</li>
</ul>
<hr>
<h1 id="中卷"><a href="#中卷" class="headerlink" title="中卷"></a>中卷</h1><h2 id="类型和语法"><a href="#类型和语法" class="headerlink" title="类型和语法"></a>类型和语法</h2><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul>
<li><strong>js的类型定义</strong>：对语言引擎和开发人员来说，类型是值的内部特征，定义了值的行为特征，以使其区别于其他值。</li>
<li><strong>JS不做类型强制</strong>：JavaScript中的变量没有类型，只有值才有，变量可以随时持有任何类型的值。</li>
<li><strong>七种内置类型</strong>：空值null、未定义undefined、布尔值boolean、数字number、字符串string、对象object、符号symbol</li>
<li><strong>typeof运算符</strong>：typeof可以用来判断值的类型，返回的是类型的字符串值，内置类型除了null返回的是object，其他都有同名字符串值与之对应。typeof处理undeclared变量有一个特殊的安全防范机制，会阻止抛出ReferenceError错误，而是返回undefined。可以用来检查变量是否存在。</li>
<li><strong>undefined和undeclared</strong>：已在作用域中声明但还没有赋值的变量时undefined的，还没有在作用域中声明过的变量时undeclared的。</li>
</ul>
<h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><ul>
<li>array、string、number是一个程序最基本的组成部分。</li>
<li><strong>数组</strong>：数组可以容纳任何类型的值。数组通过数字进行索引，还可以包含字符串键值&#x2F;属性，但这些并不计算在数组长度内。</li>
<li><strong>类数组</strong>：<code>Array.prototype.slice.call(..)</code>、<code>Array.from(..)</code>可以将类数组（一组通过数字索引的值）转换为真正的数组。</li>
<li><strong>字符串</strong>：字符串不可变，字符串的成员函数不会改变其原始值，而是创建并返回一个新的字符串。字符串和数组很相似，但数组可变，它的成员函数可以在原始值上操作。字符串可以“借用”数组的非变更方法来处理字符串，如<code>Array.prototype.join.call(a. &quot;-&quot;)</code>，但无法“借用”可变更方法，因为字符串不可变。</li>
<li><strong>数字</strong>：js只有一种数值类型——number，包括“整数”（js没有真正意义上的整数）和带小数的十进制数。 <ul>
<li>js中的数字类型是基于IEEE 754标准（该标准通常称为“浮点数”）来实现的，使用的是“双精度”格式，即64位二进制。</li>
<li><code>0.1 + 0.2 === 0.3; // false</code>：这是二进制浮点数最大的问题，一些数字无法用二进制准确的表示出来。ES6中内置了一个误差范围值——<code>Number.EPSILON</code>。</li>
<li><code>Number.isInteger(42)</code>可以检测是否是整数。</li>
<li>ES6中能被“安全”呈现的最大整数是<code>Number.MAX_SAFE_INTEGER</code>，最小整数是<code>Number.MIN_SAFE_INTEGER</code>。<code>Number.isSafeInteger(Math.pow(2, 53)-1)</code>可用来检测是否是安全的整数。</li>
<li><strong>NaN</strong>：NaN用于指出数字类型中的错误情况。<ul>
<li>如果数字运算的操作数不是数字类型或者无法解析为常规的十进制或者十六进制数组，就会返回NaN。</li>
<li>NaN和自身不相等，是唯一一个非自反的值，<code>NaN != NaN</code> 为true。</li>
<li>可以用<code>isNaN(..)</code>来判断一个值是否是NaN，但有个bug，参数既不是数字也不是NaN也会返回true，所以要尽量使用ES6的<code>Number.isNaN(..)</code>。</li>
<li>无穷除以无穷，即<code>Infinity / Infinity</code>是一个未定义操作，结果为NaN；有穷整数除以Infinity结果为0。</li>
</ul>
</li>
<li><strong>负零</strong>：有些应用程序中的数据需要以级数形式来表示（比如动画帧的移动速度），数字的符号位用来代表其他信息（比如移动的方向）。而<code>-0 === 0; // true</code>，可以使用<code>isNegZero(..)</code>这样的工具函数来辨别。</li>
<li><strong>特殊等式</strong>：ES6新增的<code>Object.is(..)</code>可以判断两个值是否绝对相等，就可以处理NaN和-0在相等比较的问题。</li>
</ul>
</li>
<li><strong>null</strong>：指空值，曾赋过值，但目前没有值；名称既是类型也是值；是一个特殊关键字，不是标识符，不能将其当做变量来使用和赋值。</li>
<li><strong>undefined</strong>：指从未赋值；名称既是类型也是值；也是一个标识符，可以被当做变量来使用和赋值。<ul>
<li>void运算符返回undefined，所以要将代码中的值（如表达式的返回值）设为undefined，就可以使用void。</li>
</ul>
</li>
<li><strong>引用</strong>：<ul>
<li>JavaScript没有指针，变量不可能成为指向另一个变量的引用，js对值和引用的赋值&#x2F;传递在语法上没有区别，完全根据值的类型来决定。</li>
<li>简单值（即标量基本类型值，包括null、undefined、string、number、boolean、symbol）总是通过值赋值的方式来赋值&#x2F;传递。</li>
<li>复合值——对象（包括数组和封装对象）和函数，总是通过引用复制的方式来赋值&#x2F;传递。</li>
<li>由于引用指向的是值本身而非变量，所以一个引用无法更改另一个引用的指向。</li>
</ul>
</li>
</ul>
<h3 id="原生函数"><a href="#原生函数" class="headerlink" title="原生函数"></a>原生函数</h3><ul>
<li><strong>常见原生函数</strong>：<code>String()</code>、<code>Number()</code>、<code>Boolean()</code>、<code>Array()</code>、<code>Object()</code>、<code>Function()</code>、<code>RegExp()</code>、<code>Date()</code>、<code>Error()</code>、<code>Symbol()</code>，也叫内建函数。</li>
<li>原生函数可以被当做构造函数来使用，通过构造函数（如<code>new String(&quot;abc&quot;)</code>）创建出来的是封装了基本类型值（如<code>&quot;abc&quot;</code>）的封装对象。</li>
<li>**内部属性<code>[[Class]]</code>**：所有typeof返回值为“Object”的对象（如数组）都包含一个内部属性<code>[[Class]]</code>，这个属性无法直接访问，一般通过<code>Object.prototype.toString(..)</code>来查看。<ul>
<li><code>Object.prototype.toString.call([1,2,3]); // &quot;[object Array]&quot;</code></li>
<li><code>Object.prototype.toString.call(null); // &quot;[object Null]&quot;</code></li>
<li><code>Object.prototype.toString.call(undefined); // &quot;[object Undefined]&quot;</code></li>
<li><code>Object.prototype.toString.call(42); // &quot;[object Number]&quot;</code></li>
</ul>
</li>
<li><strong>封装对象包装</strong>：js会自动为基本类型值包装一个封装对象，这样基本类型值就能访问.length和.toString()这样的属性和方法。</li>
<li><strong>当原生函数作为构造函数</strong>：<ul>
<li>**构造函数Array(..)**：<ul>
<li>不要求必须带new关键字，不带时会被自动补全。<code>Array(1,2,3)</code>和<code>new Array(1,2,3)</code>是一样的。</li>
<li>只带一个数字参数时，该参数会被作为数组的预设长度，而非充当数组中的一个元素。</li>
<li>包含至少一个“空单元”的数组称为“稀疏数组”。</li>
<li>永远不要创建和使用空单元数组。</li>
</ul>
</li>
<li>**构造函数Object(..)**：实际情况中没必要使用new Object()来创建对象，因为这样无法像常量形式那样一次设定多个属性，而必须逐一设定。</li>
<li>**构造函数Function(..)**：只有在极少数情况下有用，比如动态定义函数参数和函数体的时候。</li>
<li>**构造函数RegExp(..)**：在动态定义正则表达式的时候比较有用，通常更建议使用常量形式来定义正则表达式，语法简单执行效率也更高，因为js在代码执行前会对它们进行预编译和缓存。</li>
<li>**构造函数Date(..)**：创建日期对象必须使用<code>new Date()</code>，如果调用Date()不带new关键字则会得到当前日期的字符串值。</li>
<li>**构造函数Error(..)**：带不带new关键字都可。创建错误对象主要是为了获得当前运行栈的上下文，以便于调试。</li>
<li>**构造函数Symbol(..)**：Symbol（符号）是具有唯一性的特殊值，用它来命名对象属性不容易导致重名。使用时不能带new关键字。</li>
</ul>
</li>
<li><strong>原生原型</strong>：原生构造函数有自己的<code>.prototype</code>对象，这些对象包含其对应子类型所特有的行为特征。</li>
</ul>
<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><ul>
<li><strong>值类型转换</strong>：<ul>
<li>类型转换发生在静态类型语言的编译阶段，而强制类型转换发生在动态类型语言的运行时。</li>
<li><strong>强制类型转换</strong>：是隐式的类型转换。总是返回标量基本类型，不会返回对象和函数，</li>
</ul>
</li>
<li><strong>抽象值操作</strong>：<ul>
<li><strong>ToString</strong>：负责处理非字符串到字符串的强制类型转换，<code>toString()</code>可以被显式调用，或者在需要字符串化时自动调用。<ul>
<li>基本类型值的字符串化规则为：null转换为“null”，undefined转换为“undefined”，true转换为“true”，数字的字符串化则遵循通用规则。</li>
<li>对普通对象来说，除非自行定义，否则<code>toString()</code>（<code>Object.prototype.toString()</code>）返回内部属性[[Class]]的值。</li>
<li>数组的默认<code>toString()</code>方法经过了重新定义，将所有单元字符串化以后再用“,”连接起来。</li>
<li><code>JSON.stringify(..)</code>和<code>toString()</code>类似，但它并不是强制类型转换，它能将安全的JSON值字符串化。</li>
</ul>
</li>
<li>**ToNumber()**：<ul>
<li>true转换为1，false转换为0。</li>
<li>undefined转换为NaN，null转换为0。</li>
<li>对字符串的处理基本遵循数字常量的相关规则&#x2F;语法，处理失败时返回NaN。</li>
<li>对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型，则在遵循以上规则将其强制转换为数字。</li>
<li>例如，<code>Number(&quot;&quot;); // 0</code>、<code>Number([]); // 0</code>、<code>Number([&quot;abc&quot;]); // NaN</code></li>
</ul>
</li>
<li><strong>ToBoolean()</strong>:<ul>
<li><strong>假值</strong>：undefined、null、false、+0、-0、NaN、””，假值的布尔强制类型转换结果为false。</li>
<li><strong>假值对象</strong>：封装了假值的对象，例如<code>new Boolean(false)</code>、<code>new Number(0)</code>、<code>new String(&quot;&quot;)</code>、<code>document.all</code>（类数组对象，已被废止，用来判断是否是老版本的IE）</li>
<li><strong>真值</strong>：假值列表之外的值，包括所有字符串、[]、{}、function(){}等等。</li>
</ul>
</li>
</ul>
</li>
<li><strong>显式强制类型转换</strong>：<ul>
<li><strong>字符串和数字之间的显式转换</strong>：<code>String(..)</code>、<code>Number(..)</code>、<code>a.toString()</code>、一元运算符+</li>
<li><strong>显式解析数字字符串</strong>：<ul>
<li>解析允许字符串中含有非数字字符，解析从左到右的顺序，遇到非数字字符就停止。而转换不允许出现非数字字符，否则失败并返回NaN。</li>
<li><code>parseInt(..)</code>可以用来解析字符串中的数字，<code>parseFloat(..)</code>用来解析字符串中的浮点数。向它们传递非字符串参数，会首先被强制类型转换为字符串，应避免传递非字符串参数。</li>
</ul>
</li>
<li><strong>显式转换为布尔值</strong>：<ul>
<li><code>Boolean(..)</code>（不带new）是显式的ToBoolean强制类型转换。</li>
<li>一元运算符<code>!</code>显式地将值强制类型转换为布尔值，同时会将真值反转为假值（或假值反转为真值）。所以<code>!!</code>是显式强制类型转换为布尔值最常用的方法。</li>
<li>在<code>if(..)..</code>这样的布尔值上下文中，会自动隐式地进行toBoolean转换。</li>
<li>三元运算符<code>? :</code>判断是否为真是一种“显式的隐式”的情况，建议使用<code>Boolean(a)</code>和<code>!!a</code>来进行显式强制类型转换。</li>
</ul>
</li>
</ul>
</li>
<li><strong>隐式强制类型转换</strong>：<ul>
<li><strong>字符串和数字之间的隐式强制类型转换</strong>：如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+将进行拼接操作；如果其中一个操作数是对象（包括数组），则首先对其调用ToPrimitive抽象操作，该抽象操作再调用[[DefalutValue]]，以数字作为上下文。简单来说就是，如果+的其中一个操作数是字符串则执行字符串拼接，否则执行数字加法。</li>
<li><strong>隐式强制类型转换为布尔值的情况</strong>：<ul>
<li><code>if(..)</code>语句中的条件判断表达式。</li>
<li><code>for(..;..;..)</code>语句中的第二个条件判断表达式。</li>
<li><code>while(..)</code>和<code>do..while(..)</code>循环中的条件判断表达式。</li>
<li><code>? :</code>中的条件判断表达式。</li>
<li>逻辑运算符<code>||</code>（逻辑或）和<code>&amp;&amp;</code>（逻辑与）左边的操作数（作为条件判断表达式）。</li>
</ul>
</li>
<li>**<code>||</code>和<code>&amp;&amp;</code>**：<ul>
<li><code>||</code>如果条件判断结果为true就返回第一个操作数的值，否则返回第二个操作数的值。通过这种方式来设置默认值很方便。</li>
<li><code>&amp;&amp;</code>如果条件判断结果为true就返回第二个操作数的值，否则返回第一个操作数的值。也叫做“守护运算符”，即前面的表达式为后面的表达式“把关”，js代码压缩工具常用<code>a &amp;&amp; foo()</code>这种方式。</li>
</ul>
</li>
<li><strong>符号的强制类型转换</strong>：<ul>
<li>ES6允许从符号到字符串的显式强制转换，然而隐式强制类型转换会发生错误。<code>String(Symbol(&quot;cool&quot;)); // &quot;Symbol(cool)&quot;</code>、<code>Symbol(&quot;not cool&quot;) + &quot;&quot;; // TypeError</code></li>
<li>符号可以被强制类型转换为布尔值（显式和隐式结果都是true），但不能被强制类型转换为数字（显式和隐式都会产生错误）</li>
</ul>
</li>
<li><strong>宽松相等和严格相等</strong>：<ul>
<li><code>===</code>允许在相等比较中进行强制类型转换，而<code>==</code>不允许。</li>
<li>**抽象相等<code>==</code>**：<ul>
<li>如果两个值的类型相同，就仅比较它们是否相等；两个对象指向同一个值时即视为相等，不发生强制类型转换。</li>
<li>特殊情况：NaN不等于NaN；+0等于-0；</li>
<li><strong>字符串和数字之间的相等比较</strong>：<ul>
<li>如果Type(x)是数字，Type(y)是字符串，则返回 <code>x == ToNumber(y)</code>的结果。</li>
<li>如果Type(x)是字符串，Type(y)是数字，则返回 <code>ToNumber(x) == y</code>的结果。</li>
</ul>
</li>
<li><strong>其他类型和布尔类型之间的相等比较</strong>：<ul>
<li>如果Type(x)是布尔类型，则返回 <code>ToNumber(x) == y</code>的结果。</li>
<li>如果Type(y)是布尔类型，则返回 <code>x == ToNumber(y)</code>的结果。</li>
</ul>
</li>
<li><strong>null和undefined之间的相等比较</strong>：在&#x3D;&#x3D;中null和undefined相等，它们也与其自身相等。</li>
<li><strong>对象和非对象之间的相等比较</strong>：<ul>
<li>如果Type(x)是字符串或数字，Type(y)是对象，则返回 <code>x == ToPrimitive(y)</code>的结果。</li>
<li>如果Type(x)是对象，Type(y)是字符串或数字，则返回 <code>ToPrimitive(x) == y</code>的结果。</li>
<li>上面没提到布尔值，原因是布尔值会先被强制类型转换为数字。</li>
<li>例如：<code>42 == [42]; // true</code>、<code>var a = &quot;abc&quot;; a == Object(a); // true</code>（拆封，即打开封装对象返回其中的基本数据类型值）</li>
</ul>
</li>
</ul>
</li>
<li><strong>安全运用隐式强制类型转换</strong>：<ul>
<li>如果两边的值中有true或者false，千万不要使用&#x3D;&#x3D;</li>
<li>如果两边的值中有[]、””或者0，尽量不要使用&#x3D;&#x3D;</li>
</ul>
</li>
</ul>
</li>
<li><strong>抽象关系比较</strong>：<ul>
<li>比较双方首先调用ToPrimitive，如果结果出现非字符串，就根据ToNumber规则将双方强制类型转换为数字来进行比较。</li>
<li>比较双方都是字符串，则按字母来进行比较。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul>
<li><strong>语法和表达式</strong>：<ul>
<li>代码块的结果值就如同一个隐式的返回，即返回最后一个语句的结果值。</li>
<li><strong>JSON</strong>：<ul>
<li>JSON是JavaScript语法的一个子集，但它并不是合法的JavaScript语法。</li>
<li>如果通过<code>&lt;script src=..&gt;</code>标签加载只包含JSON数据的JS文件，它就被会当做合法的JS代码来解析，但其内容无法被程序代码访问。JSON-P将JSON数据封装为函数调用，比如<code>foo(&#123;&quot;a&quot;: 42&#125;)</code>，能将JSON转换为合法的JS语法。</li>
<li><code>[] + &#123;&#125;; // [object Object]</code>：<code>&#123;&#125;</code>被当做一个值（空对象）来处理，<code>[]</code>会被强制类型转换为“”，而<code>&#123;&#125;</code>被强制类型转换为“[object Object]”。</li>
<li><code>&#123;&#125; + []; // 0</code>：<code>&#123;&#125;</code>被当做一个独立的空代码块（不执行任何操作），代码块结尾不需要分号，所以语法没问题。最后<code>+ []</code>将<code>[]</code>显示强制类型转换为0。</li>
</ul>
</li>
</ul>
</li>
<li><strong>运算符优先级</strong>：运算符执行的先后顺序，完整列表参见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">《运算符优先级》</a><ul>
<li><strong>短路</strong>：对<code>&amp;&amp;</code>和<code>||</code>来说，如果从左边的操作数能够得出结果，就可以忽略右边的操作数，这种现象称为“短路”，即执行最短路径。</li>
<li><strong>关联</strong>：多个运算符的组合方式。运算符的关联不是从左到右就是从右到左，这取决于组合是从左开始还是从右开始。</li>
<li>如果运算符优先级&#x2F;关联规则能够另代码更为简洁，就使用运算符优先级&#x2F;关联规则；而如果<code>()</code>有助于提高代码可读性，就使用<code>()</code>。</li>
</ul>
</li>
<li><strong>自动分号</strong>：如果JavaScript解析器发现代码行可能因为缺失分号而导致错误，那么它会自动补上分号，即自动分号插入（ASI）。并且只有在代码行末尾与换行符之间除了空格和注释之外没有别的内容时，它才会这么做。</li>
<li><strong>错误</strong>：JavaScript不仅有各种类型的运行时错误（typeError、ReferenceError、SyntaxError等，可以通过try..catch捕获），语法中也定义了一些编译时错误。编译时发现的代码错误叫做“早期错误”，无法被捕获，语法错误是早期错误的一种。</li>
<li><strong>函数参数</strong>：尽量不要使用arguments，更不要同时访问命名参数和其对应的arguments数组单元。</li>
<li><strong>try..finally</strong>：finally中的代码总在try之后执行，如果有catch则在catch之后执行。finally中的return会覆盖try和catch中return的返回值。</li>
<li><strong>混合环境</strong>：<ul>
<li>官方ECMAScript规范包括Annex B，其中介绍了由于浏览器兼容性问题导致的与官方规范的差异。</li>
<li>Web ECMAScript规范中介绍了官方ECMAScript规范和目前基于浏览器的JavaScript实现之间的差异。</li>
<li>“宿主对象”（包括内建对象和函数）是由宿主环境（浏览器等）创建并提供给JavaScript引擎的变量。例如console。</li>
<li>由于浏览器演进的历史遗留问题，在创建带有id属性的DOM元素时也会创建同名的全局变量。</li>
<li>对于将来可能成为标准的功能，按照大部分人赞同的方式来预先实现能和将来的标准兼容的polyfill，我们称为polyfill。polyfill能有效地为不符合最新规范的老版本浏览器填补缺失的功能，让你能够通过可靠的代码来支持所有你想要支持的运行环境。</li>
<li><code>&lt;script&gt;</code>：<ul>
<li>在<code>&lt;script&gt;..&lt;/script&gt;</code>和<code>&lt;script src=..&gt;..&lt;/script&gt;</code>中，全局变量作用域提升机制在这些边界中不适用。</li>
<li>如果script中的代码（无论是内联代码还是外部代码）发生错误，它会像独立的JavaScript程序那样停止，但是后续的script中的代码（仍然共享global）依然会接着运行，不会受影响。</li>
<li>内联代码和外部文件中的代码之间有个区别，即在内联代码中不可以出现<code>&lt;/script&gt;</code>字符串，一旦出现即被视为代码块结束。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="异步和性能"><a href="#异步和性能" class="headerlink" title="异步和性能"></a>异步和性能</h2><h3 id="异步：现在与将来"><a href="#异步：现在与将来" class="headerlink" title="异步：现在与将来"></a>异步：现在与将来</h3><ul>
<li><strong>分块的程序</strong>：<ul>
<li>JavaScript程序总是分为两个块：第一块现在运行；下一块将来运行，以响应某个事件。尽管程序是一块一块执行的，但是所有这些块共享对程序作用域和状态的访问，所以对状态的修改都是在之前积累的修改之上进行的。</li>
<li>同步AJAX请求会锁定浏览器UI（按钮、菜单、滚动条等），并阻塞所有的用户交互。</li>
<li>任何时候，只要把一段代码包装成一个函数，并指定它在响应某个事件（定时器、鼠标点击、Ajax响应等）时执行，你就是在代码中创建了一个将来执行的块，也由此在这个程序中引入了异步机制。</li>
</ul>
</li>
<li><strong>事件循环</strong>：<ul>
<li>JavaScript引擎运行在各种宿主环境中，如浏览器、服务器，这些环境都提供了一种机制来处理程序中多个块的执行，且执行每块时调用JavaScript引擎，这种机制被称为事件循环。JavaScript引擎并没有时间的概念，只是一个按需执行JavaScript任意代码片段的环境。“事件”调度总是由包含它的环境进行。</li>
<li>ES6引入了Promise，精确指定了事件循环的工作细节，意味着在技术上将其纳入了JavaScript引擎的势力范围，而不是只由宿主环境来管理，意味着JavaScript才真正内建有直接的异步概念。</li>
<li>一旦有事件需要运行，事件循环就会运行，直到队列清空。事件循环的每一轮称为一个tick。用户交互、IO和定时器会向事件队列中加入事件。</li>
</ul>
</li>
<li><strong>并行线程</strong>：<ul>
<li>异步是关于现在和将来的时间间隙，而并行是关于能够同时发生的事情。</li>
<li>并行计算最常见的工具是进程和线程。进程和线程独立运行，并可能同时运行：在不同的处理器，甚至不同的计算机上，但多个线程能够共享单个进程的内存。</li>
<li>事件循环把自身的工作分成一个个任务并顺序执行，不允许对共享内存的并行访问和修改。通过分立线程中彼此合作的事件循环，并行和顺序执行可以共存。</li>
<li>由于JavaScript的单线程特性，<code>foo()</code>（以及<code>bar()</code>）中的代码具有原子性，一旦<code>foo()</code>开始运行，它的所有代码都会在<code>bar()</code>中的任意代码运行之前完成，或者相反，这称为完整运行特性。</li>
</ul>
</li>
<li><strong>并发</strong>：<ul>
<li>并发是指两个或多个事件链随时间发展交替执行，以至于从更高的层次来看，就像是同时在运行（尽管在任意时刻只处理一个事件）。</li>
<li>单线程事件循环是并发的一种形式。</li>
<li>并发协作的目标是取到一个长期运行的“进程”，并将其分割成多个步骤或多批任务，使得其他并发“进程”有机会将自己的运算插入到事件循环队列中交替运行。</li>
</ul>
</li>
<li><strong>任务队列</strong>：是挂在事件循环队列的每个tick之后的一个队列。在事件循环的每个tick中，可能出现的异步动作不会导致一个完整的新事件添加到事件循环队列中，而会在当前tick的任务队列末尾添加一个项目（一个任务）。</li>
</ul>
<h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><ul>
<li>回调函数是JavaScript异步的基本单元。但是随着JavaScript越来越成熟，对于异步编程领域的发展，回调已经不够用了。</li>
<li>把自己程序一部分的执行控制交给某个第三方，称为控制反转。回调会受到控制反转的影响，存在一系列麻烦的信任问题。</li>
<li>通过回调表达程序异步和管理并发存在两个缺陷：缺乏顺序性和可信任性。</li>
</ul>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><ul>
<li><strong>什么是Promise</strong>：<ul>
<li>绝大多数JavaScript&#x2F;DOM平台新增的异步API都是基于Promise构建的。</li>
<li>Promise决议后就是外部不可变的值，可以安全地把这个值传递给第三方，并确信它不会被有意无意地修改。</li>
<li>Promise是一种封装和组合未来值的易于复用的机制。</li>
<li><code>new Promise(function(..)&#123;..&#125;)</code>模式通常称为revealing constructor。传入的函数会立即执行，有resolve和reject两个参数，都是promise的决议函数，<code>resolve(..)</code>通常标识完成，<code>reject(..)</code>则标识拒绝。</li>
<li>Promise一旦决议，就会一直保持其决议结果（完成或拒绝）不变，可以按照需要多次查看。</li>
</ul>
</li>
<li><strong>具有then方法的鸭子类型</strong>：<ul>
<li>根据一个值的形态（具有哪些属性）对这个值的类型做出一些假定。这种类型检查一般用术语鸭子类型来表示——“如果它看起来像鸭子，叫起来像只鸭子，那它一定就是只鸭子”。</li>
<li>识别Promise（或者行为类似于Promise的东西）就是定义某种称为thenable的东西，将其定义为任何具有<code>then(..)</code>方法的对象和函数。我们认为，任何这样的值就是Promise一致的thenable。</li>
</ul>
</li>
<li><strong>Promise信任问题</strong>：<ul>
<li>对一个Promise调用<code>then(..)</code>的时候，即使这个Promise已经决议，提供给<code>then(..)</code>的回调也总会被异步调用。</li>
<li>一个Promise决议后，这个Promise上所有的通过<code>then(..)</code>注册的回调都会在下一个异步时机点上依次被立即调用，这些回调中的任意一个都无法影响或延误对其他回调的调用。</li>
<li>没有任何东西（甚至JavaScript错误）能阻止Promise向你通知它的决议（如果它决议了的话）。</li>
<li>Promise的定义方式使得它只能被决议一次。如果出于某种原因，Promise创建代码试图调用<code>resolve(..)</code>或<code>reject(..)</code>多次，或者试图两者都调用，那么这个Promise只会接受第一次决议，并忽略任何后续调用。</li>
<li>Promise至多只能有一个决议值（完成或拒绝）。如果使用多个参数调用<code>resolve(..)</code>或<code>reject(..)</code>，第一个参数之后的所有参数都会被忽略。</li>
<li>在Promise创建过程中或在查看其决议结果过程中的任何时间点上出现了一个JavaScript异常错误，这个异常就会被捕获，并且使这个Promise被拒绝。</li>
<li>如果向<code>Promise.resolve(..)</code>传递一个非Promise、非thenable的立即值，就会得到一个用这个值填充的promise。<code>Promise.resolve(..)</code>提供了可信任的Promise封装工具，能够保证总会返回一个Promise结果。</li>
<li>Promise这种模式通过可信任的语义把回调作为参数传递，使得这种行为更可靠更合理。通过把回调的控制反转反转回来，我们把控制权放在了一个可信任的系统中，这种系统的设计目的就是为了使异步编程更清晰。</li>
</ul>
</li>
<li><strong>链式流</strong>：<ul>
<li><strong>使链式流程控制可行的Promise固有特征</strong>：<ul>
<li>每次对Promise调用<code>then(..)</code>都会创建并返回一个新的Promise，可以将其链接起来。</li>
<li>不管从<code>then(..)</code>调用的完成回调（第一个参数）返回的值是什么，它都会自动设置为被链接Promise（第一点中的）的完成。</li>
<li>当传递给<code>Promise.resolve(..)</code>的是一个Promise或thenable而不是最终值时，<code>Promise.resolve(..)</code>会直接返回接收到的真正Promise，或展开接收到的thenable值，并在持续展开thenable的同时递归地前进。</li>
<li>在完成或拒绝处理函数内部，如果返回一个值或抛出一个异常，新返回的（可链接的）Promise就相应地决议。</li>
</ul>
</li>
</ul>
</li>
<li><strong>Promise模式</strong>：<ul>
<li><code>Promise.all([..])</code>：从<code>Promise.all([..])</code>返回的主Promise在且仅在所有的成员promise都完成后才会完成，如果这些promise中有任何一个被拒绝的话，主<code>Promise.all([..])</code>promise就会立即被拒绝，并丢弃来自其他所有promise的全部结果。这种模式传统上被称为门。如果向它传入空数组，它会立即完成</li>
<li>。</li>
<li><code>Promise.race([..])</code>：一旦有任何一个Promise决议为完成，<code>Promise.race([..])</code>就会完成；一旦有任何一个Promise决议为拒绝，它就会拒绝。这种模式传统上被称为门闩。如果向它传入空数组，就会被挂住，且永远不会决议。</li>
<li><code>Promise.none([..])</code>：与all类似，所有的Promise都要被拒绝，即拒绝转化为完成值，反之亦然。</li>
<li><code>Promise.any([..])</code>：与all类似，但是会忽略拒绝，所以只需要完成一个而不是全部。</li>
<li><code>Promise.first([..])</code>：与any类似，只要第一个Promise完成，就会忽略后续的任何拒绝和完成。</li>
<li><code>Promise.last([..])</code>：与first类似，但却是只有最后一个完成胜出。</li>
<li><code>Promise.map([..])</code>：接收一个数组的值，外加要在每个值上运行一个函数作为参数，本身返回一个promise，其完成值是一个数组，该数组（保持映射顺序）保存任务执行之后的异步完成值。</li>
</ul>
</li>
<li><strong>Promise API概述</strong>：<ul>
<li><code>new Promise(..)</code>构造器：<ul>
<li>有启示性的构造器<code>Promise(..)</code>必须和new一起使用，并且必须提供一个函数回调。这个回调是同步的或立即调用的。这个函数接受两个函数回调，用以支持promise的决议，通常把这两个函数称为<code>resolve(..)</code>和<code>reject(..)</code>。</li>
<li><code>resolve(..)</code>既可能完成promise，也可能拒绝，要根据传入参数而定。如果传的是一个非Promise、非thenable的立即值，这个promise就会用这个值完成。如果传的是一个真正的Promise或thenable值，这个值就会被递归展开，并且（要构造的）promise将取用其最终决议值或状态。</li>
<li><code>reject(..)</code>就是拒绝这个promise。</li>
</ul>
</li>
<li><code>Promise.resolve(..)</code>：创建一个已完成的Promise的快捷方式。会展开thenable值，返回的Promise采用传入的这个thenable的最终决议值，可能是完成也可能是拒绝。如果传入的是真正的Promise，那么它什么都不会做，只会直接把这个值返回。</li>
<li><code>Promise.reject(..)</code>：创建一个已被拒绝的Promise的快捷方式。</li>
<li><code>then(..)</code>和<code>catch(..)</code>：每个Promise实例都有这两个方法，通过这两个方法可以为这个Promise注册完成和拒绝处理函数。Promise决议后就会立即异步调用这两个处理函数之一。<ul>
<li><code>then(..)</code>接受一个或两个参数，第一个用于完成回调，第二个用于拒绝回调。两者中的任何一个被省略或者作为非函数值传入的话，就会替代为相应的默认回调。默认完成回调只是把消息传递下去，而默认拒绝回调则只是重新抛出（传播）其接收到的出错原因。</li>
<li><code>catch(..)</code>只接受一个拒绝回调作为参数，并自动替换默认完成回调，即等价于<code>then(null,..)</code>。</li>
<li><code>then(..)</code>和<code>catch(..)</code>都会创建并返回一个新的promise，这个promise可以用于实现Promise链式流程控制。</li>
</ul>
</li>
</ul>
</li>
<li><strong>Promise局限性</strong>：<ul>
<li>顺序错误处理：Promise链中的错误很容易被无意中忽略掉。很多时候并没有为Promise链序列的中间步骤保留的引用，就无法关联错误处理函数来可靠地检查错误。</li>
<li>单一值：Promise只能有一个完成值或一个拒绝理由。</li>
<li>单决议：Promise只能被决议一次（完成或拒绝）。</li>
<li>惯性：运动状态（使用回调的）的代码库会一直保持运动状态（使用回调的），直到受到一位聪明的、理解Promise的开发者的作用。</li>
<li>无法取消的Promise：一旦创建了一个Promise并为其注册了完成和&#x2F;或拒绝处理函数，如果出现某种情况使得这个任务悬而未决的话，没有办法从外部停止它的进程。</li>
<li>Promise性能：没有真正提供可信任性保护支持的列表以供选择。</li>
</ul>
</li>
</ul>
<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><ul>
<li><strong>打破完整运行</strong>：<ul>
<li>生成器是一类特殊的函数，可以一次或多次启动和停止，并一定非得要完成。</li>
<li>生成器除了能够接收参数并提供返回值之外，甚至提供了内建消息输入输出能力，通过<code>yield</code>和<code>next(..)</code>构成了一个双向消息传递系统。</li>
<li>规范和所有兼容浏览器都会丢弃给第一个<code>next(..)</code>的任何东西，只有暂停的<code>yield</code>才能接受通过<code>next(..)</code>传递的值。</li>
<li>每次构建一个迭代器，实际上就隐式构建了生成器的一个实例，通过这个迭代器来控制的是这个生成器实例。</li>
</ul>
</li>
<li><strong>生成器产生值</strong>：<ul>
<li>迭代器是一个定义良好的接口，用于从一个生产者一步步得到一系列值。JavaScript迭代器的接口与多数语言类似，每次想要从生产者得到下一个值的时候调用<code>next(..)</code>。</li>
<li>生成器可以在运行当中（完全保持其状态）暂停，并且将来再从暂停的地方恢复运行。这种交替的暂停和恢复是合作性的而不是抢占式的，通过关键字<code>yield</code>实现，只有控制生成器的迭代器具有恢复生成器的能力（通过<code>next(..)</code>）。</li>
<li>iterable（可迭代）指一个包含可以在其值上迭代的迭代器的对象。</li>
<li>从ES6开始，从一个iterable中提取迭代器的方法是：iterable必须支持一个函数，其名称是专门的ES6符号值<code>Symbol.iterable</code>。调用这个函数时，它会返回一个迭代器。</li>
<li>可以把生成器看作一个值的生产者，通过迭代器接口的<code>next(..)</code>调用一次提取出一个值。</li>
<li>因为生成器会在每个<code>yield</code>处暂停，憨憨<code>*something()</code>的状态（作用域）会被保持，即意味着不需要闭包在调用之间保持变量状态。</li>
<li><code>for..of</code>循环的“异常结束”（即提前终止），通常由break、return或者未捕获异常引起，会向生成器的迭代器发送一个信号使其终止。也可以在外部通过<code>return(..)</code>手工终止生成器的迭代器实例。如果生成器内<code>try..finally</code>语句，生成器终止就会出发finally语句。</li>
</ul>
</li>
<li><strong>异步迭代生成器</strong>：<ul>
<li>从本质上而言，我们把异步作为实现细节抽象了出去，使得我们可以以同步顺序的形式追踪流程控制：“发出一个Ajax请求，等它完成之后打印出结果”。</li>
<li>生成器yield暂停的特性意味着我们不仅能够从异步函数调用得到看似同步的返回值，还可以同步捕获来自这些异步函数调用的错误。</li>
<li>在异步控制流程方面，生成器的关键优点是：生成器内部的代码是以自然的同步&#x2F;顺序方式表达任务的一系列步骤。其技巧在于，我们把可能的异步隐藏在了关键字yield的后面，把异步移动到控制生成器的迭代器的代码部分。</li>
</ul>
</li>
<li><strong>生成器+Promise</strong>：生成器yield出Promise，然后其控制生成器的迭代器来执行它，直到结束。</li>
<li><strong>生成器委托</strong>：<ul>
<li>yield委托的主要目的是代码组织，以达到与普通函数调用的对称。</li>
<li>保持生成器分离有助于程序的可读性、可维护性和可调试性。</li>
<li>和yield委托透明地双向传递消息的方式一样，错误和异常也是双向传递的。</li>
</ul>
</li>
<li><strong>形实转换程序</strong>：JavaScript中的thunk是指一个用于调用另一个函数的函数，没有任何参数。从更大的角度来说，thunk本身基本上没有任何可信任性和可组合性保证，而这些是Promise的设计目标所在。单独使用thunk作为Promise的替代在这个特定的生成器异步模式里是可行的，但是与Promise具备的优势相比，这应该并不是一种理想方案。</li>
</ul>
<h3 id="程序性能"><a href="#程序性能" class="headerlink" title="程序性能"></a>程序性能</h3><ul>
<li><strong>Web Worker</strong>：<ul>
<li>JavaScript没有任何支持多线程执行的能力，但浏览器可以提供多个JavaScript引擎实例，各自运行在自己的线程上，这样就可以在每个线程上运行不同的程序。程序中每一个这样的独立多线程部分被称为一个（Web）Worker。这种类型的并行化被称为任务并行，重点在于把程序划分为多个块来并发运行。</li>
<li><code>var w1 = new Worker(&quot;http://some.url.1/mycoolworker.js&quot;)</code>：这样通过URL创建的Worker称为专用Worker。</li>
<li>Worker之间以及它们和程序之间，不会共享任何作用域或资源，而是通过一个基本的事件消息机制相互联系。</li>
<li>专用Worker和创建它的程序之间是一对一的关系，所以“message”事件没有任何歧义需要消除，它只能来自这个一对一的关系。</li>
<li>Worker w1对象侦听事件：<code>w1.addEventListener(&quot;message&quot;, function(evt)&#123; // evt.data &#125;)</code></li>
<li>发送事件给Worker w1对象：<code>w1.postMessage(&quot;something cool to say&quot;)</code></li>
<li>Worker w1内部接收消息：<code>addEventListener(&quot;message&quot;, function(evt&#123; // evt.data &#125;))</code></li>
<li>Worker w1内部发送消息：<code>postMessage(&quot;a really cool reply&quot;)</code></li>
<li>要在创建Worker的程序中终止Worker，可以调用Worker对象上的<code>terminate()</code>。突然终止Worker线程不会给它任何机会完成它的工作或者清理任何资源。</li>
<li>Web Worker非常适用于把长时间的或资源密集型的任务卸载到不同的线程中，以提高主UI线程的响应性。通常应用于处理密集型数学计算、大数据集排序、数据处理（压缩、音频分析、图像处理等）、高流量网络通信。</li>
<li>如果要在线程之间通过事件机制传递大量的信息，可以使用Transferable对象（对象所有权转移）或者结构化克隆算法（高效复制）。</li>
<li>SharedWorker是一个整个站点或者app的所有页面实例都可以共享的中心Worker。</li>
</ul>
</li>
<li><strong>SIMD</strong>：<ul>
<li>单指令多数据（SIMD）是一种数据并行方式，与Web Worker的任务并行相对。这里的重点是并行处理数据的多个位。</li>
<li>SIMD把CPU级的并行数学运算映射到JavaScript API，以获得高性能的数据并行运算，比如在大数据集上的数字处理。</li>
<li>通过SIMD，线程不再提供并行，取而代之的是现在CPU通过数字“向量”以及可以在所有这些数字上并行操作的指令，来提供SIMD功能，这是利用低级指令级并行的底层运算。</li>
</ul>
</li>
<li><strong>asm.js</strong>：这个标签是指JavaScript语言中可以高度优化的一个子集。通过小心避免某些难以优化的机制和模式（垃圾收集、类型强制转换等等），asm.js风格的代码可以被JavaScript引擎识别并进行特别激进的底层优化。</li>
</ul>
<h3 id="性能测试与调优"><a href="#性能测试与调优" class="headerlink" title="性能测试与调优"></a>性能测试与调优</h3><ul>
<li><strong>性能测试</strong>：性能测试工具——Benchmark.js、众包性能测试工具——jsPerf.com。</li>
<li><strong>尾调用优化（TCO）</strong>：尾调用就是一个出现在另一个函数“结尾”处的函数调用。调用一个新的函数需要额外的一块预留内存来管理调用栈，称为栈帧。TCO允许一个函数在结尾处调用另一个函数来执行，不需要任何额外资源，这意味着对递归算法来说，引擎不再需要限制栈深度。ES6确保了JavaScript可以在所有符合ES6+的浏览器中依赖这个优化。</li>
</ul>
<hr>
<h1 id="下卷"><a href="#下卷" class="headerlink" title="下卷"></a>下卷</h1><h2 id="起步上路"><a href="#起步上路" class="headerlink" title="起步上路"></a>起步上路</h2><h3 id="深入编程"><a href="#深入编程" class="headerlink" title="深入编程"></a>深入编程</h3><ul>
<li>语句由一个或多个表达式组成。一个表达式是对一个变量或值的引用，或者是一组值和变<br>量与运算符的组合。</li>
<li>JavaScript 引擎实际上是动态编译程序，然后立即执行编译后的代码。</li>
<li>在值上执行动作需要运算符，执行各种类型的动作需要值和类型，在程序的执行过程中需要变量来保存数据(也就是状态)。</li>
<li>有关运算符的更多细节以及这里没有覆盖到的更多介绍，参见Mozilla开发者网络的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators">《表达式与运算符》</a>。</li>
<li>代码注释是编写可读代码的一种有效方法，能让你的代码更易于理解和维护，如果以后出 现问题的话也更加容易进行修复。</li>
<li>弱类型(也称为动态类型)允许一个变量在任意时刻存放任意类型的值。JavaScript采用了动态类型，变量可以持有任意类型值而不存在类型强制。</li>
<li>常量，即声明一个变量，赋予一个特定值，然后这个值在程序执行过程中保持不变。通常来说，在JavaScript中这些常量的声明通常放在程序的开头，作为常量的变量用大写表示，多个单词之间用下划线<code>_</code>分隔。</li>
<li>在JavaScript中，使用一对大括号<code>&#123; .. &#125;</code>在一个或多个语句外来表示块。通常来说，块会与其他某个控制语句组合在一起，比如 if 语句或循环。</li>
<li>程序中有很多种方法可以用于表示条件判断(也就是决策)。最常用的是 if 语句。本质上就是在表达“如果这个条件是真的，那么进行后续这些……”。</li>
<li>while循环和do..while循环形式展示了重复一个语句块直到一个条件判断求值不再为真这个概念。唯一实际区别是，条件判断在第一次迭代执行前(while)检查还是在第一次迭代后(do..while)检查。</li>
<li>编程需要函数将代码组织为逻辑上可复用的块。通常来说，函数是可以通过名字被“调用”的已命名代码段，每次调用，其中的代码就会运行。</li>
<li>在JavaScript中，每个函数都有自己的作用域。作用域基本上是变量的一个集合以及如何通过名称访问这些变量的规则。<ul>
<li>只有函数内部的代码才能访问这个函数作用域中的变量。</li>
<li>同一个作用域内的变量名是唯一的。</li>
<li>作用域是可以彼此嵌套的，一个作用域内的代码可以访问这个作用域内以及任何包围在它之外的作用域中的变量。</li>
</ul>
</li>
</ul>
<h3 id="深入JavaScript"><a href="#深入JavaScript" class="headerlink" title="深入JavaScript"></a>深入JavaScript</h3><ul>
<li><strong>值与对象</strong>：<ul>
<li>JavaScript的值有类型，但变量无类型，变量只是这些值的容器。以下是可用的内置类型：字符串、数字、布尔型、null、undefined、对象、符号(ES6 中新增的)。</li>
<li>对象类型是指一个组合值，你可以为其设置属性(命名的位置)，每个属性可以持有属于<br>自己的任意类型的值。</li>
<li>数组是一个持有(任意类型)值的对象，这些值不是通过命名属性 &#x2F; 键值索引，而是通过 数字索引位置。</li>
<li>函数也同样是对象的一个子类型，typeof返回”function”。function可以拥有属性，但通常只在很少的情况下才会使用函数的对象属性。</li>
<li>JavaScript程序中有两种主要的值比较：相等与不等。不管比较的类型是什么，任何比较<br>的结果都是严格的布尔值(true 或者 false)。<ul>
<li>相等运算符有四种：<code>==</code>、<code>===</code>、<code>!=</code>和<code>!==</code>。<code>==</code>检查的是允许类型转换情况下的值的相等性，而<code>===</code>（严格相等）检查不允许类型转换情况下的值的相等性。<ul>
<li>如果要比较的两个值的任意一个(即一边)可能是<code>true</code>或者<code>false</code>值，那么要避免使 用<code>==</code>，而使用<code>===</code>。</li>
<li>如果要比较的两个值中的任意一个可能是特定值(<code>0</code>、<code>&quot;&quot;</code> 或者<code>[]</code>——空数组)，那么避 免使用<code>==</code>，而使用<code>===</code>。</li>
<li>在所有其他情况下，使用<code>==</code>都是安全的。不仅仅只是安全而已，这在很多情况下也会 简化代码，提高代码的可读性。</li>
<li>如果是比较两个非原生值的话，比如对象(包括函数和数组)，因为这些值通常是通过引用访问的，所以<code>==</code>和<code>===</code>比较只是简单地检查这些引用是否匹配，而完全不关心其引用的值是什么。</li>
</ul>
</li>
<li>运算符 <code>&lt;</code>,<code>&gt;</code>、<code>&lt;=</code>和<code>&gt;=</code>用于表示不等关系，在规范中被称为“关系比较”。</li>
</ul>
</li>
<li>JavaScript中有显式与隐式两种类型转换。显式的类型转换就是可以在代码中看到的类型由一种转换到另一种，而隐式的类型转换多是某些其他运算可能存在的隐式副作用而引发的类型转换。</li>
<li>JavaScript中“假”值的详细列表如下：””(空字符串)、0、-0、NaN( 无效数字)、null、undefined、false；任何不在“假”值列表中的值都是“真”值。</li>
</ul>
</li>
<li><strong>变量</strong>：<ul>
<li>在JavaScript中，变量的名称(包括函数名称)必须是有效的标识符。标识符必须由 a<del>z、A</del>Z、$ 或 _ 开始。它可以包含前面所有这些字符以及数字 0~9。</li>
<li><strong>函数作用域</strong>：<ul>
<li>如果使用关键字var声明一个变量，那么这个变量就属于当前的函数作用域，如果声明是 发生在任何函数外的顶层声明，那么这个变量则属于全局作用域。</li>
<li>提升：无论var出现在一个作用域中的哪个位置，这个声明都属于整个作用域，在其中到处都是可以访问的。var声明概念上“移动”到了其所在作用域的最前面。</li>
<li>嵌套作用域：声明后的变量在这个作用域内是随处可以访问的，包括所有低层&#x2F;内层的作用域。试图在一个作用域中访问一个不可访问的变量，那么就会抛出ReferenceError。试图设定尚未声明的变量，那么就会导致在顶层全局作用域创建这个变量或者出现错误。</li>
</ul>
</li>
<li><strong>条件判断</strong>：if语句、switch语句、条件运算符。</li>
<li><strong>严格模式</strong>：ES5 为这个语言新增了“严格模式”，严格限制了某些行为的规则。这些限制可以将代码保持在一个更安全、更适当的规范集合之内，也更容易让引擎优化你的代码。</li>
</ul>
</li>
<li><strong>作为值的函数</strong>：不仅可以向函数传入值(参数)，函数本身也可以作为值赋给变量或者向其他函数传入，又或者从其他函数传出。<ul>
<li><strong>立即调用函数表达式</strong>：<code>(function IIFE()&#123; .. &#125;)();</code>函数表达式外面的<code>( .. ) </code>就是JavaScript语法能够防止其成为普通函数声明的部分。表达式最后的<code>()</code>(即 <code>&#125;)();</code>这一行)实际上就表示立即执行前面给出的函数表达式。</li>
<li><strong>闭包</strong>：可以将闭包看作“记忆”并在函数运行完毕后继续访问这个函数作用域(其变量)的一种方法。在JavaScript中，闭包最常见的应用是模块模式。模块允许你定义外部不可见的私有实现细节(变量、函数)，同时也可以提供允许从外部访问的公开API。</li>
</ul>
</li>
<li><strong>this标识符</strong>：如果一个函数内部有一个this引用，那么这个this通常指向一个对象。但它指向的是哪个对象要根据这个函数是如何被调用来决定。</li>
<li><strong>原型</strong>：当引用对象的某个属性时，如果这个属性并不存在，那么JavaScript会自动使用对象的内部原型引用找到另外一个对象来寻找这个属性。<ul>
<li>从一个对象到其后备对象的内部原型引用的链接是在创建对象时发生的。展示这一点的最简单的方法就是使用内置工具<code>Object.create(..)</code>。这个特性最常见的使用(我认为是误用)方式就是模拟&#x2F;伪装带“继承”关系的“类”机制。</li>
<li>更自然应用原型的方式是被称为“行为委托”的模式，其设计意图是，被链接对象能够将 其所需要的行为委托给另外一个对象。</li>
</ul>
</li>
<li><strong>旧与新</strong>：可以使用两种主要的技术，即polyfilling和transpilling，向旧版浏览器“引入”新版的JavaScript特性。<ul>
<li>polyfill用于表示根据新特性的定义，创建一段与之行为等价但能够在旧的JavaScript环境中运行的代码。</li>
<li>transpiling通过工具将新版代码转换为等价的旧版代码。</li>
</ul>
</li>
<li><strong>非JavaScript</strong>：最常见的非JavaScript就是DOM API，比如document、console、alert等，通常被称为“宿主对象”。</li>
</ul>
<h2 id="ES6及更新版本"><a href="#ES6及更新版本" class="headerlink" title="ES6及更新版本"></a>ES6及更新版本</h2><h3 id="ES-现在与未来"><a href="#ES-现在与未来" class="headerlink" title="ES? 现在与未来"></a>ES? 现在与未来</h3><ul>
<li><strong>版本</strong>：<ul>
<li>JavaScript 标准的官方名称是“ECMAScript”(简称“ES”)。</li>
<li>第一个流行起来的JavaScript版本是ES3，它成为浏览器IE6-8和早前的旧版Android 2.x移动浏览器的JavaScript标准。</li>
<li>2009年，ES5正式发布(然后是 2011 年的 ES5.1)，在当代浏览器(包括Firefox、Chrome、Opera、Safari 以及许多其他类型)的进化和爆发中成为JavaScript广泛使用的标准。</li>
<li>下一个JavaScript版本(发布日期从2013年拖到2014年，然后又到2015年)标签，之前的共识显然是ES6。</li>
</ul>
</li>
<li><strong>transpiling</strong>：<ul>
<li>transpiling（transformation + compiling，转换+编译）利用 专门的工具把你的ES6代码转化为等价(或近似!)的可以在ES5环境下工作的代码。</li>
<li>polyfill：也称为shim，在可能的情况下，polyfill会为新环境中的行为定义在旧环境中的等价行为。语法不能polyfill，而API通常可以。</li>
<li>保持JavaScript发展更新的最好战略就是在你的代码中引入polyfill shim，并且在构建过程中加入transpiler步骤。</li>
</ul>
</li>
</ul>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><ul>
<li><strong>块作用域声明</strong>：<ul>
<li><strong>let声明</strong>：<ul>
<li>和传统的var声明变量不同，不管出现在什么位置，var都是归属于包含它的整个函数作用域。let声明归属于块作用域，但是直到在块中出现才会被初始化。</li>
<li>过早访问let声明的引用导致的这个ReferenceError严格说叫作临时死亡区(Temporal Dead Zone，TDZ)错误——在访问一个已经声明但没有初始化的变量。</li>
<li>let+for：for循环头部的<code>let i</code>不只为for循环本身声明了一个i，而是为循环的每一次迭代都重新声明了一个新的i。这意味着loop迭代内部创建的闭包封闭的是每次迭代中的变量。</li>
</ul>
</li>
<li><strong>const声明</strong>：<ul>
<li>const用于创建常量，是一个设定了初始值之后就只读的变量。</li>
<li>const声明必须要有显式的初始化。</li>
<li>常量是对赋值的那个变量的限制，只是赋值本身不可变。如果这个值是复杂值，比如对象或者数组，其内容仍然是可以修改的。</li>
</ul>
</li>
<li><strong>块作用域函数</strong>：块内声明的函数，其作用域在这个块内。</li>
</ul>
</li>
<li><strong>spread&#x2F;rest</strong>：<ul>
<li><code>...</code>是展开或收集的运算符，取决于它在哪&#x2F;如何使用。</li>
<li>当<code>...</code>用在数组之前时(实际上是任何iterable)，它会把这个变量“展开”为各个独立的值。也为我们提供了可以替代<code>apply(..)</code>方法的一个简单的语法形式。</li>
<li>另外一种常见用法基本上可以被看作反向的行为<ul>
<li><code>function foo(x, y, ...z) &#123; console.log( x, y, z ); &#125; foo( 1, 2, 3, 4, 5 ); // 1 2 [3,4,5]</code></li>
<li>与把一个值展开不同，<code>...</code>把一系列值收集到一起成为一个数组。</li>
<li>如果没有命名参数的话，<code>...</code>就会收集所有的参数。</li>
<li>它为弃用很久的arguments提供了一个非常可靠的替代形式。</li>
</ul>
</li>
</ul>
</li>
<li><strong>默认参数值</strong>：<ul>
<li>为缺失参数赋默认值。</li>
<li>默认值表达式是惰性求值的，只在需要的时候运行，即参数的值省略或为undefined的时候。</li>
<li>函数声明中形式参数是在它们自己的作用域中(可以把它看作是就在函数声明包裹的<code>( .. )</code>的作用域中)，而不是在函数体作用域中。这意味着在默认值表达式中的标识符引用首先匹配到形式参数作用域，然后才会搜索外层作用域。</li>
<li>如果需要在没有指定其他函数情况下的默认cb是一个没有操作的空函数调用，那么这个声明可以是<code>cb = Function.prototype</code>，<code>Function.prototype</code>本身就是一个没有操作的空函数，这样就省去了在线函数表达式的创建过程。</li>
</ul>
</li>
<li><strong>解构</strong>：是一个结构化赋值方法，专用于数组解构和对象解构。<ul>
<li>对象属性赋值模式：<code>&#123; x, .. &#125;</code>是省略掉了<code>x:</code>部分，这里的语法模式是souce: target(或者说是value:variable-alias)。</li>
<li>解构是一个通用的赋值操作，不只是声明。对于对象解构形式来说，如果省略了var&#x2F;let&#x2F;const声明符，就必须把整个赋值表达式用<code>( )</code>括起来。因为如果不这样做，语句左侧的<code>&#123;..&#125;</code>作为语句中的第一个元素就会被当作是一个块语句而不是一个对象。</li>
<li>对象解构形式允许多次列出同一个源属性(持有值类型任意)。意味着可以解构子对象&#x2F;数组属性，同时捕获子对象&#x2F;类的值本身。</li>
<li>对象或者数组解构的赋值表达式的完成值是所有右侧对象&#x2F;数组的值。通过持有对象&#x2F;数组的值作为完成值，可以把解构赋值表达式组成链。</li>
</ul>
</li>
<li><strong>太多，太少，刚刚好</strong>：<ul>
<li>如果为比解构&#x2F;分解出来的值更多的值赋值，那么多余的值会被赋为undefined。符合“undefined就是缺失”原则。</li>
<li>使用与前面默认函数参数值类似的<code>=</code>语法，解构的两种形式都可以提供一个用来赋值的默认值，可以组合使用默认值赋值和前面介绍的赋值表达式语法。</li>
<li>如果解构的值中有嵌套的对象或者数组，也可以解构这些嵌套的值，可以把嵌套解构当作一种展平对象名字空间的简单方法。</li>
<li>可以用箭头IIFE代替一般的<code>&#123; &#125;</code>块和<code>let</code>声明来实现块封装。解构赋值&#x2F;默认值会被放在参数列表中，而重组的过程会被放在函数体的<code>return</code>语句中。</li>
</ul>
</li>
<li><strong>对象字面量扩展</strong>：<ul>
<li>简洁属性：如果需要定义一个与某个词法标识符同名的属性的话，可以把<code>x: x</code>简写为<code>x</code>。</li>
<li>简洁方法：<ul>
<li>关联到对象字面量属性上的函数也有简洁形式，对象中的<code>x: function()&#123; .. &#125;</code>可简写为<code>x() &#123; .. &#125;</code>。</li>
<li>简洁方法意味着匿名函数表达式，应该只在不需要它们执行递归或者事件绑定&#x2F;解绑定的时候使用。否则就按照老式的<code>something: function something(..)</code>方法来定义吧。</li>
</ul>
</li>
</ul>
</li>
<li><strong>计算属性名</strong>：<ul>
<li>用来支持指定一个要计算的表达式，其结果作为属性名。</li>
<li>对象字面定义属性名位置的<code>[ .. ]</code>中可以放置任意合法表达式。</li>
<li>计算属性名最常见的用法可能就是和Symbols共同使用。<code>var o = &#123;[Symbol.toStringTag]: &quot;really cool thing&quot;&#125;;</code>。</li>
<li>super只允许在简洁方法中出现，而不允许在普通函数表达式属性中出现。也只允许以<code>super.XXX</code>的形式(用于属性&#x2F;方法访问)出现，而不能以<code>super()</code>的形式出现。</li>
</ul>
</li>
<li><strong>模板字面量</strong>：<ul>
<li>使用`作为界定符的字符串字面量，支持嵌入基本的字符串插入表达式，其中任何<code>$&#123;..&#125;</code>形式的表达式都会被立即在线解析求值。</li>
<li>插入字符串字面量的一个优点是它们可以分散在多行，插入字符串字面量中的换行(新行)会在字符串值中被保留。</li>
<li>在插入字符串字面量的<code>$&#123;..&#125;</code>内可以出现任何合法的表达式，包括函数调用、在线函数表达式调用，甚至其他插入字符串字面量。</li>
<li>插入字符串字面量有点像是一个IIFE，在它出现的词法作用域内，没有任何形式的动态作用域。</li>
<li><strong>标签模板字面量</strong>：<ul>
<li>这是一类不需要<code>( .. )</code>的特殊函数调用。</li>
<li>标签(tag)部分，即`..`字符串字面量之前的 foo 这一部分 , 是一个要调用的函数值。</li>
<li>标签字符串字面量就像是一个插入表达式求值之后，在最后的字符串值编译之前的处理步骤，这个步骤为从字面值产生字符串提供了更多的控制。</li>
<li>标签函数接收第一个名为<code>strings</code>的数组参数，可以通过<code>strings.raw</code>属性访问字符串的原始未处理版本。ES6提供了一个内建函数可以用作字符串字面量标签：<code>String.raw(..)</code>。</li>
</ul>
</li>
</ul>
</li>
<li><strong>箭头函数</strong>：<ul>
<li>箭头函数定义包括一个参数列表(零个或多个参数，如果参数个数不是一个的话要用<code>( .. )</code>包围起来)，然后是标识<code>=&gt;</code>，函数体放在最后。</li>
<li>只有在函数体的表达式个数多于1个，或者函数体包含非表达式语句的时候才需要用<code>&#123; .. &#125;</code>包围。如果只有一个表达式，并且省略了包围的<code>&#123;..&#125;</code>的话，则意味着表达式前面有一个隐含的<code>return</code>，就像<code>(x,y) =&gt; x + y</code>。</li>
<li>箭头函数总是函数表达式;并不存在箭头函数声明。</li>
<li>箭头函数是匿名函数表达式，它们没有用于递归或者事件绑定&#x2F;解绑定的命名引用。</li>
<li>箭头函数支持普通函数参数的所有功能，包括默认值、解构、rest参数，等等。</li>
<li><code>=&gt;</code>箭头函数转变带来的可读性提升与被转化函数的长度负相关。这个函数越长，<code>=&gt;</code>带来的好处就越小；函数越短，<code>=&gt;</code>带来的好处就越大。</li>
<li><code>=&gt;</code>箭头函数的主要设计目的就是以特定的方式改变this的行为特性，解决this相关编码的一个特殊而又常见的痛点。在箭头函数内部，this绑定不是动态的，而是词法的。<code>=&gt;</code>是 <code>var self = this</code>的词法替代形式。</li>
<li>箭头函数还有词法arguments——它们没有自己的arguments数组，而是继承自父层——词法super和new.target也是一样。</li>
<li><strong>&#x3D;&gt;适用时机规则</strong>：<ul>
<li>如果有一个简短单句在线函数表达式，其中唯一的语句是<code>return</code>某个计算出的值，且这个函数内部没有this引用，且没有自身引用(递归、事件绑定&#x2F;解绑定)，且不会要求函数执行这些，那么可以安全地把它重构为<code>=&gt;</code>箭头函数。</li>
<li>如果你有一个内层函数表达式，依赖于在包含它的函数中调用<code>var self = this hack</code>或者<code>.bind(this)</code>来确保适当的this绑定，那么这个内层函数表达式应该可以安全地转换为<code>=&gt;</code>箭头函数。</li>
<li>如果你的内层函数表达式依赖于封装函数中某种像<code>var args = Array.prototype.slice.call(arguments)</code>来保证arguments的词法复制，那么这个内层函数应该可以安全地转换为<code>=&gt;</code>箭头函数。</li>
<li>所有的其他情况——函数声明、较长的多语句函数表达式、需要词法名称标识符(递归等)的函数，以及任何不符合以上几点特征的函数——一般都应该避免<code>=&gt;</code>函数语法。</li>
</ul>
</li>
<li>底线：<code>=&gt;</code>是关于 this、arguments和super的词法绑定。</li>
</ul>
</li>
<li><strong>for..of 循环</strong>：<ul>
<li>在迭代器产生的一系列值上循环，循环的值必须是一个iterable，或者说它必须是可以转换&#x2F;封箱到一个iterable对象的值。terable就是一个能够产生迭代器供循环使用的对象。</li>
<li>JavaScript中默认为(或提供)iterable的标准内建值包括：Arrays、Strings、Generators、Collections&#x2F;TypedArrays。</li>
<li>默认情况下平凡对象并不适用<code>for..of</code>循环，因为它们并没有默认的迭代器。</li>
<li>和其他循环一样，<code>for..of</code>循环也可以通过<code>break</code>、<code>continue</code>、<code>return</code>(如果在函数中的话)提前终止，并抛出异常。在所有这些情况中，如果需要的话，都会自动调用迭代器的<code>return(..)</code>函数(如果存在的话)让迭代器执行清理工作。</li>
</ul>
</li>
<li><strong>正则表达式</strong>：<ul>
<li><strong>Unicode标识</strong>：<ul>
<li>JavaScript字符串通常被解释成16位字符序列，这些字符对应基本多语言平面（BMP）中的字符。但还有很多UTF-16字符在这个范围之外，所以字符串中还可能包含这些多字节字符。在ES6中，u标识符表示正则表达式用Unicode(UTF-16)字符来解释处理字符串，把这样的扩展字符当作单个实体来匹配。</li>
<li>u标识使得<code>+</code>和<code>*</code>这样的量词把整个Unicode码点作为单个字符而应用，而不仅仅是应用于字符的低位(也就是符号的最右部分)，在字符类内部出现的Unicode字符也是一样。</li>
</ul>
</li>
<li><strong>定点标识</strong>： <ul>
<li>定点主要是指在正则表达式的起点有一个虚拟的锚点，只从正则表达式的lastIndex属性指定的位置开始匹配。</li>
<li><code>test(..)</code>使用<code>lastIndex</code>作为<code>str</code>中精确而且唯一的位置寻找匹配。不会向前移动去寻找匹配——要么匹配位于<code>lastIndex</code>位置上，要么就没有匹配。</li>
<li>如果匹配成功，<code>test(..)</code>会更新lastIndex指向紧跟匹配内容之后的那个字符。如果匹配失败，<code>test(..)</code>会把<code>lastIndex</code>重置回0。</li>
<li>一般的没有用<code>^</code>限制输入起始点匹配的非定点模式可以自由地在输入字符串中向前移动寻找匹配内容。而定点模式则限制了模式只能从<code>lastIndex</code>开始匹配。</li>
<li>另一种理解思路是把<code>y</code>看作一个在模式开始处的虚拟锚点，限制模式(也就是限制匹配的起点)相对于<code>lastIndex</code>的位置。</li>
<li>可以应用y模式在字符串中执行重复匹配最适合的场景可能就是结构化的输入字符串。</li>
<li>^ 是一个总是指向输入起始处的锚点，和lastIndex完全没有任何关系。</li>
<li><code>y</code>加上<code>^</code>再加上<code>lastIndex &gt; 0</code>是一个不兼容的组合，总是会导致匹配失败。</li>
</ul>
</li>
<li><strong>正则表达式flags</strong>：<ul>
<li>从source属性的内容中解析出正则表达式对象应用的标识。</li>
<li>ES6规范中规定了表达式的标识按照这个顺序列出：”gimuy”，无论原始指定的模式是什么。</li>
<li>ES 的另一个调整是如果把标识传给已有的正则表达式，<code>RegExp(..)</code>构造器现在支持flags。</li>
</ul>
</li>
</ul>
</li>
<li><strong>数字字面量扩展</strong>：在非十进制数字字面量表示方面，ES6继续支持旧有的修改&#x2F;变体。同时现在有了一个正式八进制形式、一个补充的十六进制形式，以及一个全新的二进制形式。唯一合法的小数形式是十进制的。八进制、十六进制和二进制都是整数形式。</li>
<li><strong>Unicode</strong>：<ul>
<li>Unicode字符范围从0x0000到0xFFFF，包含可能看到和接触到的所有(各种语言的)标准打印字符。这组字符称为基本多语言平面(BMP)。</li>
<li>在ES6中有了可以用于作Unicode转义(在字符串和正则表达式中)的新形式，称为Unicode码点转义。</li>
<li>可以在查询长度之前使用ES6的<code>String#normalize(..)</code>工具对这个值执行Unicode规范化。<code>normalize(..)</code>接受像<code>&quot;e\u0301&quot;</code>这样的一个序列，然后把它规范化为<code>&quot;\xE9&quot;</code>。甚至如果有合适的Unicode符号可以合并的话，规范化可以把多个相邻的组合符号合并。</li>
<li>组合<code>String.fromCodePoint(..)</code>和<code>codePointAt(..)</code>能获得支持Unicode的<code>charAt(..)</code>。</li>
<li>Unicode也可以用作标识符名(变量、属性等)。</li>
</ul>
</li>
<li><strong>符号</strong>：<ul>
<li>symbol没有字面量形式。下面是创建symbol的过程：<code>var sym = Symbol( &quot;some description&quot; );</code></li>
<li>不能也不应该对<code>Symbol(..)</code>使用<code>new</code>。它并不是一个构造器，也不会创建一个对象。</li>
<li>传给<code>Symbol(..)</code>的参数是可选的。如果传入了的话，应该是一个为这个<code>symbol</code>的用途给出用户友好描述的字符串。</li>
<li><code>typeof</code>的输出是一个新的值(“symbol”)，这是识别symbol的首选方法。</li>
<li>符号本身的内部值——称为它的名称(name)——是不在代码中出现且无法获得的。可以把这个符号值想象为一个自动生成的、(在应用内部)唯一的字符串值。</li>
<li>符号的主要意义是创建一个类(似)字符串的不会与其他任何值冲突的值。</li>
<li>可以在对象中直接使用符号作为属性名&#x2F;键值，比如用作一个特殊的想要作为隐藏或者元属性的属性。</li>
<li><code>Symbol.for(..)</code>在全局符号注册表中搜索，来查看是否有描述文字相同的符号已经存在，如果有的话就返回它。如果没有的话，会新建一个并将其返回。换句话说，全局注册表把符号值本身根据其描述文字作为单例处理。这也意味着只要使用的描述名称匹配，可以在应用的任何地方通过<code>Symbol.for(..)</code>从注册表中获取这个符号。</li>
<li>可以使用<code>Symbol.keyFor(..)</code>提取注册符号的描述文本(键值)。</li>
<li>如果把符号用作对象的属性&#x2F;键值，那么它会以一种特殊的方式存储，使得这个属性不出现在对这个对象的一般属性枚举中。可以使用<code>Object.getOwnPropertySymbols( o );  // [ Symbol(bar) ]</code>取得对象的符号属性列表。</li>
<li>规范使用<code>@@</code>前缀记法来指代内置符号，最常用的一些是：<code>@@iterator</code>、<code>@@toStringTag</code>、<code>@@toPrimitive</code>。</li>
</ul>
</li>
</ul>
<h3 id="代码组织"><a href="#代码组织" class="headerlink" title="代码组织"></a>代码组织</h3><ul>
<li><strong>迭代器</strong>：<ul>
<li>迭代器是一种有序的、连续的、基于拉取的用于消耗数据的组织方式。</li>
<li><strong>接口</strong>：<ul>
<li>Iterator接口：<ul>
<li><code>Iterator [required]</code></li>
<li><code>next() &#123;method&#125;</code>: 取得下一个IteratorResult</li>
</ul>
</li>
<li>有些迭代器还扩展支持两个可选成员:<ul>
<li><code>Iterator [optional]</code></li>
<li><code>return() &#123;method&#125;</code>：停止迭代器并返回IteratorResult</li>
<li><code>throw() &#123;method&#125;</code>：报错并返回IteratorResult</li>
</ul>
</li>
<li>IteratorResult接口指定如下:<ul>
<li><code>IteratorResult</code></li>
<li><code>value &#123;property&#125;</code>：当前迭代值或者最终返回值(如果undefined为可选的)</li>
<li><code>done &#123;property&#125;</code>：布尔值，指示完成状态</li>
</ul>
</li>
<li><code>@@iterator</code>是一个特殊的内置符号，表示可以为这个对象产生迭代器的方法:<ul>
<li><code>Iterable</code></li>
<li><code>@@iterator() &#123;method&#125;</code>：产生一个 Iterator</li>
</ul>
</li>
<li><code>IteratorResult</code>接口指定了从任何迭代器操作返回的值必须是下面这种形式的对象：<code>&#123; value: .. , done: true / false &#125;</code></li>
<li>严格来说，如果不提供<code>value</code>可以被当作是不存在或者未设置，就像值<code>undefined</code>，那么<code>value</code>是可选的。因为访问<code>res.value</code>的时候，不管它存在且值为<code>undefined</code>，还是根本不存在，都会产生<code>undefined</code>，这个属性的存在&#x2F;缺席更多的是一个实现细节或者优化技术(或者二者兼有)，而非功能问题。</li>
</ul>
</li>
<li><strong>next()迭代</strong>：<ul>
<li><code>var arr = [1,2,3]; var it = arr[Symbol.iterator](); it.next();</code></li>
<li>每次在这个<code>arr</code>值上调用位于<code>Symbol.iterator</code>的方法时，都会产生一个全新的迭代器。</li>
<li>代码在提取值3的时候，迭代器it不会报告<code>done: true</code>。必须得再次调用<code>next()</code>，越过数组结尾的值，才能得到完成信号<code>done: true</code>。</li>
<li>迭代器的<code>next(..)</code>方法可以接受一个或多个可选参数。绝大多数内置迭代器没有利用这个功能，尽管生成器的迭代器肯定有。</li>
<li>包括所有内置迭代器，在已经消耗完毕的迭代器上调用<code>next(..)</code>不会出错，而只是简单地继续返回结果<code>&#123; value: undefined, done: true &#125;</code>。</li>
</ul>
</li>
<li>**可选的return(..)和throw(..)**：<ul>
<li><code>return(..)</code>被定义为向迭代器发送一个信号，表明消费者代码已经完毕，不会再从其中提取任何值。<ul>
<li>这个信号可以用于通知生产者(响应<code>next(..)</code>调用的迭代器)执行可能需要的清理工作，比如释放&#x2F;关闭网络、数据库或者文件句柄资源。</li>
<li>如果迭代器存在<code>return(..)</code>，并且出现了任何可以自动被解释为异常或者对迭代器消耗的提前终止的条件，就会自动调用<code>return(..)</code>。也可以手动调用<code>return(..)</code>。</li>
<li><code>return(..)</code>就像<code>next(..)</code>一样会返回一个<code>IteratorResult</code>对象。一般发送给<code>return(..)</code>的可选值将会在这个<code>IteratorResult</code>中作为value返回。</li>
</ul>
</li>
<li><code>throw(..)</code>用于向迭代器报告一个异常&#x2F;错误，但并不一定意味着迭代器的完全停止。</li>
</ul>
</li>
<li><strong>迭代器循环</strong>：<ul>
<li>ES6的<code>for..of</code>循环直接消耗一个符合规范的iterable。</li>
<li>如果一个迭代器也是一个iterable，那么它可以直接用于<code>for..of</code>循环。你可以通过为迭代器提供一个<code>Symbol.iterator</code>方法简单返回这个迭代器本身使它成为 iterable。</li>
</ul>
</li>
<li><strong>自定义迭代器</strong>：除了标准的内置迭代器，也可以自定义迭代器。要使得它们能够与ES6的消费者工具(比如，<code>for..of</code>循环以及<code>...</code>运算符)互操作，所需要做的就是使其遵循适当的接口。</li>
<li><strong>迭代器消耗</strong>：<code>for..of</code>循环、spread运算符<code>...</code>会一个接一个地消耗迭代器项目。数组解构可以部分或完全(如果和rest&#x2F;gather运算符<code>...</code>配对使用的话)消耗一个迭代器。</li>
</ul>
</li>
<li><strong>生成器</strong>：<ul>
<li>生成器可以在执行当中暂停自身，可以立即恢复执行也可以过一段时间之后恢复执行。</li>
<li>在执行当中的每次暂停&#x2F;恢复循环都提供了一个双向信息传递的机会，生成器可以返回一个值，恢复它的控制代码也可以发回一个值。</li>
<li><strong>语法</strong>：<code>function *foo()  &#123; .. &#125;</code></li>
<li>和普通函数主要的区别是，执行生成器并不实际在生成器中运行代码。相反，它会产生一个迭代器控制这个生成器执行其代码。</li>
<li>生成器在每次被调用的时候都产生了一个全新的迭代器。实际上，可以同时把多个迭代器附着在同一个生成器上。</li>
<li>**<code>yield</code>**：生成器中用来标示暂停点。<ul>
<li>生成器中<code>yield</code>可以出现任意多次。</li>
<li><code>yield .. </code>表达式可以出现在所有普通表达式可用的地方，它不只发送一个值，没有值的<code>yield</code>等价于<code>yield undefined</code>，而且还会接收(也就是被替换为)最终的恢复值。</li>
<li>因为<code>yield</code>关键字的优先级很低，几乎<code>yield..</code>之后的任何表达式都会首先计算，然后再通过<code>yield</code>发送。只有spread运算符<code>...</code>和逗号运算符<code>,</code>拥有更低的优先级，也就是说它们会在<code>yield</code>已经被求值之后才会被绑定。</li>
<li>和<code>=</code>赋值一样，<code>yield</code>也是“右结合”的，也就是说多个<code>yield</code>表达式连续出现等价于用<code>(..)</code>从右向左分组。所以，<code>yield yield yield 3</code>会被当作<code>yield(yield(yield 3))</code>。</li>
</ul>
</li>
<li>**yield***：<ul>
<li>也称为yield委托，语法上说，<code>yield *..</code>行为方式与<code>yield..</code>完全相同。</li>
<li><code>yield * ..</code>需要一个iterable，然后会调用这个iterable的迭代器，把自己的生成器控制委托给这个迭代器，直到其耗尽。</li>
<li>例如<code> function *foo() &#123; yield *[1,2,3]; &#125;</code>，值<code>[1,2,3]</code>产生了一个迭代器，一步输出一个值，所以<code>*foo()</code>生成器会随着消耗这些值把它们<code>yield</code>出来。</li>
</ul>
</li>
<li><strong>迭代器控制</strong>：<ul>
<li>假定所有都被计算，生成器完整运行到结束，<code>next()</code>调用总是会比<code>yield</code>语句多1个。</li>
<li>可以把生成器看作是值的产生器，其中每次迭代就是产生一个值来消费。</li>
<li>第一个<code>next()</code>调用初始的暂停状态启动生成器，运行直到第一个<code>yield</code>。在调用第一个<code>next()</code>的时候，并没有<code>yield..</code>表达式等待完成。如果向第一个<code>next()</code>调用传入一个值，这个值会马上被丢弃，因为并没有<code>yield</code>等待接收这个值。</li>
</ul>
</li>
<li><strong>提前完成</strong>：<ul>
<li>生成器上附着的迭代器支持可选的<code>return(..)</code>和<code>throw(..)</code>方法。这两种方法都有立即终止一个暂停的生成器的效果。</li>
<li><code>return(..)</code>：<ul>
<li><code>return(x)</code>有点像强制立即执行一个<code>return x</code>，这样就能够立即得到指定值。一旦生成器完成，或者正常完毕或者像前面展示的那样提前结束，都不会再执行任何代码也不会返回任何值。</li>
<li><code>return(..)</code>除了可以手动调用，还可以在每次迭代的末尾被任何消耗迭代器的ES6构件自动调用，比如<code>for..of</code>循环和spread运算符<code>...</code>。</li>
<li>目的是通知生成器如果控制代码不再在它上面迭代，那么它可能就会执行清理任务(释放资源、重置状态等)。和普通的函数清理模式相同，完成这一点的主要方式是通过<code>finally</code>子句。</li>
<li>不要把<code>yield</code>语句放在<code>finally</code>子句内部，这样会延后你的<code>return(..)</code>调用的完成，因为任何在<code>finally</code>子句内部的<code>yield..</code>表达式都会被当作是暂停并发送消息。</li>
</ul>
</li>
<li><code>throw(..)</code>：<ul>
<li>调用<code>throw(x)</code>基本上就相当于在暂停点插入一个<code>throw x</code>。</li>
<li>除了对异常处理的不同，<code>throw(..)</code>同样引起提前完成，在当前暂停点终止生成器的运行。</li>
<li>和<code>return(..)</code>不同，迭代器的<code>throw(..)</code>方法从来不会被自动调用。</li>
<li>如果在调用<code>throw(..)</code>的时候有<code>try..finally</code>子句在生成器内部等待，那么在异常传回调用代码之前<code>finally</code>子句会有机会运行。</li>
</ul>
</li>
</ul>
</li>
<li><strong>错误处理</strong>：<ul>
<li>生成器的错误处理可以表达为<code>try..catch</code>，它可以在由内向外和由外向内两个方向工作。 </li>
<li>错误也可以通过<code>yield *</code>委托在两个方向上传播。</li>
</ul>
</li>
<li><strong>Transpile生成器</strong>：Facebook的Regenerator工具。</li>
<li><strong>生成器使用</strong>：主要适用于两种模式——产生一系列值、顺序执行的任务队列。</li>
</ul>
</li>
<li><strong>模块</strong>：<ul>
<li><strong>旧方法</strong>：传统的模块模式基于一个带有内部变量和函数的外层函数，以及一个被返回的“public API”，这个“public API”带有对内部数据和功能拥有闭包的方法。其中常用的是异步模块定义(AMD)，还有一种是通用模块定义(UMD)。</li>
<li>ES6模块和过去处理模块的方式之间的概念区别：<ul>
<li>ES6使用基于文件的模块，即一个文件一个模块。意味着如果想要把ES6模块直接加载到浏览器Web应用中，需要分别加载，而不是作为一大组放在单个文件中加载。</li>
<li>ES6模块的API是静态的。即需要在模块的公开API中静态定义所有最高层导出，之后无法补充。</li>
<li>ES6模块是单例，模块只有一个实例，其中维护了它的状态。每次向其他模块导入这个模块的时候，得到的是对单个中心实例的引用。</li>
<li>模块的公开API中暴露的属性和方法并不仅仅是普通的值或引用的赋值。它们是到内部模块定义中的标识符的实际绑定(几乎类似于指针)。对于ES6来说，导出一个局部私有变量，即使当前它持有一个原生字符串&#x2F;数字等，导出的都是到这个变量的绑定。如果模块修改了这个变量的值，外部导入绑定现在会决议到新的值。</li>
<li>导入模块和静态请求加载(如果还没加载的话)这个模块是一样的。如果是在浏览器环境中，这意味着通过网络阻塞加载；如果是在服务器上(比如 Node.js)，则是从文件系统的阻塞加载。</li>
</ul>
</li>
<li><strong>新方法</strong>：<ul>
<li>支撑ES6模块的两个主要新关键字是<code>import</code>和<code>export</code>。</li>
<li><code>import</code>和<code>export</code>都必须出现在使用它们的最顶层作用域。举例来说，不能把import或export放在if条件中；它们必须出现在所有代码块和函数的外面。</li>
<li><strong>导出API成员</strong>：<ul>
<li><code>export</code>关键字或者是放在声明的前面，或者是作为一个操作符(或类似的)与一个要导出的绑定列表一起使用。没有用<code>export</code>标示的一切都在模块作用域内部保持私有。</li>
<li>模块导出不是像你熟悉的赋值运算符<code>=</code>那样只是值或者引用的普通赋值。实际上，导出的是对这些东西(变量等)的绑定(类似于指针)。</li>
<li>如果在你的模块内部修改已经导出绑定的变量的值，即使是已经导入的，导入的绑定也将会决议到当前(更新后)的值。</li>
<li>尽管显然可以在模块定义内部多次使用<code>export</code>，ES6绝对倾向于一个模块使用一个<code>export</code>，称之为默认导出(default export)。默认导出把一个特定导出绑定设置为导入模块时的默认导出。绑定的名称就是<code>default</code>，每个模块定义只能有一个 <code>default</code>。</li>
<li>除了<code>export default ...</code>形式导出一个表达式值绑定，所有其他的导出形式都是导出局部标识符的绑定。对于这些绑定来说，如果导出之后在模块内部修改某个值，外部导入的绑定会访问到修改后的值。如果并不打算更新默认导出的值，那么使用<code>export default ..</code>就好。如果确实需要更新这个值，就需要使用<code>export &#123; .. as default &#125;</code>。</li>
<li>JavaScript引擎无法静态分析平凡对象的内容，这意味着它无法对静态import进行性能优化。让每个成员独立且显式地导出的优点是引擎可以对其进行静态分析和优化。</li>
<li>ES6模块机制的设计意图是不鼓励模块大量导出。如果API已有多个成员，通常建议有一个单独的默认导出，同时又有其他命名导出，例如<code>export &#123; foo as default, bar, baz, .. &#125;;</code>。</li>
<li>如果有大量API并且通过重构拆分模块不实际或者不想这么做的时候，就都用命名导出好了，提供文档说明模块用户会用<code>import * as ..</code>(名字空间导入)方法来一次把所有API引入到某个名字空间中。</li>
</ul>
</li>
<li><strong>导入API成员</strong>：<ul>
<li>如果想导入一个模块API的某个特定命名成员到你的顶层作用域，可以使用下面语法：<code>import &#123; foo, bar, baz &#125; from &quot;foo&quot;;</code></li>
<li>字符串”foo” 称为模块指定符(module specifier)。因为整体目标是可静态分析的语法，模块指定符必须是字符串字面值，而不能是持有字符串值的变量。</li>
<li>以对导入绑定标识符重命名，就像这样：<code>import &#123; foo as theFooFunc &#125; from &quot;foo&quot;;</code></li>
<li>如果这个模块只有一个你想要导入并绑定到一个标识符的默认导出：<code>import foo from &quot;foo&quot;;</code>或者<code>import &#123; default as foo &#125; from &quot;foo&quot;;</code></li>
<li>ES6模块哲学强烈建议的方法是，只从模块导入需要的具体绑定。除了代码更清晰，窄导入的另一个好处是使得静态分析和错误检测(比如意外使用了错误的绑定名称)更加健壮。</li>
<li>可以把整个 API 导入到单个模块命名空间绑定，称为命名空间导入：<code>import * as foo from &quot;foo&quot;;</code></li>
<li>如果通过<code>* as ..</code>导入的模块有默认导出，它在指定的命名空间中的名字就是 default。还可以在这个命名空间绑定之外把默认导入作为顶层标识符命名。<code>import foofn, * as hello from &quot;world&quot;;</code></li>
<li>所有导入的绑定都是不可变和&#x2F;或只读的。</li>
<li>作为<code>import</code>结果的声明是“提升的”，“提升”了在模块作用域顶层的声明，使它在模块所有位置可用。</li>
</ul>
</li>
</ul>
</li>
<li><strong>模块依赖环</strong>：A导入B，B导入A，本质上说，相互导入，加上检验两个<code>import</code>语句的有效性的静态验证，虚拟组合了两个独立的模块空间(通过绑定)，这样<code>foo(..)</code>可以调用<code>bar(..)</code>，反过来也是一样。这和如果它们本来是声明在同一个作用域中是对称的。<code>import</code>语句的静态加载语义意味着可以确保通过<code>import</code>相互依赖的”foo”和”bar”在其中任何一个运行之前，二者都会被加载、解析和编译。所以它们的环依赖是静态决议的，就像期望的一样。</li>
<li><strong>模块加载</strong>：<ul>
<li>import语句使用外部环境(浏览器、Node.js 等)提供的独立机制，来实际把模块标识符字符串解析成可用的指令，用于寻找和加载所需的模块。这个机制就是系统模块加载器。</li>
<li>如果在浏览器中，环境提供的默认模块加载器会把模块标识符解析为 URL，(一般来说)如果在像Node.js这样的服务器上就解析为本地文件系统路径。默认行为方式假定加载的文件是以ES6标准模块格式编写的。</li>
<li>在模块之外加载模块：直接与模块加载器交互的一个用法是非模块需要加载一个模块的情况。工具<code>Reflect.Loader.import(..)</code>把整个模块导入到命名参数(作为一个命名空间)，就像前面讨论的命名空间导入<code>import * as foo ..</code>一样。</li>
<li>自定义加载：另外一种与模块加载器直接交互的用法，就是需要通过配置甚至重定义来自定义其行为的情况。</li>
</ul>
</li>
</ul>
</li>
<li><strong>类</strong>：<ul>
<li><strong>class</strong>：<ul>
<li>新的ES6类机制的核心是关键字<code>class</code>，表示一个块，其内容定义了一个函数原型的成员。</li>
<li>和对象字面量不一样，在class定义体内部不用逗号分隔成员。</li>
<li>前ES6形式和新的ES6 class形式的区别：<ul>
<li>由于前ES6可用的<code>Foo.call(obj)</code>不能工作，<code>class Foo</code>的<code>Foo(..)</code>调用必须通过<code>new</code>来实现。</li>
<li><code>function Foo</code>是“提升的”，而<code>class Foo</code>并不是；<code>extends ..</code>语句指定了一个不能被“提升”的表达式。所以，在实例化一个<code>class</code>之前必须先声明它。</li>
<li>全局作用域中的<code>class Foo</code>创建了这个作用域的一个词法标识符<code>Foo</code>，但是和<code>function Foo</code>不一样，并没有创建一个同名的全局对象属性。</li>
</ul>
</li>
<li>因为<code>class</code>只是创建了一个同名的构造器函数，所以现有的<code>instanceof</code>运算符对ES6类仍然可以工作。</li>
</ul>
</li>
<li><strong>extends和super</strong>：<ul>
<li>ES6类通过面向类的常用术语<code>extends</code>提供了一个语法糖，用来在两个函数原型之间建立<code>[[Prototype]]</code>委托链接——通常被误称为“继承”或者令人迷惑地标识为“原型继承”。</li>
<li>在构造器中，<code>super</code>自动指向“父构造器”。在方法中，<code>super</code>会指向“父对象”，这样就可以访问其属性&#x2F;方法了，比如 super.gimmeXY()。</li>
<li><code>Bar extends Foo</code>的意思就是把<code>Bar.prototype</code>的<code>[[Prototype]]</code>连接到<code>Foo.prototype</code>。所以，在像<code>gimmeXYZ()</code>这样的方法中，<code>super</code>具体指<code>Foo.prototype</code>，而在<code>Bar</code>构造器中<code>super</code>指的是<code>Foo</code>。</li>
<li><strong>super恶龙</strong>：<ul>
<li>super的行为根据其所处的位置不同而有所不同。</li>
<li><code>super(..)</code>意味着调用<code>new Foo(..)</code>，但是实际上并不是指向<code>Foo</code>自身的一个可用引用。</li>
<li><code>super.constructor</code>指向函数<code>Foo(..)</code>，但这个函数只能通过<code>new</code>调用。<code>new super.constructor</code>是合法的，不过它在多数情况下没什么用处，因为你无法让这个调用使用或引用当前的this对象上下文。</li>
<li>super并不像this那样是动态的。构造器或函数在声明时在内部建立了super引用(在class声明体内)，此时super是静态绑定到这个特定的类层次上的，不能重载(至少在ES6中是这样)。</li>
</ul>
</li>
<li><strong>子类构造器</strong>：<ul>
<li>对于类和子类来说，构造器并不是必须的；如果省略的话那么二者都会自动提供一个默认构造器。</li>
<li>子类构造器中调用<code>super(..)</code>之后才能访问<code>this</code>。因为创建&#x2F;初始化实例this的实际上是父构造器。</li>
<li>默认子类构造器自动调用父类的构造器并传递所有参数。可以把默认子类构造器看成下面这样：<code>constructor(...args) &#123; super(...args); &#125;</code></li>
</ul>
</li>
<li><strong>扩展原生类</strong>：新的class和extend设计带来的最大好处之一是可以构建内置类的子类，比如Array。</li>
<li><strong>new.target</strong>：<ul>
<li><code>new.target</code>也称为元属性。在任何构造器中，<code>new.target</code>总是指向<code>new</code>实际上直接调用的构造器，即使构造器是在父类中且通过子类构造器用<code>super(..)</code>委托调用。在一般函数中它通常是<code>undefined</code>。</li>
<li>除了访问静态属性&#x2F;方法之外，类构造器中的<code>new.target</code>元属性没有什么其他用处。</li>
</ul>
</li>
<li><strong>static</strong>：<ul>
<li>在为一个类声明了static方法(不只是属性)的情况下，它是直接添加到这个类的函数对象上的，而不是在这个函数对象的prototype对象上。static成员在函数构造器之间的双向&#x2F;并行链上。</li>
<li><code>static</code>适用的一个地方就是为派生(子)类设定<code> Symbol.species getter</code>(规范内称为<code>@@species</code>)。如果当任何父类方法需要构造一个新实例，但不想使用子类的构造器本身时，这个功能使得子类可以通知父类应该使用哪个构造器。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="异步流控制"><a href="#异步流控制" class="headerlink" title="异步流控制"></a>异步流控制</h3><ul>
<li><strong>Promise</strong>：<ul>
<li>Promise在回调代码和将要执行这个任务的异步代码之间提供了一种可靠的中间机制来管理回调。可以被看作是同步函数返回值的异步版本。</li>
<li>Promise的决议结果只有两种可能:完成或拒绝，附带一个可选的单个值。如果Promise完成，那么最终的值称为完成值；如果拒绝，那么最终的值称为原因(也就是“拒绝的原因”)。</li>
<li>Promise只能被决议(完成或者拒绝)一次。之后再次试图完成或拒绝的动作都会被忽略。因此，一旦Promise被决议，它就是不变量，不会发生改变。</li>
<li><strong>构造和使用Promise</strong>：<ul>
<li>可以通过构造器<code>Promise(..)</code>构造<code>promise</code>实例:<code>var p = new Promise( function(resolve,reject)&#123; // .. &#125; );</code><ul>
<li>如果调用<code>reject(..)</code>，这个promise被拒绝，如果有任何值传给<code>reject(..)</code>，这个值就被设置为拒绝的原因值。</li>
<li>如果调用<code>resolve(..)</code>且没有值传入，或者传入任何非promise值，这个promise就完成。</li>
<li>如果调用<code>resove(..)</code>并传入另外一个promise，这个promise就会采用传入的 promise的状态(要么实现要么拒绝)——不管是立即还是最终。</li>
</ul>
</li>
<li>Promise有一个<code>then(..)</code>方法，接受一个或两个回调函数作为参数。<ul>
<li>前面的函数(如果存在的话)会作为promise成功完成后的处理函数。</li>
<li>第二个函数(如果存在的话)会作为promise被显式拒绝后的处理函数，或者在决议过程中出现错误&#x2F;异常的情况下的处理函数。</li>
<li>如果某个参数被省略，或者不是一个有效的函数——通常是null，那么一个默认替代函数就会被采用。默认的成功回调把完成值传出，默认的出错回调会传递拒绝原因值。</li>
</ul>
</li>
<li><code>then(..)</code>和<code>catch(..)</code>都会自动构造并返回另外一个promise实例，这个实例连接到接受原来的promise的不管是完成或拒绝处理函数(实际调用的那个)的返回值。</li>
<li>第一个<code>fulfilled(..)</code>内部的异常(即被拒绝的promise)不会导致第一个 <code>rejected(..)</code>被调用，因为这个处理函数只响应第一个原始promise的决议。而第二个promise会接受这个拒绝，这个promise是在第二个<code>then(..)</code>上调用的。</li>
</ul>
</li>
<li><strong>Thenable</strong>：<ul>
<li>任何提供了<code>then(..)</code>函数的对象(或函数)都被认为是thenable。Promise机制中所有可以接受真正promise状态的地方，也都可以处理thenable。</li>
<li>从根本上说，thenable就是所有类promise值的一个通用标签，这些类promise不是被真正的<code>Promise(..)</code>构造器而是被其他系统创造出来。从这个角度来说，通常thenable的可靠性要低于真正的Promise。</li>
<li>在ES6之前，并没有对<code>then(..)</code>方法名称有任何特殊保留。最可能出现的误用thenable的情况是那些使用了<code>then(..)</code>方法，但是并没有严格遵循Promise风格的异步库，所以要避免把可能被误认为thenable的值直接用于Promise机制。</li>
</ul>
</li>
<li><strong>Promise API</strong>：<ul>
<li><code>Promise.resolve(..)</code>创建了一个决议到传入值的promise。对于任何还没有完全确定是可信promise的值，甚至它可能是立即值，都可以通过把它传给<code>Promise.resolve(..)</code>来规范化。</li>
<li><code>Promise.reject(..)</code>创建一个立即被拒绝的promise。它并不区分接收的值是什么。所以，如果传入promise或thenable来拒绝，这个promise&#x2F;thenable本身会被设置为拒绝原因，而不是其底层值。</li>
<li><code>Promise.all([ .. ])</code>接受一个或多个值的数组(比如，立即值、promise、thenable)。它返回一个promise，如果所有的值都完成，这个promise的结果是完成；一旦它们中的某一个被拒绝，那么这个promise就立即被拒绝。</li>
<li><code>Promise.race([ .. ])</code>等待第一个完成或者拒绝。</li>
<li><code>Promise.all([])</code>将会立即完成(没有完成值)，<code>Promise.race([])</code>将会永远挂起。建议永远不要用空数组使用这些方法。</li>
</ul>
</li>
</ul>
</li>
<li><strong>生成器 + Promise</strong>：Promise是一种把普通回调或者thunk控制反转反转回来的可靠系统。因此，把Promise的可信任性与生成器的同步代码组合在一起有效解决了回调所有的重要缺陷。</li>
</ul>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul>
<li><strong>TypedArray</strong>：<ul>
<li>带类型的数组更多是为了使用类数组语义(索引访问等)结构化访问二进制数据。名称中的“type(类型)”是指看待一组位序列的“视图”，本质上就是一个映射，比如是把这些位序列映射为8位有符号整型数组还是16位有符号整型数组，等等。</li>
<li>arr的映射是按照运行JavaScript的平台的大小端设置(大端或小端)进行的。大小端的意思是多字节数字中的低字节位于这个数字字节表示中的右侧还是左侧。目前Web上最常用的是小端表示方式。</li>
<li>单个buffer可以关联多个视图。可以从非0的位置开始带类型数组视图，也可以不消耗整个buffer长度。</li>
<li>带类数组构造器支持以下形式：<code>[constructor\](buffer,[offset, [length]])</code>、<code>[constructor\](length)</code>、<code>[constructor\](typedArr)</code>、<code>[constructor\](obj)</code>。</li>
<li>带类数组构造器的实例几乎和普通原生数组完全一样。一些区别包括具有固定的长度以及值都属于某种“类型”。ES6提供了下面这些带类数组构造器：<ul>
<li>Int8Array(8 位有符号整型)，Uint8Array(8 位无符号整型) ——Uint8ClampedArray(8 位无符号整型，每个值会被强制设置为在 0-255 内);</li>
<li>Int16Array(16 位有符号整型), Uint16Array(16 位无符号整型);</li>
<li>Int32Array(32 位有符号整型), Uint32Array(32 位无符号整型);</li>
<li>Float32Array(32 位浮点数，IEEE-754);</li>
<li>Float64Array(64 位浮点数，IEEE-754)。</li>
</ul>
</li>
</ul>
</li>
<li><strong>Map</strong>：<ul>
<li>Map就像是一个对象(键&#x2F;值对)，但是键值并非只能为字符串，而是可以使用任何值，甚至是另一个对象或map。</li>
<li>map 的本质是允许你把某些额外的信息(值)关联到一个对象(键)上，而无需把这个信息放入对象本身。</li>
<li><code>var m = new Map()</code><ul>
<li>使用<code>get(..)</code>和<code>set(..)</code>方法从map中设置和获取值。<code>m.set( x, &quot;foo&quot; );</code>、<code>m.get( x );</code></li>
<li>使用<code>delete()</code>方法从map中删除一个元素。<code>m.delete( x );</code></li>
<li>通过<code>clear()</code>清除整个map的内容。<code>m.clear();</code></li>
<li>使用<code>size</code>属性得到map的长度(也就是键的个数)。<code>m.size;</code></li>
<li>使用<code>has(..)</code>方法确定一个map中是否有给定的键。<code>m.has( x )</code></li>
<li>使用<code>values(..)</code>从map中得到一列值。<code>m.values()</code></li>
<li>使用<code>keys(..)</code>从map中得到一列键，会返回map中键上的迭代器。<code>m.keys()</code></li>
</ul>
</li>
<li><code>Map(..)</code>构造器也可以接受一个iterable，这个迭代器必须产生一列数组，每个数组的第一个元素是键，第二个元素是值。</li>
<li>也可以在<code>Map(..)</code>构造器中手动指定一个项目(entry)列表(键&#x2F;值数组的数组)</li>
</ul>
</li>
<li><strong>WeakMap</strong>：<ul>
<li>WeakMap是map的变体，二者的多数外部行为特性都是一样的，区别在于内部内存分配(特别是其GC)的工作方式。</li>
<li>WeakMap(只)接受对象作为键。这些对象是被弱持有的，也就是说如果对象本身被垃圾 回收的话，在 WeakMap 中的这个项目也会被移除。</li>
<li>WeakMap的API是类似的，要比map更少一些。WeakMap没有<code>size</code>属性或<code>clear()</code>方法，也不会暴露任何键、值或项目上的迭代器。</li>
</ul>
</li>
<li><strong>Set</strong>：<ul>
<li>Set与数组(值的序列)类似，是一个值的集合，但是其中的值是唯一的；set的唯一性不允许强制转换，如果新增的值是重复的，就会被忽略。</li>
<li>set的API和map类似。只是<code>add(..)</code>方法代替了<code>set(..)</code>方法(某种程度上说有点讽刺)，没有<code>get(..)</code>方法，因为不会从集合中取一个值。</li>
<li><code>Set(..)</code>构造器形式和<code>Map(..)</code>类似，都可以接受一个iterable，比如另外一个<code>set</code>或者仅仅是一个值的数组。但是和<code>Map(..)</code>接受项目(entry)列表(键&#x2F;值数组的数组)不同，<code>Set(..)</code>接受的是值(value)列表(值的数组)。</li>
<li>set的迭代器方法和map一样。对于set来说，二者行为特性不同，但它和map迭代器的行为是对称的。<code>keys()</code>和<code>values()</code>迭代器都从set中<code>yield</code>出一列不重复的值。</li>
</ul>
</li>
<li><strong>WeakSet</strong>：就像WeakMap弱持有它的键(对其值是强持有的)一样，WeakSet对其值也是弱持有的(这里并没有键)。WeakSet的值必须是对象，而并不像set一样可以是原生类型值。</li>
</ul>
<h3 id="新增API"><a href="#新增API" class="headerlink" title="新增API"></a>新增API</h3><ul>
<li><strong>Array</strong>：<ul>
<li>**静态函数 Array.of(..)**：<ul>
<li><code>Array(..)</code>构造器有一个众所周知的陷阱，就是如果只传入一个数字参数，就会构造一个空数组，其length属性为这个数字，这个动作会产生诡异的“空槽”行为。</li>
<li><code>Array.of(..)</code>取代了<code>Array(..)</code>成为数组的推荐函数形式构造器，因为<code>Array.of(..)</code>并没有这个特殊的单个数字参数的问题。</li>
</ul>
</li>
<li>**静态函数 Array.from(..)**：<ul>
<li>JavaScript中的“类(似)数组对象”是指一个有length属性，具体说是大于等于0的整数值的对象。新的ES6<code>Array.from(..)</code>可以把它们转换为真正的数组。</li>
<li>如果把类数组对象作为第一个参数传给<code>Array.from(..)</code>，它的行为方式和<code>slice()</code>(没有参数)或者<code>apply(..)</code>是一样的，就是简单地按照数字命名的属性从0开始直到length值在这些值上循环。</li>
<li><code>Array.from(..)</code>第二个参数是一个映射回调(和一般的<code>Array#map(..)</code>所期望的几乎一样)，如果设置了的话，这个函数会被调用，来把来自于源的每个值映射&#x2F;转换到返回值。</li>
<li><code>Array.from(..)</code>接收一个可选的第三个参数，如果设置了的话，这个参数为作为第二个参数传入的回调指定this绑定。否则，this将会是undefined。</li>
</ul>
</li>
<li><strong>创建数组和子类型</strong>：<code>of(..)</code>和<code>from(..)</code>都使用访问它们的构造器来构造数组。所以如果使用基类<code>Array.of(..)</code>，那么得到的就是Array实例；如果使用<code>MyCoolArray.of(..)</code>，那么得到的就是<code>MyCoolArray</code>实例。</li>
<li>**原型方法 copyWithin(..)**：<ul>
<li>是一个新的修改器方法，所有数组都支持。<code>copyWithin(..)</code>从一个数组中复制一部分到同一个数组的另一个位置，覆盖这个位置所有原来的值。</li>
<li>参数是target(要复制到的索引)、start(开始复制的源索引，包括在内)以及可选的end(复制结束的不包含索引)。如果任何一个参数是负数，就被当作是相对于数组结束的相对值。</li>
<li><code>copyWithin(..)</code>方法不会增加数组的长度。到达数组结尾复制就会停止。</li>
</ul>
</li>
<li>**原型方法 fill(..)**：用指定值完全(或部分)填充已存在的数组。<code>fill(..)</code>可选地接收参数<code>start</code>和<code>end</code>，它们指定了数组要填充的子集位置。</li>
<li>**原型方法 find(..)**：<ul>
<li>在数组中搜索一个值的最常用方法一直是<code>indexOf(..)</code>方法，这个方法返回找到值的索引，如果没有找到就返回<code>-1</code>。相比之下，<code>indexOf(..)</code>需要严格匹配<code>===</code>。</li>
<li>ES6的<code>find(..)</code>基本上和<code>some(..)</code>的工作方式一样，除了一旦回调返回true&#x2F;真值，会返回实际的数组值。</li>
<li><code>find(..)</code>接受一个可选的第二个参数，如果设定这个参数就绑定到第一个参数回调的this。否则this就是undefined。</li>
</ul>
</li>
<li>**原型方法 findIndex(..)**：返回传入一个测试条件（函数）符合条件的数组第一个元素位置。如果需要严格匹配的索引值，那么使用<code>indexOf(..)</code>;如果需要自定义匹配的索引值，那么使用<code>findIndex(..)</code>。</li>
<li>**原型方法 entries()、values()、keys()**：<ul>
<li><code>entries()</code>方法返回一个数组的迭代对象，该对象包含数组的键值对 (key&#x2F;value)。</li>
<li><code>values()</code>方法返回一个新的Array Iterator对象，该对象包含数组每个索引的值。</li>
<li><code>keys()</code>方法用于从数组创建一个包含数组键的可迭代对象。</li>
</ul>
</li>
</ul>
</li>
<li><strong>Object</strong>：<ul>
<li>**静态函数 Object.is(..)**：执行比<code>===</code>比较更严格的值比较。</li>
<li>**静态函数 Object.getOwnPropertySymbols(..)**：它直接从对象上取得所有的符号属性。</li>
<li>**静态函数 Object.setPrototypeOf(..)**：设置对象的<code>[[Prototype]]</code>用于行为委托。</li>
<li>**静态函数 Object.assign(..)**：第一个参数是<code>target</code>，其他传入的参数都是源，它们将按照列出的顺序依次被处理。对于每个源来说，它的可枚举和自己拥有的(也就是不是“继承来的”)键值，包括符号都会通过简单<code>=</code>赋值被复制。<code>Object.assign(..)</code>返回目标对象。</li>
</ul>
</li>
<li><strong>Math</strong>：<ul>
<li><strong>三角函数</strong>：<code>cosh(..)</code>双曲余弦函数、<code>acosh(..)</code>双曲反余弦函数、<code>sinh(..)</code>双曲正弦函数、<code>asinh(..)</code>双曲反正弦函数、<code>tanh(..)</code>双曲正切函数、<code>atanh(..)</code>双曲反正切函数、<code>hypot(..)</code>平方和的平方根(也即:广义勾股定理)。</li>
<li><strong>算术</strong>：<code>cbrt(..)</code>立方根、<code>clz32(..)</code>计算 32 位二进制表示的前导0个数、<code>expm1(..)</code>等价于<code>exp(x) - 1</code>、<code>log2(..)</code>二进制对数(以 2 为底的对数)、<code>log10(..)</code>以10为底的对数、<code>log1p(..)</code>等价于 <code>log(x + 1)</code>、<code>imul(..)</code>两个数字的32位整数乘法</li>
<li><strong>元工具</strong>：<code>sign(..)</code>返回数字符号、<code>trunc(..)</code>返回数字的整数部分、<code>fround(..)</code>向最接近的 32 位(单精度)浮点值取整</li>
</ul>
</li>
<li><strong>Number</strong>：<ul>
<li><strong>静态属性</strong>：<ul>
<li><code>Number.EPSILON</code>：任意两个值之间的最小差（2^-52），也是浮点数算法的精度误差值。</li>
<li><code>Number.MAX_SAFE_INTEGER</code>：JavaScript可以用数字值无歧义“安全”表达的最大整数（2^53 - 1）</li>
<li><code>Number.MIN_SAFE_INTEGER</code>：JavaScript可以用数字值无歧义“安全”表达的最小整数（-(2^53 - 1) 或 (-2)^53 + 1）</li>
</ul>
</li>
<li>**静态函数 Number.isNaN(..)**：确定传递的值是否为<code>NaN</code>，并且检查其类型是否为Number，是原来的全局<code>isNaN()</code>的更稳妥的版本。</li>
<li>**静态函数 Number.isFinite(..)**：用来检测传入的参数是否是一个有穷数。和全局的<code>isFinite()</code>函数相比，这个方法不会强制将一个非数值的参数转换成数值，这就意味着，只有数值类型的值，且是有穷的（finite），才返回<code>true</code>。</li>
<li><strong>整型相关静态函数</strong>：<ul>
<li><code>Number.isInteger(..)</code>：JavaScript 的数字值永远都是浮点数，这个方法可以用来判断给定的参数是否为整数。</li>
<li><code>Number.isSafeInteger(..)</code>：用来判断传入的参数值是否是一个“安全整数”，检查一个值以确保其为整数并且在<code>Number.MIN_SAFE_INTEGER</code>-<code>Number.MAX_SAFE_INTEGER</code>范围之内(全包含)</li>
</ul>
</li>
</ul>
</li>
<li><strong>字符串</strong>：<ul>
<li><strong>Unicode函数</strong>：字符串原型方法<code>normalize(..)</code>用于执行Unicode规范化，或者把字符用“合并符”连接起来或者把合并的字符解开。</li>
<li>**静态函数 String.raw(..)**：内置标签函数提供，与模板字符串字面值一起使用，用于获得不应用任何转义序列的原始字符串。</li>
<li>**原型函数 repeat(..)**：构造并返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本。</li>
<li><strong>字符串检查函数</strong>：新增了3个用于搜索&#x2F;检查的新方法，<code>startsWith(..)</code>、<code>endsWidth(..)</code>和<code>includes(..)</code>。</li>
</ul>
</li>
</ul>
<h3 id="元编程"><a href="#元编程" class="headerlink" title="元编程"></a>元编程</h3><ul>
<li>元编程是指操作目标是程序本身的行为特性的编程。换句话说，它是对程序的编程的编程。</li>
<li>元编程关注以下一点或几点:代码查看自身、代码修改自身、代码修改默认语言特性，以此影响其他代码。</li>
<li>元编程的目标是利用语言自身的内省能力使代码的其余部分更具描述性、表达性和灵活性。</li>
<li><strong>函数名称</strong>：默认情况下函数的词法名称(如果有的话)会被设为它的name属性。默认情况下，name属性不可写，但可配置，也就是说如果需要的话，可使用<code>Object.defineProperty(..)</code>来手动修改。</li>
<li><strong>元属性</strong>：元属性以属性访问的形式提供特殊的其他方法无法获取的元信息。</li>
<li><strong>公开符号</strong>：定义这些内置符号主要是为了提供专门的元属性，以便把这些元属性暴露给JavaScript程序以获取对JavaScript行为更多的控制。<ul>
<li><code>Symbol.iterator</code>：表示任意对象上的一个专门位置(属性)，语言机制自动在这个位置上寻找一个方法，这个方法构造一个迭代器来消耗这个对象的值。</li>
<li><code>Symbol.toStringTag</code>：原型（或实例本身）的<code>@@toStringTag</code>符号指定了再<code>[object___]</code>字符串化时使用的字符串值。</li>
<li><code>Symbol.hasInstance</code>：<code>@@hasInstance</code>符号是在构造器函数上的一个方法，接受实例对象值，通过返回true或false来指示这个值是否可以被认为是一个实例。</li>
<li><code>Symbol.species</code>：控制要生成新实例时，类的内置方法使用哪一个构造器。</li>
<li><code>Symbol.toPrimitive</code>：在任意对象值上作为属性的符号<code>@@toPrimitivesymbol</code>都可以通过指定一个方法来定制这个ToPrimitive强制转换。</li>
<li><strong>正则表达式符号</strong>：对于正则表达式对象，有4个公开符号可以被覆盖，它们控制着这些正则表达式在4个对应的同名<code>String.prototype</code>函数中如何被使用。<ul>
<li><code>@@match</code>：正则表达式的<code>Symbol.match</code>值是一个用于利用给定的正则表达式匹配一个字符串值的部分或全部内容的方法。如果传给<code>String.prototype.match(..)</code>一个正则表达式，那么用它来进行模式匹配。</li>
<li><code>@@replace</code>：正则表达式的<code>Symbol.replace</code>值是一个方法，<code>String.prototype.replace(..)</code>用它来替换一个字符串内匹配给定的正则表达式模式的一个或多个字符序列。</li>
<li><code>@@search</code>：正则表达式的<code>Symbol.search</code>值是一个方法，<code>String.prototype.search(..)</code>用它来在另一个字符串中搜索一个匹配给定正则表达式的子串。</li>
<li><code>@@split</code>：正则表达式的<code>Symbol.split</code>值是一个方法，<code>String.prototype.split(..)</code>用它把字符串在匹配给定正则表达式的分隔符处分割为子串。</li>
</ul>
</li>
<li><code>Symbol.isConcatSpreadable</code>：<code>@@isConcatSpreadable</code>可以被定义为任意对象(比如数组或其他可迭代对象)的布尔型属性(<code>Symbol.isConcatSpreadable</code>)，用来指示如果把它传给一个数组的<code>concat(..)</code>是否应该将其展开。</li>
<li><code>Symbol.unscopables</code>：符号<code>@@unscopables</code>可以被定义为任意对象的对象属性(<code>Symbol.unscopables</code>)，用来指示使用<code>with</code>语句时哪些属性可以或不可以暴露为词法变量。</li>
</ul>
</li>
<li><strong>Proxy代理</strong>：<ul>
<li>ES6中新增的最明显的元编程特性之一是Proxy(代理)特性。</li>
<li>代理是一种由你创建的特殊的对象，它“封装”另一个普通对象——或者说挡在这个普通对象的前面。你可以在代理对象上注册特殊的处理函数(也就是 trap)，代理上执行各种操作的时候会调用这个程序。这些处理函数除了把操作转发给原始目标&#x2F;被封装对象之外，还有机会执行额外的逻辑。</li>
<li>下面所列出的是在目标对象&#x2F;函数代理上可以定义的处理函数，以及它们如何 &#x2F; 何时被触发：<ul>
<li><code>get(..)</code>：通过[[Get]]，在代理上访问一个属性(Reflect.get(..)、.属性运算符或[ .. ]属性运算符)。</li>
<li><code>set(..)</code>：通过[[Set]]，在代理上设置一个属性值(Reflect.set(..)、赋值运算符 &#x3D; 或目标为对象属性的解构赋值)。</li>
<li><code>deleteProperty(..)</code>：通过 [[Delete]]，从代理对象上删除一个属性(Reflect.deleteProperty(..) 或 delete)。</li>
<li><code>apply(..)</code>(如果目标为函数)：通过[[Call]]，将代理作为普通函数&#x2F;方法调用(Reflect.apply(..)、call(..)、 apply(..) 或 (..) 调用运算符)。</li>
<li><code>construct(..)</code>(如果目标为构造函数)：通过 [[Construct]]，将代理作为构造函数调用(Reflect.construct(..) 或 new)。</li>
<li><code>getOwnPropertyDescriptor(..)</code>：通过 [[GetOwnProperty]]，从代理中提取一个属性描述符(Object.getOwnPropertyDescriptor(..) 或 Reflect.getOwnPropertyDescriptor(..))。</li>
<li><code>defineProperty(..)</code>：通过 [[DefineOwnProperty]]，在代理上设置一个属性描述符(Object.defineProperty(..) 或 Reflect.defineProperty(..))。</li>
<li><code>getPrototypeOf(..)</code>：通过 [[GetPrototypeOf]]， 得 到 代 理 的 <a href="Object.getPrototypeOf(..">[Prototype]</a>、 Reflect.getPrototypeOf(..)、__proto__、Object#isPrototypeOf(..) 或 instanceof)。</li>
<li><code>setPrototypeOf(..)</code>：通 过 [[SetPrototypeOf]]， 设 置 代 理 的 <a href="Object.setPrototypeOf(..">[Prototype]</a>、 Reflect.setPrototypeOf(..) 或 <strong>proto</strong>)。</li>
<li><code>preventExtensions(..)</code>：通过 [[PreventExtensions]]，使得代理变成不可扩展的(Object.prevent Extensions(..) 或 Reflect.preventExtensions(..))。</li>
<li><code>isExtensible(..)</code>：通过 [[IsExtensible]]，检测代理是否可扩展(Object.isExtensible(..) 或 Reflect. isExtensible(..))。</li>
<li><code>ownKeys(..)</code>：通过 [[OwnPropertyKeys]]，提取代理自己的属性和 &#x2F; 或符号属性(Object.keys(..)、 Object.getOwnPropertyNames(..)、Object.getOwnSymbolProperties(..)、Reflect. ownKeys(..) 或 JSON.stringify(..))。</li>
<li><code>enumerate(..)</code>：通过 [[Enumerate]]，取得代理拥有的和“继承来的”可枚举属性的迭代器(Reflect. enumerate(..) 或 for..in)。</li>
<li><code>has(..)</code>：通过 [[HasProperty]]，检查代理是否拥有或者“继承了”某个属性(Reflect.has(..)、 Object#hasOwnProperty(..) 或 “prop” in obj)。</li>
</ul>
</li>
<li><strong>代理局限性</strong>：可以在对象上执行的很广泛的一组基本操作都可以通过这些元编程处理函数trap。但有一些操作是无法(至少现在)拦截的。</li>
<li><strong>可取消代理</strong>：可取消代理用<code>Proxy.revocable(..)</code>创建，这是一个普通函数，而不像<code>Proxy(..)</code>一样是构造器。除此之外，它接收同样的两个参数：<code>target</code>和<code>handlers</code>，<code>Proxy.revocable(..)</code>的返回值不是代理本身，而是一个有两个属性（proxy和revode）的对象。一旦可取消代理被取消，任何对它的访问(触发它的任意 trap)都会抛出TypeError。</li>
<li><strong>使用代理</strong>：<ul>
<li>通常可以把代理看作是对目标对象的“包装”。在这种意义上，代理成为了代码交互的主要对象，而实际目标对象保持隐藏&#x2F;被保护的状态。</li>
<li><strong>代理在先</strong>：首先(主要、完全)与代理交互的模式，让代理与目标交流，称为代理在先设计。</li>
<li><strong>代理在后</strong>：让目标与代理交流，代码只能与主对象交互，代理只作为最后的保障的模式，称为代理在后设计。这个回退方式的最简单实现就是把 proxy 对象放到主对象的<code>[[Prototype]]</code>链中。</li>
<li>**”No Such Property&#x2F;Method”**：这里的代理在后设计更简单一些。如果<code>[[Get]]</code>或<code>[[Set]]</code>进入我们的<code>pobj</code>回退，此时这个动作已经遍历了整个<code>[[Prototype]]</code>链并且没有发现匹配的属性。这时我们可以自由抛出错误。</li>
<li><strong>代理hack[[Prototype]]链</strong>：<code>[[Prototype]]</code>机制运作的主要通道是<code>[[Get]]</code>运算。当直接对象中没有找到一个属性的时候，<code>[[Get]]</code>会自动把这个运算转给<code>[[Prototype]]</code>对象处理。这意味着可以使用代理的get(..)trap来模拟或扩展这个<code>[[Prototype]]</code>机制的概念。</li>
</ul>
</li>
</ul>
</li>
<li><strong>Reflect API</strong>：<ul>
<li>Reflect对象是一个平凡对象(就像Math)，不像其他内置原生值一样是函数&#x2F;构造器。它持有对应于各种可控的元编程任务的静态函数。这些函数一对一对应着代理可以定义的处理函数方法(trap)。</li>
<li>这些函数中的一部分看起来和Object上的同名函数类似，一般来说这些工具和<code>Object.*</code>的对应工具行为方式类似。但是有一个区别是如果第一个参数(目标对象)不是对象的话，Object.* 相应工具会试图把它类型转换为一个对象。而这种情况下<code>Reflect.*</code>方法只会抛出一个错误。</li>
<li>可以使用下面这些工具访问&#x2F;查看一个对象键：<ul>
<li><code>Reflect.ownKeys(..)</code>：返回所有“拥有”的(不是“继承”的)键的列表。</li>
<li><code>Reflect.enumerate(..)</code>：返回一个产生所有(拥有的和“继承的”)可枚举的(enumerable)非符号键集合的迭代器。</li>
<li><code>Reflect.has(..)</code>：实质上和in运算符一样，用于检查某个属性是否在某个对象上或者在它的<code>[[Prototype]]</code>链上。</li>
</ul>
</li>
<li>函数调用和构造器调用可以通过使用下面这些工具手动执行，与普通的语法(比如，<code>(..)</code>和<code>new</code>)分开：<ul>
<li><code>Reflect.apply(..)</code>：举例来说，<code>Reflect.apply(foo,thisObj,[42,&quot;bar&quot;])</code>以<code>thisObj</code>作为<code>this</code>调用<code>foo(..)</code>函数，传入参数<code>42</code>和<code>&quot;bar&quot;</code>。</li>
<li><code>Reflect.construct(..)</code>：举例来说，<code>Reflect.construct(foo,[42,&quot;bar&quot;])</code>实质上就是调用<code>new foo(42,&quot;bar&quot;)</code>。</li>
</ul>
</li>
<li>可以使用下面这些工具来手动执行对象属性访问、设置和删除：<ul>
<li><code>Reflect.get(..)</code>举例来说，<code>Reflect.get(o,&quot;foo&quot;)</code>提取 <code>o.foo</code>。</li>
<li><code>Reflect.set(..)</code>：举例来说，<code>Reflect.set(o,&quot;foo&quot;,42)</code>实质上就是执行<code>o.foo = 42</code>。</li>
<li><code>Reflect.deleteProperty(..)</code>：举例来说，<code>Reflect.deleteProperty(o,&quot;foo&quot;)</code>实质上就是执行 <code>delete o.foo</code>。</li>
</ul>
</li>
<li>Reflect的元编程能力提供了模拟各种语法特性的编程等价物，把之前隐藏的抽象操作暴露出来。比如，你可以利用这些能力扩展功能和API，以实现领域特定语言(DSL)。</li>
<li><strong>属性排序</strong>：<ul>
<li>对于ES6来说，拥有属性的列出顺序是由<code>[[OwnPropertyKeys]]</code>算法定义的，这个算法产生所有拥有的属性(字符串或符号)，不管是否可枚举。对于ES6来说，<code>Reflect.ownKeys(..)</code>、<code>Object.getOwnPropertyNames(..)</code>和<code>Object.getOwnPropertySymbols(..)</code>的顺序都是可预测且可靠的，这由规范保证：<ul>
<li>(1) 首先，按照数字上升排序，枚举所有整数索引拥有的属性;</li>
<li>(2) 然后，按照创建顺序枚举其余的拥有的字符串属性名;</li>
<li>(3) 最后，按照创建顺序枚举拥有的符号属性。</li>
</ul>
</li>
<li><code>[[Enumerate]]</code>算法只从目标对象和它的<code>[[Prototype]]</code>链产生可枚举属性。它用于<code>Reflect.enumerate(..)</code>和<code>for..in</code>。可以观察到的顺序和具体的实现相关，不由规范控制。</li>
<li><code>Reflect.enumerate(..)</code>、<code>Object.keys(..)</code>、<code>for..in</code>和<code>JSON.stringify(..)</code>这4种机制都会匹配同样的与具体实现相关的排序，尽管严格上说是通过不同的路径。</li>
</ul>
</li>
</ul>
</li>
<li><strong>特性测试</strong>：<ul>
<li>特性测试就是一种由你运行的用来判断一个特性是否可用的测试。</li>
<li>测试程序的运行环境，然后确定程序行为方式，这是一种元编程技术。</li>
<li>JavaScript中最常用的特性测试是检查一个API是否存在，如果不存在的话，定义一个polyfill。</li>
<li>如果在你的 JavaScript 应用程序的引导程序(bootstrapper)中有一组这样的特性测试，就可以通过测试环境来确定你的ES6代码是能够直接加载运行，还是需要加载代码的transpile版本，这种技术叫作分批发布。</li>
</ul>
</li>
<li><strong>尾递归调用（TCO）</strong>：<ul>
<li>通常，在一个函数内部调用另一个函数的时候，会分配第二个栈帧来独立管理第二个函数调用的变量&#x2F;状态。这个分配不但消耗处理时间，也消耗了额外的内存。</li>
<li>有一些称为尾调用的函数调用模式，可以以避免额外栈帧分配的方式进行优化。</li>
<li>尾调用是一个return函数调用的语句，除了调用后返回其返回值之外没有任何其他动作。这个优化只在strict模式下应用。</li>
<li>trampolining：相当于把每个部分结果用一个函数表示，这些函数或者返回另外一个部分结果函数，或者返回最终结果。然后就只需要循环直到得到的结果不是函数，得到的就是最终结果。</li>
<li>如果真的需要深度优化(不需考虑可复用性)，那么可以丢弃闭包状态，用一个循环把acc信息的状态追踪在线化放在一个函数作用域内。这种技术一般称为递归展开。</li>
</ul>
</li>
</ul>
<h3 id="ES6之后"><a href="#ES6之后" class="headerlink" title="ES6之后"></a>ES6之后</h3><ul>
<li><strong>异步函数</strong>：<code>async function</code>本质上就是生成器+promise+run(..)模式的语法糖，它们底层的运作方式是一样的。</li>
<li>**Object.observe(..)**：<ul>
<li>可以通过工具<code>Object.observe(..)</code>建立一个侦听者(listener)来观察对象的改变，然后在每次变化发生时调用一个回调。</li>
<li>支持观察add、update、delete、reconfigure、setPrototype、preventExtensions这六种内置改变事件，也可以侦听和发出自定义改变事件。默认情况下，你可以得到所有这些类型的变化的通知，也可以进行过滤只侦听关注的类型。</li>
<li>可以通过<code>Object.unobserve(..)</code>来停止观测一个对象的改变事件。</li>
</ul>
</li>
<li><strong>幂运算符</strong>：用于执行幂运算的运算符——<code>**</code>。</li>
<li>**Array#includes(..)**：在值数组中搜索一个值。<code>Array#includes(..)</code>使用的匹配逻辑能够找到NaN值，但是无法区分-0 和0。</li>
</ul>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>《JavaScript设计模式与开发实践》笔记</title>
    <url>/book-patterns/</url>
    <content><![CDATA[<p>本文是我阅读<a href="https://book.douban.com/subject/26382780/">《JavaScript设计模式与开发实践》</a>过程中记录下来的笔记。之前以为设计模式是要到架构师那个境界才能真正用到的，看了这本书才发现，原来我们平时就一直在接触设计模式，自己也在无意识地用到了这些设计模式。理解了这些设计模式后，对日后的编码思路和代码优化也有很大的帮助，其中<a href="/book-patterns/#%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F">原型模式</a>、<a href="/book-patterns/#%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F">策略模式</a>、<a href="/book-patterns/#%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%89">发布-订阅模式</a>给我的印象是最深刻的。</p>
<span id="more"></span>

<h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><ul>
<li>JavaScript是一门基于原型的面向对象语言，它的对象系统是使用原型模式搭建的，没有类的概念，将函数作为一等对象。</li>
<li>很多设计模式都是通过闭包和高阶函数实现的；编写函数式语言风格的代码，离不开call和apply。</li>
<li>所有设计模式的实现都遵循一条原则：找出程序中变化的部分，并将变化封装起来，注重提高可复用和可维护性，保证代码的高内聚低耦合。</li>
<li>很多模式的类图和结构看起来几乎没有区别，例如代理模式和装饰者模式、策略模式和智能命令模式等。虽然看起来差不多，但是它们之间的意图和设计目的是不同的。</li>
<li>我们不能刻意的去套用设计模式，而是在理解了那些优秀的设计模式后，很自然地将那些模式融入到代码中。</li>
</ul>
<h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><ul>
<li><strong>设计模式</strong>：在面向对象软件设计过程中针对特定问题的简洁而优雅的解决方案。</li>
<li><strong>动态类型语言</strong>：单至类型上的定义，变量类型在运行时才会确定。</li>
<li>**面向对象编程(OOP)**：本质是以建立模型体现出来的抽象思维过程和面向对象的方法。以类为中心，抽象、封装、继承和多态是面向对象的基础。</li>
<li><strong>抽象</strong>：提取现实世界中某事物的关键特性，为该事物构建模型的过程。得到的抽象模型(包含属性、操作)称之为类。</li>
<li><strong>封装</strong>：使类具有独立性和隔离性，保证类的高内聚。只暴露给类外部或者子类必须的属性和操作。</li>
<li><strong>继承</strong>：对现有类的一种复用机制。一个类如果继承现有的类，则这个类将拥有被继承类的所有非私有特性（属性和操作）。</li>
<li><strong>多态</strong>：同一操作作用于不同对象上，可产生不同的解释和不同的执行结果。通常使用继承来得到多态效果。</li>
<li><strong>鸭子类型</strong>：只关注对象行为，不关注对象本身。</li>
<li>**单一职责原则(SRP)**：一个对象（方法）只做一件事。（低耦合）</li>
<li><strong>最少知识原则(LKP)&#x2F;迪米特法则</strong>：一个软件实体（类、模块、函数等）应当尽可能少地与其他实体发生相互作用。（对象之间减少交互）</li>
<li><strong>开放-封闭原则</strong>：软件实体应该是可以扩展的，但是不可修改。</li>
</ul>
<h3 id="this、call和apply"><a href="#this、call和apply" class="headerlink" title="this、call和apply"></a>this、call和apply</h3><ul>
<li>this是执行上下文环境的一个属性，而不是某个变量对象的属性，总是指向一个对象。</li>
<li>call和apply能很好地体现JavaScript函数式的语言特性。<ul>
<li>最常见的用途是改变函数内部的this指向。</li>
<li>apply是Function.prototype.bind的实现核心。</li>
<li>借用其他对象的方法，扩充函数赖以运行的作用域，可以借此实现多重继承</li>
</ul>
</li>
</ul>
<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>高阶函数式指至少满足下列条件之一的函数：</p>
<ul>
<li>函数可以作为参数被传递，如回调、节流、分时函数。</li>
<li>函数可以作为返回值输出，如柯里化(部分求值)函数</li>
</ul>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><ul>
<li><strong>定义</strong>：指有权访问另一个函数作用域中变量的函数。   </li>
<li><strong>常见方式</strong>：函数内创建内部函数，外部通过内部函数访问此函数的局部变量。  </li>
<li><strong>作用</strong>：<ul>
<li>突破作用链域，将函数内部的变量和方法传递到外部。</li>
<li>延续局部变量的生存周期，防止被垃圾回收机制清除。</li>
</ul>
</li>
<li><strong>应用</strong>：<ul>
<li>将不需要暴露在全局的变量封装成“私有变量”；</li>
<li>缓存功能，减少重复计算或防止数据丢失；</li>
</ul>
</li>
</ul>
<h2 id="常用的设计模式"><a href="#常用的设计模式" class="headerlink" title="常用的设计模式"></a>常用的设计模式</h2><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a><div style="color:#a88773">创建型模式</div></h3><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><ul>
<li><strong>定义</strong>：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</li>
<li><strong>要点</strong>：是一种对象创建型模式，实现关键是语言本身是否提供了clone方法。</li>
<li><strong>基本规则</strong>：<ul>
<li>所有数据都是对象。</li>
<li>要得到一个对象，不是通过实例化类，而是找到一个对象作为原型并克隆它。</li>
<li>对象会记住它的原型。</li>
<li>如果对象无法响应某个请求，它会把这个请求委托给它自己的原型。</li>
</ul>
</li>
<li><strong>意义</strong>：不单是一种设计模式，也是一种编程泛型，它构成了JavaScript这门语言的根本。</li>
<li><strong>场景</strong>：在初始化信息不发生变化的情况，用克隆进行拷贝。</li>
</ul>
<h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><ul>
<li><strong>定义</strong>：保证一个类仅有一个实例，并提供一个访问它的全局访问点。 </li>
<li><strong>要点</strong>：将创建对象和管理单例的职责分布在两个不同的方法中。</li>
<li><strong>意义</strong>：惰性单例模式是重点，指的是在需要的时候才创建唯一的对象实例，非常简单实用。</li>
<li><strong>场景</strong>：登录浮窗、全局缓存、window对象等。</li>
</ul>
<h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a><div style="color:#a88773">结构型模式</div></h3><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><ul>
<li><strong>定义</strong>：为对象提供一个代用品或占位符，以便控制对它的访问。</li>
<li><strong>要点</strong>：虚拟代理是最常用的，用一个类去访问原类的接口，进行额外的操作。</li>
<li><strong>意义</strong>：在客户看来，代理对象和本体是一致的（可通过鸭子类型来检测一致性），用户可以放心得在任何使用本体的地方替换成使用代理。</li>
<li><strong>场景</strong>：虚拟代理（将开销大的对象延迟到需要时再创建），如懒加载、合并请求；缓存代理（为开销大的运算结果提供临时存储）；保护代理（控制不同权限的对象对目标对象的访问）</li>
</ul>
<h4 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h4><ul>
<li><strong>定义</strong>：用小的子对象来构建更大的对象。</li>
<li><strong>要点</strong>：将对象合成树形结构，以表示“部分-整体”的层次结构。</li>
<li><strong>意义</strong>：通过对象的多态性表现，使得用户对单个对象和组合对象的使用具有一致性。</li>
<li><strong>场景</strong>：文件系统的增删改查等树形结构场景。</li>
</ul>
<h4 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h4><ul>
<li><strong>定义</strong>：运用共享技术有效的支持大量细粒度的对象。</li>
<li><strong>要点</strong>：将对象属性划分为内部状态与外部状态，剥离了外部状态的对象成为共享对象，在合适的时刻将外部状态组装进共享对象。</li>
<li><strong>意义</strong>：用于性能优化，用时间换空间，通过共享大幅度减少单个实例的数目。</li>
<li><strong>场景</strong>：上次创建的DOM节点共享给下次创建操作。</li>
</ul>
<h4 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h4><ul>
<li><strong>定义</strong>：在不改变对象自身的基础上，在程序运行期间给对象动态地添加职责，常常会形成一条装饰链。</li>
<li><strong>要点</strong>：将对象放入另一个对象中，这些对象以链的形式进行引用，形成一个聚合对象。请求沿着链依次传递到所有对象，每个对象执行完自身操作，再讲请求转发给下一个对象。</li>
<li><strong>意义</strong>：在框架开发中非常有用，个性化功能可在框架之外动态装饰上去。</li>
<li><strong>场景</strong>：统计函数执行时间、插件式表单验证等。</li>
</ul>
<h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4><ul>
<li><strong>定义</strong>：将一个类的接口转换成客户希望的另外一个接口。</li>
<li><strong>要点</strong>：不需要改变已有接口，只包装一次。</li>
<li><strong>意义</strong>：复用现存的类，客户端统一调用同一接口，更简单、直接、紧凑。</li>
<li><strong>场景</strong>：当系统的数据和行为都正确，但接口不符时。</li>
</ul>
<h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a><div style="color:#a88773">行为型模式</div></h3><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><ul>
<li><strong>定义</strong>：定义一系列算法，各自封装成策略类，对context发起请求时，context将请求委托给对应的策略类。</li>
<li><strong>要点</strong>：将算法的使用(环境类context)和算法的实现(策略类)分离开来。</li>
<li><strong>意义</strong>：策略模式是对象多态的完美体现，高阶函数就是一种隐式的策略模式。策略模式已经融入到了JS语言本身中。</li>
<li><strong>场景</strong>：游戏动效、验证表单等。</li>
</ul>
<h4 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h4><ul>
<li><strong>定义</strong>：提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。</li>
<li><strong>要点</strong>：循环访问聚合对象（包括数组和类数组对象）中的各个元素，但没有规定访问规则，即可使用顺序、倒序、中序等方式。</li>
<li><strong>意义</strong>：将迭代的过程从业务逻辑中分离出来，不用关心对象的内部构造。绝大部分语言都内置了迭代器。</li>
<li><strong>场景</strong>：内部迭代器（内部已定义好迭代规则，外部不需要关心迭代器内部实现，外部仅需一次初始调用）；外部迭代器（必须显示地请求迭代下一个元素，可手动控制迭代的过程或顺序）</li>
</ul>
<h4 id="发布-订阅模式（观察者模式）"><a href="#发布-订阅模式（观察者模式）" class="headerlink" title="发布-订阅模式（观察者模式）"></a>发布-订阅模式（观察者模式）</h4><ul>
<li><strong>定义</strong>：当一个对象的状态发生变化时，所有依赖于它的对象都将得到通知。</li>
<li><strong>要点</strong>：在JS中是用注册回调函数的形式来代替传统的发布订阅者模式。</li>
<li><strong>意义</strong>：发布订阅者模式可以实现对时间及对象间的解耦。从架构上看，MVC和MVVM都少不了发布订阅者模式，而且JS本身也是一门基于事件驱动的语言。</li>
<li><strong>场景</strong>：DOM节点上绑定事件函数；订阅ajax请求的error、succ等事件；模块之间的通信；</li>
</ul>
<h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><ul>
<li><strong>定义</strong>：将一个请求封装成一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及执行可撤销的操作。</li>
<li><strong>要点</strong>：客户(client)创建命令；调用者(invoking)执行该命令；接收者(receiving)在命令执行时执行相应操作。当命令对象可以直接实现请求时，就不再需要接受者的存在，这时的命令模式与策略模式非常相近，只有意图的不同。</li>
<li><strong>意义</strong>：旨在将函数的调用、请求和操作封装成一个单一的对象；解耦调用者与接收对象。</li>
<li><strong>场景</strong>：命令模式与策略模式一样融入了JS语言中。</li>
</ul>
<h4 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h4><ul>
<li><strong>定义</strong>：子类实现中的相同部分被上移到父类，将不同部分留待子类实现。</li>
<li><strong>要点</strong>：在抽象父类中封装好子类的算法框架和方法的执行顺序，再由子类继承抽象类。</li>
<li><strong>意义</strong>：基于继承的代码复用技术。</li>
<li><strong>场景</strong>：有重复行为的平行子类。</li>
</ul>
<h4 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h4><ul>
<li><strong>定义</strong>：一系列可能会处理请求的对象被连接成一条链，请求沿着链传递，直到有对象处理为止。</li>
<li><strong>要点</strong>：节点数量和顺序可以自由变化，在运行时也能决定链中包含哪些节点。</li>
<li><strong>意义</strong>：解耦了请求的发送者和多个接收者之间的关系。</li>
<li><strong>场景</strong>：作用域链、原型链、DOM节点的事件冒泡。</li>
</ul>
<h4 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h4><ul>
<li><strong>定义</strong>：用一个中介对象来封装一系列的对象交互。</li>
<li><strong>要点</strong>：所有相关对象之间的交互都交给中介者来实现和维护。</li>
<li><strong>意义</strong>：解除对象与对象之间的紧耦合关系。</li>
<li><strong>场景</strong>：form表单各项的实时校验。</li>
</ul>
<h4 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h4><ul>
<li><strong>定义</strong>：将对象的内部状态都封装成独立的类，请求会被委托给当前的状态对象。</li>
<li><strong>要点</strong>：不同状态下，对象像是从不同的类中实例化而来的。</li>
<li><strong>意义</strong>：状态模式是状态机的实现之一。</li>
<li><strong>场景</strong>：游戏人物状态切换等。</li>
</ul>
<h2 id="代码重构技巧"><a href="#代码重构技巧" class="headerlink" title="代码重构技巧"></a>代码重构技巧</h2><ol>
<li>提炼函数，包括重复代码、条件分支语句等情况</li>
<li>合理使用循环</li>
<li>使用return提前让函数退出</li>
<li>传递对象参数代替过程的参数列表</li>
<li>尽量减少参数数量</li>
<li>少用三目运算符（可读性差）</li>
<li>合理使用链式调用</li>
<li>分解大类型</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>《现代前端技术解析》笔记</title>
    <url>/book-technology/</url>
    <content><![CDATA[<p>本文是我阅读<a href="https://book.douban.com/subject/27021790/">《现代前端技术解析》</a>过程中记录下来的笔记。这是一本以现代前端技术思想与理论为主要内容的书，在前端知识体系上做了很好的总结和梳理，涵盖了现代前端技术绝大部分的知识内容，包括<a href="/book-technology/#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86">浏览器基础知识</a>、<a href="/book-technology/#%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3%E5%8D%8F%E8%AE%AE">前端相关协议</a>、<a href="/book-technology/#%E4%B8%89%E5%B1%82%E7%BB%93%E6%9E%84%E6%BC%94%E8%BF%9B%E4%B8%8E%E5%AE%9E%E8%B7%B5">三层结构演进与实践</a>、<a href="/book-technology/#%E5%89%8D%E7%AB%AF%E4%BA%A4%E4%BA%92%E6%A1%86%E6%9E%B6">前端交互框架</a>、<a href="/book-technology/#%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E4%B8%8E%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5">前端项目与技术实践</a>、<a href="/book-technology/#%E5%89%8D%E7%AB%AF%E8%B7%A8%E6%A0%88%E6%8A%80%E6%9C%AF">前端跨栈技术</a>等。</p>
<span id="more"></span>
<h2 id="浏览器基础知识"><a href="#浏览器基础知识" class="headerlink" title="浏览器基础知识"></a>浏览器基础知识</h2><h3 id="用户输入一个网址到页面展示内容的这段时间内，浏览器和服务器都发生了什么事情？"><a href="#用户输入一个网址到页面展示内容的这段时间内，浏览器和服务器都发生了什么事情？" class="headerlink" title="用户输入一个网址到页面展示内容的这段时间内，浏览器和服务器都发生了什么事情？"></a>用户输入一个网址到页面展示内容的这段时间内，浏览器和服务器都发生了什么事情？</h3><ul>
<li>在接收到用户输入的网址后，浏览器会开启一个线程来处理这个请求，对用户输入的URL地址进行分析判断，如果是HTTP协议就按照 HTTP方式来处理。</li>
<li>调用浏览器引擎中的对应方法，比如WebView中的loadUrl方法，分析并加载这个URL地址。</li>
<li>通过DNS解析获取该网站对应的IP地址，查询完成后联同浏览器的COOKIE、userAgent等信息向网站目的IP发出GET请求。</li>
<li>进行HTTP协议会话，浏览器客户端向Web服务器发送报文。</li>
<li>进入网站后台的Web服务器处理请求，如Apache、Tomcat、Node.js等服务器。</li>
<li>进入部署好的后端应用，如PHP、Java、Javascript、Python等后端程序，找到对应的请求处理逻辑，这期间可能会读取服务器缓存或查询数据库。</li>
<li>服务器处理请求并返回响应报文，此时如果浏览器访问过该页面，缓存上有对应的资源，会与服务器最后修改记录对比，一致则返回304，否则返回200和对应的内容。</li>
<li>浏览器开始下载HTML文档（响应报头状态码为200时）或者从本地缓存读取文件内容（浏览器缓存有效或响应报头状态码为304时）。</li>
<li>浏览器根据下载接收到的HTML文件解析结构建立DOM（Document Object Model，文档对象模型）文档树，并根据HTML中的标记请求下载指定的MIME类型文件（如CSS、Javascript脚本等），同时设置缓存等内容。</li>
<li>页面开始解析渲染DOM，CSS根据规则解析并结合DOM文档树进行网页内容布局和绘制渲染，Javascript提供DOM API操作 DOM,并读取浏览器缓存、执行事件绑定等，页面整个展示过程完成。</li>
</ul>
<h3 id="浏览器渲染引擎工作流程"><a href="#浏览器渲染引擎工作流程" class="headerlink" title="浏览器渲染引擎工作流程"></a>浏览器渲染引擎工作流程</h3><ul>
<li><strong>解析HTML构建DOM树</strong>：解析通过网络模块下载的HTML文件，将HTML元素标签解析成由多个DOM元素对象节点组成的具有节点父子关系的DOM树结构。</li>
<li>**构建渲染树(render tree)**：根据DOM树结构的每个节点顺序提取计算使用的CSS规则并重新计算DOM树结构的样式数据，生成一个带样式描述的DOM渲染树对象。</li>
<li><strong>渲染树的布局</strong>：根据每个渲染树节点在页面中大小和位置，将节点固定到页面的对应位置上。元素的布局属性生效，如position、float、margin等属性。</li>
<li><strong>绘制渲染树</strong>：将渲染树节点的背景、文本等样式信息应用到每个节点上。元素内部显示样式生效，如color、text-shadow等属性。</li>
</ul>
<h3 id="浏览器数据持久化存储技术"><a href="#浏览器数据持久化存储技术" class="headerlink" title="浏览器数据持久化存储技术"></a>浏览器数据持久化存储技术</h3><ul>
<li>http文件缓存：强缓存（200 from cache）与协商缓存（304）<ul>
<li>属于强缓存控制的：（http1.1）Cache-Control&#x2F;Max-Age、（http1.0）Pragma&#x2F;Expires</li>
<li>属于协商缓存控制的：（http1.1）If-None-Match&#x2F;E-tag、 （http1.0）If-Modified-Since&#x2F;Last-Modified</li>
</ul>
</li>
<li>本地存储小容量：Cookie、LocalStorage、SessionStorage。<ul>
<li>cookie：<ul>
<li>在设置的过期时间之前一直有效，即使窗口或浏览器关闭。</li>
<li>cookie数据不能超过4k，只适合保存很小的数据，且有个数限制（各浏览器不同），一般不能超过20个。</li>
<li>与服务器端通信，每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题。</li>
<li>在所有同源窗口中都是共享的。</li>
<li>缺点：需要程序员自己封装，源生的Cookie接口不友好；浪费宽带。</li>
<li>备注：被设置为HttpOnly的cookie不能被JS读取，保证了安全性。</li>
</ul>
</li>
<li>localStorage（本地存储）：<ul>
<li>数据有效期是永久，浏览器关闭后数据不丢失除非主动删除数据。</li>
<li>存放数据大小为一般为2MB到5MB不等，不同浏览器各不相同。</li>
<li>不参与和服务器的通信。</li>
<li>在所有同源窗口中都是共享的。</li>
<li>缺点：在浏览器的隐私模式下和存满时会报错；可被js访问，易受到XSS攻击。</li>
</ul>
</li>
<li>sessionStorage（会话存储）：<ul>
<li>在当前浏览器窗口关闭后自动删除。</li>
<li>存放数据大小为一般为2MB到5MB不等，不同浏览器各不相同。</li>
<li>不参与和服务器的通信。</li>
<li>同一会话时间内单标签页同域下的不同页面之间共享；</li>
<li>缺点：在浏览器的隐私模式下和存满时会报错；可被js访问，易受到XSS攻击。</li>
</ul>
</li>
</ul>
</li>
<li>本地存储大容量：WebSql和IndexDB主要用在前端有大容量存储需求的页面上，例如，在线编辑浏览器或者网页邮箱。<ul>
<li>webSql是关系型数据库，已被W3C标准废弃。</li>
<li>IndexDB是非关系数据库，可正常使用。</li>
</ul>
</li>
<li>manifest离线配置：Manifest是H5提供的一种应用缓存机制，基于它web应用可以实现离线访问(offline cache)，主要是通过manifest文件来标注要被缓存的静态文件清单，是一个被W3C标准废弃的功能。</li>
<li>cacheStorage：用于保存Service Worker声明的cache对象，ServiceWorker和WebWorker一样是浏览器后台独立的线程。这种方式可利用浏览器本身机制来实现离线缓存，但兼容性很差，暂不成熟。</li>
<li>flash缓存：少用，可忽视。</li>
</ul>
<h2 id="前端相关协议"><a href="#前端相关协议" class="headerlink" title="前端相关协议"></a>前端相关协议</h2><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><ul>
<li>HTTP（超文本传输协议）协议是WWW服务器和用户请求代理（如浏览器）之间通过应答请求模式传输超文本（如HTML、JS文件、接口数据等）内容的一种协议。</li>
<li>浏览器发送请求报文，服务器发送响应报文。</li>
<li>通常一个完整的HTTP报文由头部、空行（用于区分头部和正文，由回车符和换行符组成）、正文组成。</li>
<li>HTTP协议先后经历了HTTP0.9、HTTP1.0、HTTP1.1和HTTP2四个版本。目前最为广泛的是HTTP1.1。</li>
</ul>
<h4 id="HTTP1-0重要特性"><a href="#HTTP1-0重要特性" class="headerlink" title="HTTP1.0重要特性"></a>HTTP1.0重要特性</h4><ul>
<li><strong>无连接</strong>：浏览器和服务器保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接，服务器处理完成后立即断开TCP连接。缺陷是无法复用连接。</li>
<li><strong>无状态</strong>：服务器不跟踪每个客户端也不记录过去的请求。</li>
<li><strong>三种请求方法</strong>：只有三个，GET、POST、HEAD</li>
</ul>
<h4 id="HTTP1-1重要特性"><a href="#HTTP1-1重要特性" class="headerlink" title="HTTP1.1重要特性"></a>HTTP1.1重要特性</h4><ul>
<li><strong>长连接</strong>：通过设置请求头Connection：keep-alive来控制，可以让客户端到服务器端之间的连接在一段时间内持续有效。用于传输HTTP数据的TCP连接建立后不会关闭，客户端再次访问服务器时，会复用已建立的连接。</li>
<li><strong>协议扩展切换</strong>：通过请求头中的Upgrade控制，让客户端通过头部标识令服务器知道它能够支持其他备用通信协议的一种机制。如WebSocket协议通信是通过HTTP方式建立的，通过在请求头中设置Upgrade为WebSocket，来通知服务器在通信连接建立后切换到WebSocket协议来完成后面的数据通信。</li>
<li><strong>缓存控制</strong>：强缓存通过Cache-Control：Max-Age来控制，协商缓存通过If-None-Match&#x2F;E-tag来控制。</li>
<li><strong>部分文件传输优化</strong>：可以支持超文本文件的部分传输。</li>
<li><strong>host头域</strong>：使得一个服务器能够用来创建多个Web站点</li>
<li><strong>新增请求方法</strong>：PUT、DELETE、OPTIONS、CONNECT、TRACE</li>
</ul>
<h4 id="HTTP2-0重要特性"><a href="#HTTP2-0重要特性" class="headerlink" title="HTTP2.0重要特性"></a>HTTP2.0重要特性</h4><blockquote>
<p>http2.0不是https，它相当于是http的下一代规范。如果http2.0全面应用，很多http1.1中的优化方案就无需用到，如精灵图、静态资源多域名拆分、CSS和JS放置位置等。</p>
</blockquote>
<ul>
<li><strong>流式传输</strong>：采用完全二进制的格式传输数据，在应用层跟传送层之间增加了一个二进制分帧层，改进传输性能，实现低延迟和高吞吐量。</li>
<li><strong>首部压缩</strong>：http头部压缩，减少体积，最大限度节省传输带宽。</li>
<li><strong>多路复用&#x2F;连接共享</strong>：不同文件的传输帧可以在一个tcp&#x2F;ip连接中一起同时进行流式传输。基于“二进制分帧”的特性实现了真正的并行传输，能够在一个TCP上进行任意数量HTTP请求。</li>
<li><strong>传输优先级</strong>：服务器会保证优先级高的文件流先传输。</li>
<li><strong>服务器端推送</strong>：除了对最初请求的响应外，服务器还可以额外的向客户端推送资源，而无需客户端明确的请求。即可以主动通知客户端。</li>
</ul>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><h4 id="HTTPS概述"><a href="#HTTPS概述" class="headerlink" title="HTTPS概述"></a>HTTPS概述</h4><ul>
<li>HTTP + 加密 + 认证 + 完整性保护 &#x3D; HTTP + SSL&#x2F;TLS证书 &#x3D; HTTPS</li>
<li>https协议需要到ca申请证书，一般免费证书很少，需要交费。</li>
<li>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li>
<li>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全，对搜索引擎更友好，利于SEO。</li>
<li>公钥和私钥是通过一种加密算法得到的密钥对，公钥常用于会话加密、验证数字签名或加密可以用相应私钥解密的数据。密钥对是唯一的。用公钥加密数据只能用私钥解密，私钥加密只能用公钥解。</li>
</ul>
<h4 id="HTTPS双向的加密传输连接"><a href="#HTTPS双向的加密传输连接" class="headerlink" title="HTTPS双向的加密传输连接"></a>HTTPS双向的加密传输连接</h4><ul>
<li>客户端告诉服务端将建立HTTPS连接。</li>
<li>服务器生成公钥返回给客户端，同时要求客户端进行连接验证。</li>
<li>客户端将服务器公钥加密过的验证串和客户端公钥发给服务器。</li>
<li>服务器使用服务器私钥解密报文获得验证串，再将验证串通过客户端公钥加密后返回给客户端。</li>
<li>客户端通过客户端私钥解密验证串，判断是否为最开始发送的验证串。</li>
<li>正确则安全，客户端开始将后面的数据通过服务器公钥加密发送给服务端，服务器不断解密获取报文，并通过客户端公钥加密响应报文返回给客户端。</li>
</ul>
<h3 id="常见攻击方式"><a href="#常见攻击方式" class="headerlink" title="常见攻击方式"></a>常见攻击方式</h3><ul>
<li><strong>XSS</strong>：跨站脚本（Cross-site scripting）<ul>
<li>是注入攻击的一种，带有页面可解析内容的数据未经过处理直接插入到页面上解析。常见的是前端提交的数据未经处理直接存入数据库，后又通过前端读取回显到浏览器。例如发布评论。除了上述的存储型XSS，还有反射型XSS（URL参数注入）、DOM XSS（DOM属性注入）。</li>
<li>防御方式：对输入到页面的所有内容来源数据进行验证过滤，可用正则、替换标签的方式进行转码或解码。</li>
</ul>
</li>
<li><strong>SQL注入</strong><ul>
<li>页面提交数据到服务端后，在服务器端未进行数据验证就将数据拼接到SQL语句中执行。</li>
<li>防御方式：对前端网页提交的数据内容进行严格的检查校验。</li>
</ul>
</li>
<li><strong>CSRF</strong>：跨站请求伪造（Cross-site request forgery）<ul>
<li>是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。冒充用户发起请求（在用户不知情的情况下）,完成一些违背用户意愿的请求（如恶意发帖，删帖，改密码，发邮件等）。</li>
<li>通常来说CSRF是由XSS实现的，所以CSRF时常也被称为XSRF[用XSS的方式实现伪造请求]</li>
<li>防御方式：1、验证HTTP Referer字段；2、加密计算的token验证；3、在HTTP头中自定义属性并验证</li>
</ul>
</li>
<li><strong>网络劫持攻击</strong>：<ul>
<li>一般指网站资源请求在请求过程中因为人为的攻击导致没有加载到预期的资源内容。主要分为DNS劫持（篡改域名解析结果）与HTTP劫持（劫持请求返回的数据包）。</li>
<li>防御方式：使用HTTPS协议来访问目标网站。</li>
</ul>
</li>
</ul>
<h3 id="实时协议"><a href="#实时协议" class="headerlink" title="实时协议"></a>实时协议</h3><ul>
<li><strong>WebSocket通信机制</strong>：是浏览器和服务器之间的双向数据实时通信的一种协议。但低版本浏览器存在兼容性问题。</li>
<li><strong>HTTP 2.0</strong>：HTTP 2也支持服务端的消息推送。但目前还未普及。</li>
<li><strong>poll轮询</strong>：浏览器采用定时向服务器发送请求轮询的方法不断发送或拉取消息。但实时性较差，也比较消耗系统资源。</li>
<li><strong>long-poll长轮询</strong>：对HTTP请求设置较长的Timeout等待时间，网络轮询请求就可以维持一段较长的时间，服务器如果在这段时间内进行了响应，请求便会立即返回结果，若未响应，浏览器将自动响应超时并重新发起一个长轮询请求。</li>
</ul>
<h3 id="其他协议"><a href="#其他协议" class="headerlink" title="其他协议"></a>其他协议</h3><ul>
<li><strong>DDP协议（分布式数据协议）</strong>：使用JSON数据格式在客户端和服务器之间进行数据传输通信，新型的实时通信协议。目前存在兼容性问题，未被广泛使用。</li>
<li><strong>RESTful数据协议规范</strong>：软件架构之间交互调用数据的协议风格规范，建议以一种通用的方式来定义和管理数据交互调用接口。它可以让数据交互的方式更加规范化，一定程素上有利于较低项目开发和维护成本。</li>
</ul>
<h3 id="与Native交互协议"><a href="#与Native交互协议" class="headerlink" title="与Native交互协议"></a>与Native交互协议</h3><h4 id="Hybrid-App概述"><a href="#Hybrid-App概述" class="headerlink" title="Hybrid App概述"></a>Hybrid App概述</h4><p>Hybrid App是在Native App应用（原生应用）的基础上结合了Web App应用所形成的模式，称之为混合APP。</p>
<p><strong>相比于传统的桌面浏览器端的Web App，它具有以下特点：</strong></p>
<ul>
<li><strong>可用系统网络资源少</strong>。这是由于移动设备CPU、内存、网卡、网络连接多方面的限制。</li>
<li><strong>支持更新的浏览器特性</strong>。智能设备浏览器种类较少，以webkit内核居多，不用考虑低版本IE兼容。</li>
<li><strong>可实现离线应用</strong>。可以通过新浏览器特性或Native文件读取机制进行文件级的文件缓存和离线更新。</li>
<li><strong>较多的机型考虑</strong>。由于目前移动设备平台的不统一性，需要考虑不同设备机型的兼容性问题。</li>
<li><strong>支持与Native交互</strong>。可以在前端页面中调用客户端Native的能力。</li>
</ul>
<h4 id="Web到Native协议调用"><a href="#Web到Native协议调用" class="headerlink" title="Web到Native协议调用"></a>Web到Native协议调用</h4><p>在HTML5中调用Native程序一般有两种通用方法：</p>
<ul>
<li>通过URL请求：Native应用向移动端系统注册schema协议的URI供JS调用。</li>
<li>通过addJavascriptInterface注入方法到页面中调用：Native向webView全局作用域中注入一个native全局对象，供JS调用。主要原理是通过addJavascriptInterface将Java的实例对象注入到WebView中。</li>
</ul>
<h4 id="Native到Web协议调用"><a href="#Native到Web协议调用" class="headerlink" title="Native到Web协议调用"></a>Native到Web协议调用</h4><p>在Native中调用HTML5中JavaScript方法或指令一般有两种通用方法：</p>
<ul>
<li>通过loadUrl方法：在H5页面全局作用域中添加方法，类似于schema协议。Android平台下叫loadUrl，IOS系统下通常为stringByEvaluatingJavaScriptFromString。</li>
</ul>
<h4 id="JSBridge设计规范"><a href="#JSBridge设计规范" class="headerlink" title="JSBridge设计规范"></a>JSBridge设计规范</h4><ul>
<li>在Android平台下，通常使用JSBridge来定义前端与Native的相互调用协议。</li>
<li>通过一个协议串定义数据通信规则，如：jsbridge:&#x2F;&#x2F;className:callbackMethod&#x2F;methodName?jsonObj</li>
<li>协议串必须包括：调用Native APP的特定标识头、类名称、方法名、参数、回调JavaScript的方法</li>
<li>以Android为例，前端使用prompt传入协议串来注册类和方法，Native端使用loadUrl(‘javascript:callbackMethod()’)来调用</li>
</ul>
<h2 id="三层结构演进与实践"><a href="#三层结构演进与实践" class="headerlink" title="三层结构演进与实践"></a>三层结构演进与实践</h2><blockquote>
<p>前端的三个基本构成：HTML结构层、CSS表现层、JavaScript行为层</p>
</blockquote>
<h3 id="HTML结构层基础"><a href="#HTML结构层基础" class="headerlink" title="HTML结构层基础"></a>HTML结构层基础</h3><ul>
<li><strong>DOCTYPE</strong><ul>
<li>处于HTML文档的头部的<code>&lt;!DOCTYPE&gt;</code>声明不是一个HTML标签，是一个用于告诉浏览器当前HTMl版本的指令，指示web浏览器使用对应的HTML版本编写的只能进行解析。</li>
<li>由于HTML4.01基于SGML（标准通用标记语言），所以在HTML4.01中<code>&lt;!DOCTYPE&gt;</code>声明指向一个DTD（文档类型定义），DTD指定了标记规则以保证浏览器正确渲染内容。HTML5不基于SGML，所以不用指定DTD。</li>
<li><code>&lt;!DOCTYPE html&gt;</code>兼容所有HTML的历史版本和最新的HTML5版本。如果DOCTYPE不存在或格式错误，文档会以兼容模式呈现，浏览器会使用较低的标准模式来解析HTML。</li>
</ul>
</li>
<li><strong>web语义化标签</strong>：web语义化是指在HTML结构的恰当位置上使用语义恰当的标签，使页面具有良好的结构，使页面标签元素具有含义，能够让人或搜索引擎更容易理解。</li>
<li><strong>HTML糟糕的部分</strong><ul>
<li>有些HTML5新语义化标签会存在兼容性问题，仍需使用div标签替代。</li>
<li>table标签性能存在问题，因为table内容渲染是等表格内容全部解析完生成渲染树后一次性渲染到页面上的。通常使用其他方式模拟table元素。</li>
<li>HTML标签随意添加属性、CSS属性使用错误等情况不会报错。通常需要借助插件或者构建工具来辅助开发。</li>
</ul>
</li>
<li><strong>AMP HTML</strong><ul>
<li>流动网页提速(AMP)是Google推行的一个提升页面资源载入效率的HTML提议规范。</li>
<li>基本思路：<strong>使用严格受限的高效HTML标签</strong>以及<strong>使用静态网页缓存技术</strong>来提高网络访问静态资源的性能和用户体验。</li>
</ul>
</li>
<li><strong>关于XML</strong><ul>
<li>是可扩展性标记语言，一种重量级的数据交换格式语言，基于SGML，类似HTML。</li>
<li>设计宗旨是传输数据，而非显示数据。</li>
<li>XML标签没有被预定义，需要自行定义标签。</li>
<li>XML被设计为具有自我描述性。</li>
</ul>
</li>
<li><strong>Web Component</strong><ul>
<li><strong>Shadow DOM</strong>是HTML的一个规范，允许浏览器开发者封装自己的HTML标签、CSS样式和特定的JavaScript代码，同时也可让开发者创建类似video这样的自定义一级标签，创建这些新标签内容的技术和相关的API被称为<strong>Web Component</strong>。</li>
<li>Chrome 31及Android 4.4 以上版本浏览器提供了创建Shadow DOM的API ：document.createShadowRoot()。</li>
</ul>
</li>
</ul>
<h3 id="JavaScript行为层基础"><a href="#JavaScript行为层基础" class="headerlink" title="JavaScript行为层基础"></a>JavaScript行为层基础</h3><h4 id="前端脚本语言的演进"><a href="#前端脚本语言的演进" class="headerlink" title="前端脚本语言的演进"></a>前端脚本语言的演进</h4><p>演进过程主要包括以下几个阶段：ECMAScript 5、CoffeeScript、ECMAScript 6+、TypeScript和衍生脚本。</p>
<ul>
<li><strong>CoffeeScript</strong>重新定义了一套语法规则，使用了更加简洁高效的编码语法，按照统一的规则转译成规范、可读、默认在严格模式下运行的JavaScript代码。它在ES5时代是极具代表性的，但随着更高效的ES6的发布，CoffeeScript走向了没落。</li>
<li><strong>ES6标准</strong>：是2015年TC39制定的JavaScript规范。在浏览器应用开发中，由于浏览器版本较多，需要将ES6转译为ES5语法运行，ES6只能作为语法糖使用；在Node端的应用开发中，Node环境对新版本特性支持较为完善，大大提高了开发效率。</li>
<li><strong>TypeScript</strong>：是微软在2012年推出的一种自由开源编程语言，是JavaScript的一个超集，与ES6差异很小，增加了少数特殊应用场景下优势的内容。</li>
<li><strong>衍生脚本</strong>：基于现有JavaScript的实现扩展自己特有语法规则来适应特殊应用场景的一类脚本规范，即JavaScript的超集。如JSX或HyperScript，CoffeeScript和TypeScript在某种意义上也是JavaScript的衍生脚本。</li>
</ul>
<h4 id="ES5特性"><a href="#ES5特性" class="headerlink" title="ES5特性"></a>ES5特性</h4><ul>
<li><strong>严格模式</strong>：限制了原有一些不规范的写法，让一些不合理的语法直接报错，从而提高了代码的安全性和规范性。对全局变量、with、eval、arguments、var等方面进行了限制，消除了JS语法一些不合理、不严谨之处。</li>
<li><strong>内置JSON对象</strong>：内置了JSON对象，用于JSON对象和JSON字符串之间的转换操作，不再需要用第三方库来转换。</li>
<li><strong>新增Object方法属性</strong>：如getPrototypeOf(返回原型)、create(创建对象)、defineProperty(用于数据劫持)、freeze(冻结对象)等</li>
<li><strong>新增Array方法属性</strong>：indexOf(返回索引值)、forEach(遍历执行)、map(返回处理过的数组)、reduce(累加器)等</li>
<li><strong>新增bind()、trim()、Date.now()等实用函数</strong>：Function.prototype.bind()用于将当前函数和指定对象绑定并返回新函数，新函数被调用时，代码会在指定对象的上下文中执行；String.prototype.trim()用于去除字符串前后空格；Date.now()会返回当前时间戳。</li>
</ul>
<h4 id="ES6特性"><a href="#ES6特性" class="headerlink" title="ES6特性"></a>ES6特性</h4><ul>
<li><strong>块级作用域变量</strong>：声明关键字let和const。</li>
<li><strong>字符串模板</strong>：使用倒引号&#96;&#96;拼接字符串，用${expression} 表示占位符。</li>
<li><strong>解构赋值</strong>：例如const [x, y, z] &#x3D; point或const {x, y, z} &#x3D;  point。</li>
<li><strong>数组新特性</strong>：如Array.from、Array.key、Array.prototype.copyWithin等。</li>
<li><strong>函数参数</strong>：函数添加了默认参数、不定参数和拓展参数的设计。</li>
<li><strong>箭头函数</strong>：不需要 function 关键字来创建函数，省略 return 关键字，继承当前上下文的 this 关键字。</li>
<li><strong>增强对象</strong>：可以在定义对象时通过属性简写、变量作为属性名、省略对象函数属性的书写等方式提高编码效率。</li>
<li><strong>Class（类）</strong>：只是个语法糖，实际上还是原型继承，通过extends关键字实现继承。实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。</li>
<li><strong>模块化</strong>：通过export暴露接口，通过import引用其他文件的内容。</li>
<li><strong>循环与迭代器</strong>：可使用for…in遍历对象，使用for…of遍历数组、Map、Set等合集。interator迭代器则可以控制单步循环触发的时机。</li>
<li>**Generators(生成器)*<em>：是能返回一个迭代器的函数。比普通的function多了个星号</em>，在其函数体内可以使用yield关键字，会在每个yield后暂停，调用next()方法继续。</li>
<li><strong>集合类型Map + Set + weakMap + WeakSet</strong>：集合类型是对对象的增强类型，是一类是数据管理操作更加高效的对象类型。</li>
<li><strong>Promise、Symbol、Proxy增强类型</strong>：Promise可以用同步的方式去写异步代码，ES6遵守的是Promise&#x2F;A+规范；Symbol是ES6新增的基本数据类型，一般用作属性键值，并且能避免对象属性键的命名冲突；Proxy可以用来拦截某个对象的属性访问方法，和ES5的defineProperty相似。</li>
<li><strong>统一码</strong>：ES6字符串支持新的Unicode文本形式，也增加了新的正则表达式修饰符u来处理统一码。</li>
<li><strong>进制数支持</strong>：增加了二进制和八进制字面量的支持。</li>
<li><strong>Reflect对象和tail calls尾调用</strong>：Reflect用于对原有对象进行赋值或取值操作，但不会触发getter或setter调用；tail calls尾调用保证了函数尾部调用时调用栈有一定的长度限制。</li>
</ul>
<h4 id="ES7-特性"><a href="#ES7-特性" class="headerlink" title="ES7+特性"></a>ES7+特性</h4><ul>
<li><strong>幂指数操作符</strong>：新增操作符来进行幂指数运算</li>
<li><strong>Array.prototype.includes</strong>：用来判断数组中是否包含某个元素。</li>
<li><strong>异步函数 async&#x2F;await</strong>：async&#x2F;await是对Generator的简化封装，专门用于处理异步场景。</li>
<li><strong>SIMD.JS – SIMD APIs + Polyfill</strong>：指单指令多数据流，涉及并行计算范畴的语法指令。</li>
</ul>
<h4 id="TypeScript特性"><a href="#TypeScript特性" class="headerlink" title="TypeScript特性"></a>TypeScript特性</h4><ul>
<li><strong>是ES6的超集</strong>：就语言特性而言，是ES6的超集，基本包含了ES6和ES6中部分未实现的内容，如async&#x2F;await。</li>
<li><strong>强类型支持</strong>：数据类型是强类型的，声明时需要对类型进行定义。</li>
<li><strong>Decorator装饰器特性</strong>：可以用来注解class、property、method和parameter，也是一种面向对象编程语言设计模式的借鉴。</li>
</ul>
<h3 id="CSS表现层基础"><a href="#CSS表现层基础" class="headerlink" title="CSS表现层基础"></a>CSS表现层基础</h3><h4 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h4><ul>
<li><strong>CSS选择器</strong>：<ul>
<li>css选择器类别：id选择器、类选择器、元素选择器、组合选择器、伪类、伪元素等。</li>
<li>选择器属性优先级：!important &gt; 内联样式(权重1000) &gt; ID选择器(权重100)  &gt; 类选择器(权重10)  &gt; 元素选择器(权重1) &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性;</li>
</ul>
</li>
<li><strong>CSS属性</strong>：<ul>
<li>布局类属性：position类、弹性布局flex、浮动float、对齐align</li>
<li>几何类属性：盒模型相关（margin、padding、width、height、border）、box-shadow、渐变gradient、background类、transform类</li>
<li>文本类属性：font类、line-height、color类、text类（text-decoration、text-indent、text-overflow）、white-space、user-select、text-shawdow等</li>
<li>动画类属性：以CSS3为主的transition、animation等</li>
<li>查询类：Media query 和 IE Hack等</li>
</ul>
</li>
<li><strong>不同浏览器下CSS样式统一化</strong>：<ul>
<li>reset：将浏览器中的默认样式全部清除。例如：body, h1{ margin: 0 }</li>
<li>normalize：在整站样式基本确定的情况下使用同一个默认样式规则。例如：body, h1{ margin: 5px }</li>
<li>neat：具体需要根据网站的设计特点来确定。例如：body { margin: 0 } h1{ margin: 5px }</li>
</ul>
</li>
<li><strong>CSS预处理</strong>：<ul>
<li>预处理工具：SASS、LESS、Stylus、postCSS等</li>
<li>目的：通过编写更高效、易管理的类CSS脚本并将它们自动生成浏览器解析执行的CSS代码，实现高效开发和便捷管理。</li>
<li>特性：变量声明和计算、语法表达式、函数处理、属性继承、兼容性补全。</li>
</ul>
</li>
</ul>
<h4 id="实现动画的方案"><a href="#实现动画的方案" class="headerlink" title="实现动画的方案"></a>实现动画的方案</h4><ul>
<li>JavaScript直接实现：通过setInterval或setTimeout的回调函数来持续调用改变某个元素的CSS样式，一般以16ms为间隔达到60帧。</li>
<li>SVG(可伸缩矢量图形)：由SVG内部元素（如<code>&lt;set&gt;</code>、<code>&lt;animate&gt;</code>等）的属性控制。</li>
<li>CSS3 transition：只能在某个标签元素样式或状态改变时进行平滑的动画效果过渡。</li>
<li>CSS3 animation：真正意义上页面内容的动画，通过对关键帧和循环次数的控制能实现很多动画，脱离JS的控制。</li>
<li>Canvas：通过JavaScript调用Canvas的API控制渲染动画，一般做法是用定时器不断清空画布并重新绘制。</li>
<li>requestAnimationFrame：是浏览器针对动画专门优化而成的API，原理和定时器类似，通过JS持续循环调用来触发动画动作。</li>
</ul>
<p><strong>总结</strong>：PC端推荐JS直接实现或SVG，移动端推荐transition、animation、canvas或requestAnimationFrame。</p>
<h3 id="响应式页面开发"><a href="#响应式页面开发" class="headerlink" title="响应式页面开发"></a>响应式页面开发</h3><ul>
<li><strong>响应式设计</strong>：根据不同设备浏览器尺寸或分辨率来展示不同页面结构层、行为层、表现层内容的设计方式。</li>
<li><strong>主流实现方法</strong>：<ul>
<li>通过前端或后端判断userAgent来跳转不同的页面完成不同设备浏览器的适配，需要维护两个不同站点来根据用户设备进行对应的跳转。适用于功能复杂但对性能要求较高的站点应用。</li>
<li>使用media query媒体查询等手段让页面根据不同设备浏览器自动改变页面的布局和显示，不用做跳转。适用于访问量较小、性能要求不高的应用场景。</li>
</ul>
</li>
<li>**结构层响应式(HTML内容的自适应渲染)**：<ul>
<li>前端渲染数据：桌面端和移动端直接加载到的HTML结构是相同的，使用异步的方式加载桌面端或者移动端不同的JS资源列表。</li>
<li>后端渲染数据：后端根据userAgent直出不同的HTML模板进行渲染。</li>
<li>结构层媒体响应式：让浏览器上的展示媒体内容（主要指图片）尺寸根据屏幕宽度或分辨率进行自适应调节。</li>
</ul>
</li>
<li><strong>表现层响应式(响应式布局和屏幕适配布局)</strong><ul>
<li>响应式布局：根据浏览器宽度、分辨率、横竖屏等情况自动改变页面元素的展示。一般通过栅格系统和媒体查询来实现响应式。</li>
<li>屏幕适配布局：内容按照不同屏幕大小自动等比例缩放。一般通过设置<code>&lt;meta name=&quot;viewport&quot;&gt;</code>使页面保持内容不缩放、使用rem作为单位来实现适配。</li>
</ul>
</li>
<li><strong>行为层响应式</strong>：与结构层类似，也是通过设备浏览器环境判断来异步加载不同的JS脚本，同样分为前端引入与后端引入。</li>
</ul>
<h2 id="前端交互框架"><a href="#前端交互框架" class="headerlink" title="前端交互框架"></a>前端交互框架</h2><h3 id="DOM交互框架-–-jQuery"><a href="#DOM交互框架-–-jQuery" class="headerlink" title="DOM交互框架 – jQuery"></a>DOM交互框架 – jQuery</h3><p>通过原生的DOM API基本可以完成前端页面的任何操作，但开发复杂网站应用，使用原生API开发就显得低效且不易管理。于是jQuery这个典型的DOM交互框架就对六类DOM API进行了封装，方便开发者调用。</p>
<h4 id="常见API"><a href="#常见API" class="headerlink" title="常见API"></a>常见API</h4><table>
<thead>
<tr>
<th>类型</th>
<th>常见DOM API</th>
<th>常见jQuery API</th>
</tr>
</thead>
<tbody><tr>
<td>节点查询型</td>
<td>getElementById、getElementsByName(ClassName、TagName)、querySelector、querySelectorAll</td>
<td>$(selector)、find()等</td>
</tr>
<tr>
<td>节点创建型</td>
<td>createElement、createDocumentFragment、createTextNode、cloneNode</td>
<td>$(html)、clone()等</td>
</tr>
<tr>
<td>节点修改型</td>
<td>appendChild、replaceChild、removeChild、insertBefore、innerHTML</td>
<td>html()、replace()、remove()、append()、before()、after()等</td>
</tr>
<tr>
<td>节点关系型</td>
<td>parentNode、previousSibling、childNodes</td>
<td>parent()、sibling()、child()、closest()、next()等</td>
</tr>
<tr>
<td>节点属性型</td>
<td>innerHTML、attributes、getAttribute、setAttribute、getComputedStyle</td>
<td>attr()、data()、css()、hide()、show()、slideDown()、slideUp()、animate()等</td>
</tr>
<tr>
<td>内容加载型</td>
<td>XMLHttpRequest、ActiveX</td>
<td>ajax()、get()、post()等</td>
</tr>
</tbody></table>
<h4 id="JQuery-1-X版本-最为广泛-特性"><a href="#JQuery-1-X版本-最为广泛-特性" class="headerlink" title="JQuery 1.X版本(最为广泛)特性"></a>JQuery 1.X版本(最为广泛)特性</h4><ul>
<li>简化了选择器，可调用$()、find等API以简短的形式进行组合查询。</li>
<li>扩展实现了如html()、append、animate()等多种类型的DOM操作方法。</li>
<li>实现了对XMLHttpRequest和ActiveX的统一封装，使AJAX网络请求的调用更加方便。</li>
<li>对DOM添加了on等方法来统一处理事件，包括事件绑定和事件代理等。</li>
<li>添加了$.Deferred对象来处理异步回调嵌套问题，借鉴了Promise&#x2F;A规范。</li>
<li>做到了兼容性问题对开发者的透明。例如实现事件绑定、AJAX封装时充分考虑了不同浏览器的差异性，并做统一处理。</li>
</ul>
<h3 id="MV"><a href="#MV" class="headerlink" title="MV*"></a>MV*</h3><p>随着AJAX技术的盛行，SPA应用开始被广泛使用，但使用JQuery来开发维护SPA应用是比较麻烦的。为了解决这个问题，通常会使用MV*框架。</p>
<h4 id="常见MV-框架"><a href="#常见MV-框架" class="headerlink" title="常见MV*框架"></a>常见MV*框架</h4><ul>
<li><strong>MVC框架</strong>：<ul>
<li>Model-数据模型、View-视图、Controller-控制器</li>
<li>View 传送指令到 Controller，Controller 完成业务逻辑后，要求 Model 改变状态，Model 将新的数据发送到 View，用户得到反馈。</li>
<li>一般通过事件监听或观察者模式实现，所有通信都是单向的。</li>
</ul>
</li>
<li><strong>MVP框架</strong>：<ul>
<li>Model-数据模型、View-视图、Presenter-发布者</li>
<li>View层将用户交互传递给Presenter，由Presenter完成相应的业务逻辑及对Modal中数据的操作。</li>
<li>由MVC模式进化而来的，改进了MVC中的控制器过于臃肿的问题。Presenter和View之间的通信是双向的。</li>
</ul>
</li>
<li><strong>MVVM框架</strong>：<ul>
<li>Model-数据模型、View-视图、ViewModel-视图模型</li>
<li>用户操作时，ViewModel会捕获数据变化，自动触发Modal的调用和模板内容的渲染。</li>
<li>可以认为是自动化的MVP框架，将Presenter的工作拆分成多个小指令步骤，通过对指令的识别来渲染数据和绑定事件。</li>
</ul>
</li>
</ul>
<p><strong>各层解释</strong></p>
<ul>
<li>M(Model-数据模型)：用于存放请求的数据结果和数据对象。</li>
<li>V(View-视图)：用于页面DOM的更新与修改。</li>
<li>C(Controller-控制器)：实现业务逻辑，根据路由切换页面及数据的增删改查。</li>
<li>P(Presenter-发布者)：作为中间部分连接View和Model的通信交互完成所有的逻辑操作。</li>
<li>VM(ViewModel-视图模型)：是视图View的模型、映射和显示逻辑，用来连接数据和视图</li>
</ul>
<h4 id="数据变更检测"><a href="#数据变更检测" class="headerlink" title="数据变更检测"></a>数据变更检测</h4><ul>
<li><strong>手动触发绑定</strong>：在数据对象上定义get()、set()方法，调用时手动触发get和set函数来获取、修改数据，改变数据后悔主动触发get和set函数中View层的重新渲染功能。</li>
<li><strong>脏数据检测</strong>：在ViewModal对象的某个属性值发送变化时找到与之相关的所有元素，对比数据变化来决定是否重新渲染。最简单的方式就是通过 setInterval() 定时轮询检测数据变动。如Angular.js。</li>
<li><strong>对象劫持</strong>：使用Object.defineProperty对ViewModal对象进行属性set()、get()的监听，当有数据读取和赋值操作时扫描元素节点，运行指定对应节点的指令。</li>
<li><strong>Proxy</strong>：Proxy可以用于在已有的对象基础上重新定义一个对象，并重新定义对象原型上的方法，包括get()和set()。</li>
</ul>
<h4 id="Virtual-DOM"><a href="#Virtual-DOM" class="headerlink" title="Virtual DOM"></a>Virtual DOM</h4><ul>
<li><strong>定义</strong>：Virtual DOM是一个能够直接描述一段HTML DOM结构的JavaScript对象。</li>
<li><strong>核心步骤</strong>：<ul>
<li>创建Virtual DOM：JS直接解析HTML文本字符串，根据词法分析内容，生成一个JavaScript对象。</li>
<li>对比新旧Virtual DOM生成差异化的Virtual DOM；</li>
<li>将差异化的Virtual DOM渲染到页面上。</li>
</ul>
</li>
<li><strong>优点</strong>：减少了对DOM对象的操作，在页面结构变化时进行最小代价的DOM渲染操作，提高交互性能和效率。</li>
</ul>
<h3 id="MNV"><a href="#MNV" class="headerlink" title="MNV*"></a>MNV*</h3><ul>
<li><strong>定义</strong>：使用JavaScript调用原生控件或事件绑定来生成应用程序的交互模式。可以简单理解为Modal-NativeView-*。</li>
<li><strong>例子</strong>：Modal-NativeView-Virtual DOM 和 Modal-NativeView-ViewModel</li>
<li><strong>场景</strong>：目前仅适用于移动端Hybrid应用，因为它完全抛弃了DOM，需要依赖原生应用控件的调用支持。</li>
</ul>
<h2 id="前端项目与技术实践"><a href="#前端项目与技术实践" class="headerlink" title="前端项目与技术实践"></a>前端项目与技术实践</h2><h3 id="前端规范"><a href="#前端规范" class="headerlink" title="前端规范"></a>前端规范</h3><h4 id="通用规范"><a href="#通用规范" class="headerlink" title="通用规范"></a>通用规范</h4><ul>
<li>保证结构层(HTML)、表现层(CSS)、行为层(JavaScript)之间的最小耦合。</li>
<li>统一使用tab或4个空格缩进。</li>
<li>HTML文档中使用<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>指定编码，避免乱码。</li>
<li>HTML标签、标签属性、样式名及规则建议使用小写，HTML属性id建议使用驼峰命名方式。</li>
<li>代码单行长度不能超过80或120字符。</li>
<li>尽可能地为代码写上注释。</li>
<li>删除行尾空格和多余符号。</li>
</ul>
<h4 id="HTML规范"><a href="#HTML规范" class="headerlink" title="HTML规范"></a>HTML规范</h4><ul>
<li>统一使用HTML5的标准文档类型<code>&lt;!DOCTYPE html&gt;</code>来定义。</li>
<li>head中必须定义title、keyword、description保证基本SEO页面关键字和内容描述；移动端head添加viewport控制页面不缩放。</li>
<li>引用CSS或JavaScript时，省略type属性，因为HTML5引入时带默认值。</li>
<li>所有标签属性值必须用双引号包裹。</li>
<li>非必须属性值可省略不写。</li>
<li>所有元素必须正确嵌套，尽量使用语义化标签，不允许交叉，不允许在inline元素中包含block元素。</li>
<li>非自闭合标签必须添加关闭标识，自闭合标签无须关闭。</li>
<li>避免img元素的alt属性值为空。</li>
<li>为表单内部元素<code>&lt;label&gt;</code>加上for属性或将对应控件放在<code>&lt;label&gt;</code>标签内部。</li>
<li>为每个大的模块的开始和结束的地方添加起始注释标记。</li>
<li>块级元素另起一行写；子元素尽量相对其父级进行缩进。</li>
<li>在合适的地方选择语义合适的标签。</li>
</ul>
<h4 id="CSS规范"><a href="#CSS规范" class="headerlink" title="CSS规范"></a>CSS规范</h4><ul>
<li>使用link调用外部样式文件，紧张使用内联样式。</li>
<li>样式命名要统一约定，可使用BEM方案。</li>
<li>尽量缩写，如单位0不用加单位、URL引用资源不用写引号、颜色值小写并尽量缩写至3位。</li>
<li>CSS样式书写顺序遵循先写布局属性后写内容属性的规则。</li>
<li>尽可能减少对CSS Hack的使用和依赖。</li>
<li>高效实现，如避免标签名与id或class组合的选择器、属性尽可能使用合并写法等。</li>
<li>使用预处理脚本编码开发。</li>
</ul>
<h4 id="ES5常用规范"><a href="#ES5常用规范" class="headerlink" title="ES5常用规范"></a>ES5常用规范</h4><ul>
<li>JavaScript语句后统一加上分号。</li>
<li>所有运算符、符号和英文单词之间添加必要的空格，便于阅读。</li>
<li>推荐在代码块后保留一行空行，使块内容层次分明。</li>
<li>推荐JavaScript字符串最外层统一使用单引号。</li>
<li>标准变量采用驼峰式命名；常量使用全大写命名，并用下划线连接；构造函数首字母大写；jQuery对象推荐以$开头命名便于区分。</li>
<li>对象属性名不需要加引号；对象属性键值以缩进的形式书写；数组、对象属性后不能有都好。</li>
<li>块代码推荐使用大括号包裹。</li>
<li>尽量不要直接使用undefined进行变量判断；用&#x3D;&#x3D;&#x3D;、!==代替==、!&#x3D;&#x3D;。</li>
<li>不要在条件语句或循环语句中声明函数。</li>
</ul>
<h4 id="ES6-参考规范"><a href="#ES6-参考规范" class="headerlink" title="ES6+参考规范"></a>ES6+参考规范</h4><ul>
<li>正确使用ES6的let和const。</li>
<li>字符串拼接使用字符串模板完成。</li>
<li>解构赋值尽量使用一层解构。</li>
<li>数组拷贝推荐使用…实现。</li>
<li>数组循环遍历使用for…of，非必须情况不推荐使用forEach、map、简单循环。</li>
<li>使用ES6的类来代替之前的类实现方式，尽量使用constructor进行属性成员变量赋值。</li>
<li>模块化多变量导出时尽量使用对象解构，不使用全局导出。尽量不要把import和export写在一行。</li>
<li>导出类名时，保持模块名称和文件名相同，类名首字符需要大写。</li>
<li>生成器中yield进行一步操作时需要使用try…catch包裹，方便对异常进行处理。</li>
<li>推荐使用promise，避免使用第三方库或直接回调，原生的一步处理性能更好且符合语言规范。</li>
<li>如果不是必须，避免使用迭代器Iterators。</li>
<li>不要使用统一码，中文的正则匹配和计算较消耗时间，且容易出问题。</li>
<li>合理使用Generator，推荐使用async&#x2F;await。更加简洁。</li>
</ul>
<h4 id="前端防御性编程规范"><a href="#前端防御性编程规范" class="headerlink" title="前端防御性编程规范"></a>前端防御性编程规范</h4><ul>
<li>对外部数据的安全检测判断。</li>
<li>规范化的错误处理</li>
</ul>
<h4 id="前端组件规范"><a href="#前端组件规范" class="headerlink" title="前端组件规范"></a>前端组件规范</h4><ul>
<li>UI组件规范<ul>
<li>原则：UI设计一致性、开发实现一致性</li>
<li>设计实现UI库：统一的页面布局方案、基础UI结构和样式实现、组件化UI结构和样式实现、响应式布局、扩展性。</li>
</ul>
</li>
<li>模块化规范<ul>
<li>AMD：是运行在浏览器端的模块化异步加载规范，主要以requireJS为代表。基本原理是定义define和require方法异步请求对应的JavaScript模块文件到浏览器端运行。</li>
<li>CMD：是在浏览器端调用类似commonJS的书写方式进行模块引用的模块化规范，CMD遵循按需执行依赖的原则，只有在用到某个模块时才会执行模块内部的require语句。</li>
<li>CommonJS：是Node端使用的JavaScript模块化规范，使用require进行模块引入，并使用module.export来定义模块导出。</li>
<li>import&#x2F;export：是ES6定义的JavaScript模块引用方式，是唯一一个遵循JavaScript语言标准的模块化规范。</li>
</ul>
</li>
<li>项目组件化设计规范<ul>
<li>组件化实践方案：Web Component组件化、MVVM框架组件化、Virtual DOM组件化、基于目录管理的通用组件化</li>
<li>要解决的问题：组件之间独立、松耦合；组件间嵌套使用；组件间通信；公共部分设计；组件构建打包；异步组件的加载模式；组件继承与复用性；私有组件的统一管理；根据特定场景进行扩展或定义。</li>
</ul>
</li>
</ul>
<h3 id="自动化构建"><a href="#自动化构建" class="headerlink" title="自动化构建"></a>自动化构建</h3><ul>
<li><strong>目的</strong>：对源项目文件或资源进行文件级处理，将文件或资源处理成需求的最佳输出结构和形式。</li>
<li><strong>构建原理流程</strong>：读取入口文件 &#x3D;&gt; 分析模块引用 &#x3D;&gt; 按照引用加载模块 &#x3D;&gt; 模块文件编译处理 &#x3D;&gt; 模块文件合并 &#x3D;&gt; 文件优化处理 &#x3D;&gt; 写入生成目录</li>
<li><strong>构建工具的作用</strong>：<ul>
<li>模块分析引入</li>
<li>模块化规范支持</li>
<li>CSS编译、自动合并图片</li>
<li>HTML、JavaScript、CSS资源压缩优化</li>
<li>HTML路径分析替换（将相对路径自动替换成绝对或CDN路径）</li>
<li>区分开发和线上目录环境</li>
<li>异步文件打包方案</li>
<li>文件目录白名单设置</li>
</ul>
</li>
</ul>
<h3 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h3><h4 id="前端性能测试"><a href="#前端性能测试" class="headerlink" title="前端性能测试"></a>前端性能测试</h4><ul>
<li>Performance Timing PAI：描述了页面资源从加载到解析各个阶段的执行关键点时间记录。</li>
<li>Profile：是Chrome和Firefox等标准浏览器提供的一种用于测试页面脚本运行时系统内存和CPU资源占用情况的API。</li>
<li>页面埋点计时：通常在移动端使用，找到页面中执行JS耗时的操作，将耗时的执行过程进行埋点计时并上报。</li>
<li>资源加载时序图：粗粒度地宏观分析浏览器的所有资源文件请求耗时和文件加载顺序情况。</li>
</ul>
<h4 id="桌面浏览器前端优化策略"><a href="#桌面浏览器前端优化策略" class="headerlink" title="桌面浏览器前端优化策略"></a>桌面浏览器前端优化策略</h4><ul>
<li><strong>网络加载类</strong><ul>
<li>减少HTTP资源请求次数（如合并图片、代码等）</li>
<li>减少HTTP请求大小（如gzip压缩）</li>
<li>将CSS或JavaScript放到外部文件（引用外部资源可以有效利用缓存）</li>
<li>避免页面中空的href和src（为空时仍会去加载）</li>
<li>为HTML指定Cache-Control或Expires（将HTML内容强缓存）</li>
<li>合理设置Etag和Last-Modified（使用协商缓存）</li>
<li>减少页面重定向（重定向会增加时间开销）</li>
<li>使用静态资源分域存放来增加下载并行数（利用多个域名增加页面加载时资源的并行下载数）</li>
<li>使用静态资源CDN来存储文件（利用CDN加快同一地理区域内重复静态资源的响应下载速度）</li>
<li>使用CDN Combo下载传输内容（CDN Combo能将多个文件请求打包成一个文件的形式来返回）</li>
<li>使用可缓存的AJAX（将ajax的参数cache设为true即可）</li>
<li>使用GET来完成AJAX请求（使用XMLHttpRequest时，GET只发送头部）</li>
<li>减少cookie的大小并进行cookie隔离（由于cookie受同源策略限制，且HTTP请求会带上cookie）</li>
<li>缩小favicon.ico并缓存（因为一般favicon.ico很少改变）</li>
<li>推荐使用异步JavaScript资源（因为异步JS资源不会阻塞文档解析）</li>
<li>消除阻塞渲染的CSS及JavaScript（合理拆分或延后加载耗时过长的文件）</li>
<li>避免使用CSS import引用加载CSS（因为@import会导致串行加载）</li>
</ul>
</li>
<li><strong>页面渲染类</strong><ul>
<li>把CSS资源引用放到HTML文件顶部（为了优先下载CSS尽早完成渲染）</li>
<li>JavaScript资源引用放到HTML文件底部（防止JS的加载和解析执行阻塞页面渲染）</li>
<li>不要在HTML中直接缩放图片（直接缩放会导致页面的重排重绘）</li>
<li>减少DOM元素数量和深度（减少DOM解析和绘制时长）</li>
<li>尽量避免使用table、iframe等慢元素（有些元素影响页面性能）</li>
<li>避免运行耗时的JavaScript（任何与页面初次渲染无关的逻辑功能都应延迟加载执行）</li>
<li>避免使用CSS表达式或CSS滤镜（CSS表达式和滤镜的解析渲染速度比较慢）</li>
</ul>
</li>
</ul>
<h4 id="移动端浏览器前端优化策略"><a href="#移动端浏览器前端优化策略" class="headerlink" title="移动端浏览器前端优化策略"></a>移动端浏览器前端优化策略</h4><ul>
<li><strong>网络加载类</strong><ul>
<li>首屏数据请求提前，避免JavaScript文件加载后才请求数据</li>
<li>首屏加载和按需加载，非首屏内容滚屏加载，保证首屏内容最小化</li>
<li>模块化资源并行下载</li>
<li>将首屏必备的css和JavaScript内联到页面中避免白屏</li>
<li>设置文件资源的DNS预解析，让浏览器提前解析获取静态资源的主机IP</li>
<li>首屏完成加载后，可能会被使用的资源需要进行预加载</li>
<li>合理利用MTU（最大传输单元）策略，尽量保证页面HTML内容在1KB以内</li>
</ul>
</li>
<li><strong>缓存类</strong><ul>
<li>合理利用浏览器缓存，保证静态资源内容的快速加载</li>
<li>移动端或Hybrid应用可设置离线文件或离线包机制，加快资源载入速度，并实现离线更新</li>
<li>尝试使用AMP Component中的元素来代替原始的页面元素进行直接渲染</li>
</ul>
</li>
<li><strong>图片类</strong><ul>
<li>通常要保证页面中所有图片都进行压缩优化处理</li>
<li>使用较小图片，合理使用base64内嵌图片</li>
<li>使用更高压缩比格式图片，如webp等</li>
<li>页面图片资源推荐使用懒加载</li>
<li>使用media query或srcset根据不同屏幕加载不同大小图片</li>
<li>使用iconfont代替图片图标，iconfont体积小、矢量、易修改</li>
<li>一般建议单张图片不超过30k</li>
</ul>
</li>
<li><strong>脚本类</strong><ul>
<li>尽量使用ID选择器，速度快</li>
<li>对于需要重复使用的DOM对象，要优先设置缓存变量</li>
<li>页面元素尽量使用事件代理，避免直接事件绑定</li>
<li>在没有实现滚动处理的情况下，推荐使用touchstart代替click事件，加快点击响应速度</li>
<li>对touchmove、scroll这类可能连续触发回调的事件设置节流</li>
<li>避免使用eval、with，使用join代替连接符+，推荐使用ES6的字符串模板</li>
<li>尽量使用ES6+的特性来编程，更加安全高效</li>
</ul>
</li>
<li><strong>渲染类</strong><ul>
<li>设置viewport加速渲染，同时也避免了缩放导致的重排重绘</li>
<li>避免各种形式的重排重绘，如图片大小、位置的变化等</li>
<li>使用CSS 3动画，开启GPU加速</li>
<li>选择合适、高效的方式实现动画，尽量避免定时器等方式直接处理连续动画</li>
<li>部分情况下考虑使用SVG代替图片实现动画，内容小且SVG DOM结构易调整</li>
<li>布局渲染阶段float元素布局计算比较耗性能，推荐使用固定布局或flex布局</li>
<li>不滥用web字体或过多font-size声明</li>
</ul>
</li>
<li><strong>架构协议类</strong><ul>
<li>可尝试使用SPDY和HTTP 2协议</li>
<li>可尝试使用后端数据渲染</li>
<li>可尝试使用Native Viewd MNV*开发模式来避免HTML DOM性能慢的问题</li>
</ul>
</li>
</ul>
<h3 id="前端用户数据分析"><a href="#前端用户数据分析" class="headerlink" title="前端用户数据分析"></a>前端用户数据分析</h3><ul>
<li><strong>用户访问统计</strong><ul>
<li>PV：Page View，在一天内页面被所有用户访问的总次数，每一次页面刷新就增加一次PV</li>
<li>UV：Unique Visitor，在一天内访问内页的不同用户数，较多站点按照IP数计算</li>
<li>VV：Visit View，通常用户从进入网站到最终离开该网站的整个过程算一次VV</li>
</ul>
</li>
<li><strong>用户行为分析</strong><ul>
<li>页面点击量：统计用户对页面某个可点击或可操作区域的点击或操作次数</li>
<li>用户点击流分析：统计用户在页面中发生点击或操作动作的顺序</li>
<li>用户访问路径分析：统计用户访问不同页面的路径顺序</li>
<li>用户点击热力图：统计用户的点击或操作发生在整个页面哪些区域位置，并绘制出热力图</li>
<li>用户转化率：&#x3D; 通过该页面注册的用户数 &#x2F; 页面PV</li>
<li>导流转化率：&#x3D; 通过源页面导入的页面访问PV &#x2F; 源页面PV</li>
<li>用户访问时长、内容分析：统计分析用户在某些关键内容页面的停留时间</li>
</ul>
</li>
<li><strong>前端日志上报</strong><ul>
<li>通过try…catch和window.onerror两种机制获取用户页面的脚本错误信息</li>
<li>通过创建HTTP请求将错误信息发送到日志收集服务器</li>
<li>通常会建立一个简单的内容管理系统来管理查看错误日志</li>
<li>若要进一步完善检测异常信息，可尝试对静态资源文件加载失败的情况进行监控</li>
<li>可以将页面性能数据进行上报统计，来评判具体页面的性能情况</li>
</ul>
</li>
</ul>
<h3 id="前端搜索引擎优化（SEO）"><a href="#前端搜索引擎优化（SEO）" class="headerlink" title="前端搜索引擎优化（SEO）"></a>前端搜索引擎优化（SEO）</h3><ul>
<li>合理设置<code>&lt;title&gt;</code>、<code>&lt;meta keywords&gt;</code>、<code>&lt;meta description&gt;</code></li>
<li>使用具有语义化的HTML5标签结构，建议每个页面都有个唯一的H1标题，img标签设置alt属性</li>
<li>URL规范化：统一网站的地址链接、URL变化后使旧地址301指向新地址、带参数页面<code>&lt;head&gt;</code>加上canonical声明</li>
<li>用robots.txt指导搜索引擎爬虫的抓取</li>
<li>用sitemap文件列出网站所有URL地址来指导搜索引擎抓取</li>
</ul>
<h3 id="前端协作"><a href="#前端协作" class="headerlink" title="前端协作"></a>前端协作</h3><ul>
<li>与产品经理的沟通：明确产品经理提出的需求、对需求开发的难度进行评估、分析需求性价比、需求不合理时要提出质疑、做好风险管理</li>
<li>与后端的合作：需求开发前定好数据协议文档、采用合适的开发沟通方式</li>
</ul>
<h2 id="前端跨栈技术"><a href="#前端跨栈技术" class="headerlink" title="前端跨栈技术"></a>前端跨栈技术</h2><h3 id="JavaScript跨后端实现技术"><a href="#JavaScript跨后端实现技术" class="headerlink" title="JavaScript跨后端实现技术"></a>JavaScript跨后端实现技术</h3><ul>
<li><strong>Node开发</strong><ul>
<li><strong>Node优点</strong>：基于事件驱动和无阻塞的服务器，适合处理并发请求，尽管目前node服务器仍是单进程运行。且node端运行的是JavaScript，对于前端开发者来说学习成本低。</li>
<li><strong>node后端开发需要掌握的基础知识和技术</strong>：服务器知识基础、数据库知识基础、后端MVC设计理念、后端异步编程（如对数据库操作或网络请求的异步处理）、模块化思想、中间件技术、接口设计规范、后端部署技术和基本运维能力</li>
<li><strong>早期MEAN技术组合方案</strong>：M-MySQL、E-Express、A-angular、N-node</li>
<li><strong>node可解决的前后端分离模式下的问题</strong>：node可以在页面请求时直接将内容渲染到页面上输出，即直出，可解决在SPA或前后端分离模式下SEO和前端渲染展示缓慢的问题。</li>
</ul>
</li>
<li><strong>前后端同构</strong><ul>
<li><strong>前后端同构的宗旨</strong>：可以使用同一套项目代码在前后端分别进行数据渲染解析。</li>
<li><strong>同构的三种思路</strong>：数据模块的前端渲染和后台直出、MVVM的前端实现和和后台直出、Virtual DOM的前端渲染和后台直出</li>
<li><strong>需要关注的问题</strong>：前后端框架选择、模板渲染机制、构建打包、区分渲染和直出的方式</li>
</ul>
</li>
</ul>
<h3 id="跨终端设计与实现"><a href="#跨终端设计与实现" class="headerlink" title="跨终端设计与实现"></a>跨终端设计与实现</h3><h4 id="native、web、hybrid三者的区别"><a href="#native、web、hybrid三者的区别" class="headerlink" title="native、web、hybrid三者的区别"></a>native、web、hybrid三者的区别</h4><p><strong>native应用特点</strong></p>
<ul>
<li>优点<ul>
<li>原生系统Native API的支持，如访问本地资源、相机API等</li>
<li>资源在打包安装时完成，节省用户使用时的流量</li>
<li>可针对不同平台特性进行用户体验优化</li>
<li>运行速度快、性能好，可使用原生Native动画库</li>
</ul>
</li>
<li>缺点<ul>
<li>开发成本高，兼容性差，尤其Android机型</li>
<li>维护成本高，用户必须手动下载更新，历史版本也需要维护</li>
<li>上线时间不确定，一般需要通过应用商店的审核</li>
<li>版本更新慢，更新时需要用户重新下载安装包</li>
<li>应用界面的内容不可被搜索引擎检索</li>
</ul>
</li>
</ul>
<p><strong>web应用特点</strong></p>
<ul>
<li>优点<ul>
<li>开发成本低，使用前端开发技术即可</li>
<li>跨平台和终端，基于浏览器或WebView运行</li>
<li>部署方式简单、快捷，无需用户安装</li>
<li>用户总能访问到最新版本，迭代速度快</li>
<li>内容可被搜索引擎检索</li>
</ul>
</li>
<li>缺点<ul>
<li>浏览体验无法超越Native应用</li>
<li>消息推送、动画等实现方式相对Native实现方式较差</li>
<li>不能调用设备的原生特性，如无法访问本地资源、相机API等</li>
</ul>
</li>
</ul>
<p><strong>Hybrid应用特点</strong></p>
<ul>
<li>优点<ul>
<li>开发成本较低，可以使用前端开发技术，甚至可以自动添加Native外壳来实现独立移动端应用</li>
<li>跨平台和终端，内容网页可基于浏览器或WebView运行</li>
<li>拥有与Web应用相同的快速迭代特性</li>
<li>部署方式简单、快捷，只更新Web资源即可</li>
<li>可支持实现离线应用</li>
<li>可通过JSBridge调用设备的系统级API，如访问本地资源、相机API等</li>
<li>原生应用版本迭代和Web功能迭代互相独立也可以相互结合</li>
<li>不同性能需求的功能可以选择性使用Native或Web实现</li>
<li>内容可被搜索引擎检索</li>
<li>借助于MNV*的开发模式可以更接近Native应用的用户体验</li>
</ul>
</li>
<li>缺点<ul>
<li>部分机型兼容相对Native较差，但比Web应用体验好很多</li>
</ul>
</li>
</ul>
<h4 id="Hybrid实现方式"><a href="#Hybrid实现方式" class="headerlink" title="Hybrid实现方式"></a>Hybrid实现方式</h4><p>目前Hybrid应用的开发模式已经突破了开发效率和性能的两大问题，更加适应移动互联网时代产品高迭代速度的需求，而且目前主流的移动端应用均是采用Hybrid的方式来实现。</p>
<ul>
<li>以前端为主的Hybrid实现方式<ul>
<li>以完全的前端模式来开发整个应用，页面开发完成后，通过工具自动打包将前端资源目录装入Native容器中运行。打开应用运行时，除了部分通用的简单逻辑外，内部逻辑全部由打包的Web端代码来实现。</li>
<li>优点：前端开发者可以独立快速构建Hybrid应用，不需要Native开发人员的支持调用Native可以使用开源的JSBridge库来实现。</li>
<li>缺点：Native功能只能通过Web的方式实现，且无法添加复杂的Native功能；即时通信或服务器端推送的应用场景，使用web的方式实现性能较差；与Native的交互方式上也会受到固有开源库实现的限制，无法灵活拓展；无法避免在应用版本更新时重新下载安装应用的问题；Webview的执行性能较差，不适合复杂场景。</li>
<li>适用于中小型需要快速完成开发的应用场景。</li>
</ul>
</li>
<li>Native和Web结合的Hybrid实现方式<ul>
<li>移动端应用中Native和Web功能上的结合开发实现</li>
<li>Native用来实现移动端应用的通用导航菜单、系统UI层、核心界面动效、默认访问页、高效的消息推送或APP大版本的应用更新等，因为这些功能比较稳定，不涉及需要快速迭代的业务逻辑。</li>
<li>Web端用来实现开发迭代速度更快的相关业务层界面逻辑，如某个Native应用内关联的某个Web轻应用。</li>
</ul>
</li>
</ul>
<h4 id="基于localStorage的资源离线和更新技术"><a href="#基于localStorage的资源离线和更新技术" class="headerlink" title="基于localStorage的资源离线和更新技术"></a>基于localStorage的资源离线和更新技术</h4><p>在Hybrid应用开发时，常常需要在离线的情况下打开页面或为了让Hybrid页面应用加载启动更快，避免长时间等待资源加载过程中造成页面空白的出现。使用资源的离线缓存技术能加快页面启动时的载入速度。</p>
<ul>
<li><strong>ServiceWorker的资源离线与更新</strong>：目前兼容性很差，暂不考虑</li>
<li><strong>localStorage资源离线缓存与更新</strong>：将JavaScript、CSS文件缓存到localStorage，根据版本号判断是否读取本地缓存资源。</li>
<li><strong>基于增量文件的更新方式</strong>：通过比较不同版本就可以只加载不同版本的增量文件，但同时需要在服务器端每次新版本发布时维护多个增量文件来适应不同的旧版本更新的需要。<ul>
<li><strong>基于文件代码分块的增量更新机制</strong>：基于文件内容分块chunk算法进行增量更新，节省资源的量取决于块的大小和内容变化的块序号分布。</li>
<li><strong>基于编辑距离的增量更新机制</strong>：计算获取两个文件对比变化时每个字符的操作步骤，将操作步骤作为增量文件下载，在浏览器端进行代码的运算更新。</li>
</ul>
</li>
</ul>
<h4 id="Native与Web结合的Hybrid资源离线和更新技术"><a href="#Native与Web结合的Hybrid资源离线和更新技术" class="headerlink" title="Native与Web结合的Hybrid资源离线和更新技术"></a>Native与Web结合的Hybrid资源离线和更新技术</h4><ul>
<li>通常Native应用启动时会主动拉取线上web离线包版本，然后与本地保存的版本进行对比，如果没有更新则不做操作。</li>
<li>如果本地离线包需要更新或本地没有离线包在，则会去离线包服务器拉取最新的离线包或者拉取增量离线包到本地，然后解压合并到本地的指定离线包目录下。</li>
<li>当有用户访问目标页面时，Native应用会先检查该文件地址映射到的离线包本地目录中的文件。<ul>
<li>如果有内容则直接读取并加载；</li>
<li>否则线上拉取静态资源到页面上执行解析；</li>
<li>同时通知Native应用去拉取最新的离线包资源，这样当下次请求目标页面时Webview就可以读取到本地离线目录中的内容了。</li>
</ul>
</li>
<li>增量包的计算方法与localStorage的增量文件计算方法类似，如何根据两个离线包计算增量包的算法也和计算差量文件的算法类似。</li>
</ul>
<h4 id="资源覆盖率统计"><a href="#资源覆盖率统计" class="headerlink" title="资源覆盖率统计"></a>资源覆盖率统计</h4><ul>
<li>在增量包生成过程中，如果某个旧版本的用户使用率很小或接近0，就可以考虑后面不再对这个版本生成增量包，并让这部分用户直接拉取最近的全量包，避免在版本发布较多时线上有过多的历史增量包版本存在。</li>
<li>统计方法：后台统计上报版本号，每次PV统计时带上版本号。</li>
</ul>
<h4 id="Hybrid开发时需要考虑的其他问题"><a href="#Hybrid开发时需要考虑的其他问题" class="headerlink" title="Hybrid开发时需要考虑的其他问题"></a>Hybrid开发时需要考虑的其他问题</h4><ul>
<li>Hybrid性能问题：Hybrid的WebView存在HTML的DOM渲染和操作较慢的性能问题。可尝试调用Native原生控件来弥补这一劣势。</li>
<li>前端技术栈的其他应用实现：如Native编译技术、桌面应用开发</li>
</ul>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>告别51</title>
    <url>/goodbye51/</url>
    <content><![CDATA[<p><strong>51信用卡</strong>是我入职的第一家公司，前端开发也是我的第一份工作。从2017年6月开始实习算起，也在公司待了一年多，在很多同事眼中也是个老员工了。这一年多来我也是见证了公司的起起伏伏，从飞速扩张到上市到人员结构优化，感想真的太多了。  </p>
<span id="more"></span>

<p>我见到了很多套路，也学到了很多反套路；待过很简单很轻松的项目组，也待过很累很难的项目组；见过同事们一起谈笑风生，也见过因为一些矛盾而大吵三天的场面。幸好研发部门还都是比较单纯的一群人，心机还不算多，对我这种小绵羊性格的还算友善。从校园到社会都感觉不到过渡，完全是两个世界，我知道我现在体会到的只是冰山一角，所以我还要努力让自己变得成熟、强大。正所谓好记性不如烂笔头，打算把这些重要的东西抓紧记下来。</p>
<br/>

<h2 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h2><ul>
<li><strong>2017-06-15 ：入职51实习，进入金融组</strong></li>
<li>2017-06-20 ：进入案件管理系统项目组</li>
<li><strong>2017-07-24 ：金融组分离，转至后台组</strong>  </li>
<li>2017-08-10 ：进入工程平台业务线（陀飞轮、NX-SERVICE）</li>
<li><strong>2017-11-30 ：实习生转为校招生</strong></li>
<li><strong>2018-03-05 ：后台组分离，转至后台业务组。</strong><ul>
<li>离开工程平台业务线（陀飞轮、NX-SERVICE）</li>
<li>离开案件管理系统项目组；</li>
<li>加入后台业务组，进入运营业务线（顶天、金融渠道）。</li>
</ul>
</li>
<li><strong>2018-07-01 ：毕业，签订劳动合同生效。</strong></li>
<li>2018-08-16 ：进入享读创新项目。</li>
<li><strong>2018-08-21 ：前端组织架构大调整，转至产品运营业务组，工作项目不变。</strong></li>
<li><strong>2018-10-26 ：离职</strong></li>
</ul>
<br/>

<h2 id="点滴感悟"><a href="#点滴感悟" class="headerlink" title="点滴感悟"></a>点滴感悟</h2><ul>
<li>做什么事都要趁早，不能一拖再拖，改掉拖延症。</li>
<li>业务压力大时要学会调剂自己，同时也要去尝试沟通；</li>
<li>不能光埋头做业务，要抽时间去提升、拓展自己的能力；</li>
<li>记笔记、写博客、写文档是个好习惯，要坚持下去；</li>
<li>要学会去管理时间，多做规划，不能节奏一团糟；</li>
<li>谨言慎行，质问他人前先自己思考、向前辈请教。</li>
<li>多和前辈聊天、谈心，不能自己闷着钻牛角尖。</li>
<li>要时刻有危机感，想办法把自己提升到不可替代的位置。</li>
<li>要多去思考怎么样去提升自己来改变现状，而不是一味要求别人来改变；</li>
<li>要多去关注组内的发展建设，看到组内存在的问题要积极想办法去解决；</li>
<li>在团队中，一定要要重视代码规范，要统一；</li>
<li>每个系统都有价值，对待每个系统都要带有责任心、摆正心态；</li>
<li>要沉浸到项目中，提出自己的见解，面向用户编程，而不是面向需求编程；</li>
<li>任何事都要通知到位，要多和团队沟通；</li>
<li>多去换位思考，站在不同角度去分析项目、产品、工作、团队及公司决策；</li>
</ul>
<br/>

<h2 id="工作总结"><a href="#工作总结" class="headerlink" title="工作总结"></a>工作总结</h2><h3 id="团队工作"><a href="#团队工作" class="headerlink" title="团队工作"></a>团队工作</h3><ul>
<li>加入后台组组委会，协助组内推动代码规范，组织codeReview，管理组内财务，维护组内wiki。</li>
<li>加入性能优化专题小组，研究并整理理论层面、代码层面及典型场景下的优化方案。</li>
<li>辅助、指导非前端开发人员学习并构建前端项目，与其他技术组互相学习，并产出文档：<ul>
<li>2018-06-01 ~ 2018-07-13：指导并协助基础测试组测开人员开发NBTms项目(自动化测试平台)。</li>
<li>2018-05-28 ~ 2018-10-26：指导并协助后台运营组后端人员开发票券后台系统。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="案件管理系统"><a href="#案件管理系统" class="headerlink" title="案件管理系统"></a>案件管理系统</h3><p>时间：2017-06-20 ~ 2018-01-10</p>
<h4 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>公司内部后台系统。系统分为订单列表、案件来源、案件管理、名单库、调查监控四个大模块，每个模块包含了若干页面。反欺诈业务人员能集中查看各类详细数据，快速查出高风险订单与重要案件，利用标签、收藏夹、统计等功能高效整理数据，同时，不同角色操作权限的严格控制保证了反欺诈业务的规范性。</p>
<h4 id="工作内容"><a href="#工作内容" class="headerlink" title="工作内容"></a>工作内容</h4><ul>
<li>2017-06-20 ~ 2017-07-11：中途接手，独立完成两期需求。由于是老项目，前后端不分离，使用jQuery+bootstrap。</li>
<li>2017-07-12 ~ 2018-01-10：独立完成项目整体的重构，并完成后续的三期大版本迭代工作。使用vue + vuex + webpack + less + <a href="https://51nb.github.io/miox-doc/">miox(公司内部)</a> + 内部组件库。</li>
<li>2018-03-05：由于组织架构调整，交由其他组维护。</li>
</ul>
<h4 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h4><ul>
<li>独立开发、中途接手、完成重构。</li>
<li>角色分配、权限控制功能较为复杂。</li>
<li>对重要信息展示方式方面要求较高。</li>
<li>技术栈：vue + vuex + webpack + less + <a href="https://51nb.github.io/miox-doc/">miox(公司内部)</a> + 内部组件库。</li>
</ul>
<h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>这是我的启蒙项目。这是我入职以来接触的第一个项目，先是在学长的带领下维护老系统，不久就开始对其进行整体重构工作。期间我经历了完整的项目流程，接触到了公司的各种优秀框架，这些对于我来说是一种全新的体验。学长也是很耐心的教我使用各种工具、框架，带我接触项目，也日常检查我的代码，指出可以优化的地方，教我如何自主学习，养成良好的开发习惯，提高各方面的能力。在学长及后端大哥的帮助下，很快适应了，沟通能力和代码能力得到了飞速的提升，并如期完成了项目。完成了一个月的重构工作后，我也算是走出了新手村。在不断的请教和学习下，我对公司的前端体系有了基本的了解，对后台模板代码有了较深的理解，对项目管理也有了大体的认知。</p>
<hr>
<h3 id="数据研发平台"><a href="#数据研发平台" class="headerlink" title="数据研发平台"></a>数据研发平台</h3><p>时间：2017-08-10 ~ 2018-03-03</p>
<h4 id="项目介绍-1"><a href="#项目介绍-1" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>公司内部工程平台相关系统。数据研发平台是结合公司的实际应用场景自研的一个集中式的任务调度系统。具备调度、即席查询、数据导入导出、权限与容量管理、流式计算、监控与报警等功能。它能解放平台开发、平台运维的精力，并解决用户的以下痛点：1、化繁为简，减少配置；2、自动化IDE，方便开发调试；3、版本化的任务管理；4、统一任务和数据的视图；5.资源报表与统计；6、支持多种任务类型。</p>
<h4 id="工作内容-1"><a href="#工作内容-1" class="headerlink" title="工作内容"></a>工作内容</h4><ul>
<li>2017-08-10 ~ 2017.09.22：独立开发完成第一个简单版本，实现一些基本功能。</li>
<li>2017-10-10 ~ 2018-03-03：与另外两个搭档合作开发完成整个系统。我主要负责各类任务的可视化管理、各类任务调度配置、任务依赖关系管理等功能。</li>
<li>2017-12-22 ~ 2018-03-03：在数据研发平台被完全替代前，独立维护数据研发平台的前身-Tourbillon，配合数据研发平台的上线进行修改及维护。</li>
<li>2018-03-03：由于组织架构调整，交由其他组维护。</li>
</ul>
<h4 id="要点-1"><a href="#要点-1" class="headerlink" title="要点"></a>要点</h4><ul>
<li>协作开发，新启项目。</li>
<li>对于数据的可视化程度要求较高。</li>
<li>项目规模很大，对团队协作能力要求较高。</li>
<li>任务比较繁重，对个人抗压能力要求较高。</li>
<li>技术栈：vue + vuex + webpack + less + element UI + codemirror + echarts + vis.js + miox + 内部组件库。</li>
</ul>
<h4 id="感悟-1"><a href="#感悟-1" class="headerlink" title="感悟"></a>感悟</h4><p>这是我接手的第二个项目，比案件管理系统要复杂得多，并且不像案件管理系统已经趋于稳定了，它需要我从无到有的开始开发、磨合，是对我的一个很大的考验。这需要我考虑到很多东西，与产品、后端探讨项目设计中的各种问题。这也我是第一次与其他同事协同开发整个前端，第一次进项目会议室体验封闭式开发，为了各种bug焦头烂额，为了赶进度加班加点。由于代码非常复杂，又是协作开发，对代码质量及规范、团队合作、项目沟通、时间管理等方面有了更深刻的感悟。也学到了不少黑科技，收货颇丰。</p>
<hr>
<h3 id="NX-SERVICE"><a href="#NX-SERVICE" class="headerlink" title="NX-SERVICE"></a>NX-SERVICE</h3><p>时间：2017-11-20 ~ 2018-03-03</p>
<h4 id="项目介绍-2"><a href="#项目介绍-2" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>公司内部工程平台相关系统。NX-SERVICE是工程平台部整个部门统一数据接口服务平台，用户可以进行检索、接口权限申请、接口配置及接口测试等。对于用户来说，此系统可以通过配置化的方式自动生成数据调用接口来减少新增接口的开发工作量，还可以保障业务方数据调用的稳定性，降低维护成本；对于平台来说，NX-SERVICE的数据仓库模型和计算服务的能力输出，可以完善整个数据服务链路的闭环，也便于做好数据出口的权限控制。</p>
<h4 id="工作内容-2"><a href="#工作内容-2" class="headerlink" title="工作内容"></a>工作内容</h4><ul>
<li>2017-11-20 ~ 2017-12-07：独立完成第一个大版本。</li>
<li>2018-03-03：由于组织架构调整，交由其他组维护。</li>
</ul>
<h4 id="要点-2"><a href="#要点-2" class="headerlink" title="要点"></a>要点</h4><ul>
<li>独立开发，新启项目。</li>
<li>后端第一次接触web开发，需要我去配合与协助纠正。</li>
<li>技术栈：vue + vuex + webpack + less + codemirror + miox + 内部组件库。</li>
</ul>
<h4 id="感悟-2"><a href="#感悟-2" class="headerlink" title="感悟"></a>感悟</h4><p>经过在数据研发平台项目组中一段时间的总结沉淀，我懂得了如何去加强沟通，代码方面要注重可复用性、可维护性与规范性。由于后端刚接触web开发，所以在共同钻研的过程中，我对于前后端合作也是有了更多感受与想法，很多踩到的坑都是宝贵的经验。这个项目算是对我的一个考核，考核我在之前的项目锻炼中，能力到底有没有真正的产生质的飞跃，总结出来的经验能不能真正的用到实际场景中。最后项目顺利上线，我对自己的努力结果还是挺满意的。</p>
<hr>
<h3 id="金融渠道管理后台"><a href="#金融渠道管理后台" class="headerlink" title="金融渠道管理后台"></a>金融渠道管理后台</h3><p>时间：2018-03-08 ~ 2018-10-26</p>
<h4 id="项目介绍-3"><a href="#项目介绍-3" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>对内也对外的系统。外部渠道方只能查看有权限的数据，内部人员则可以利用本系统来管理所有渠道、查看各渠道报表数据、计算结算金额及给外部渠道方设置权限。业务人员可以直观得看到渠道效果，帮助他们分析数据，思考出最大利益的投放方案，来提高拉新、增加转化率。</p>
<h4 id="工作内容-3"><a href="#工作内容-3" class="headerlink" title="工作内容"></a>工作内容</h4><ul>
<li>2018-03-08 ~ 2018-10-26 ：中途接手，独立完成所有大小需求。</li>
<li>2018-07-24 ~ 2018-09-23 ：项目整体大优化，解决性能瓶颈。</li>
</ul>
<h4 id="要点-3"><a href="#要点-3" class="headerlink" title="要点"></a>要点</h4><ul>
<li>独立开发，中途接手，完成重构。</li>
<li>项目接手后，发现了许多历史遗留bug及可优化点，由于耦合性过强，整改任务还是比较艰巨的。</li>
<li>技术栈：vue + vuex + webpack + less + vue-router + element UI + 内部组件库。</li>
</ul>
<h4 id="感悟-3"><a href="#感悟-3" class="headerlink" title="感悟"></a>感悟</h4><p>这个项目接手后，发现了许多问题及可优化点：由于组件库混用导致本地调试控制台出现了大量报错、某些依赖包版本过低兼容性差、大量代码严重冗余、复用性差、耦合性过强、可扩展性差、没有遵守组内统一规范等等。整体优化改动很大，相当于是重构，需求又一直在迭代，需要经过严谨的测试才能发布上线，而且项目人员又少，缺少产品和测试。尽管整改难度大，但我仍坚持接受这个挑战，抽出空余时间理解整个项目，与业务方沟通说明优化方案，一点点修改整个框架，抽出通用组件，重写逻辑杂乱的页面，同时向专业测试人员请教以完成高质量自测。优化版上线后，性能提升不少，还增加了一些实用小功能，后续开发工作也省了不少时间，结果还是非常满意的，业务方也是赞赏不已，所谓磨刀不误砍柴工嘛。</p>
<hr>
<h3 id="顶天系统"><a href="#顶天系统" class="headerlink" title="顶天系统"></a>顶天系统</h3><p>时间：2018-03-09 ~ 2018-10-26</p>
<h4 id="项目介绍-4"><a href="#项目介绍-4" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>公司内部运营后台系统。集成了渠道素材管理、投放管理、渠道对接管理、应用信息管理、应用包管理(上传apk文件,补丁管理)、渠道费用管理、渠道媒体管理及X项目配置管理等功能模块，能满足营销部门及运营线开发的很多需求。</p>
<h4 id="工作内容-4"><a href="#工作内容-4" class="headerlink" title="工作内容"></a>工作内容</h4><ul>
<li>2018-03-09 ~ 2018-10-26 ：中途接手，对已有功能进行迭代维护。</li>
<li>2018-06-14 ~ 2018-10-26 ：重建素材库，改造成类似网盘的模式，并进行迭代维护。</li>
<li>2018-03-09 ~ 2018-05-28 ：开发补丁包管理模块，并进行迭代维护。</li>
</ul>
<h4 id="要点-4"><a href="#要点-4" class="headerlink" title="要点"></a>要点</h4><ul>
<li>独立开发，中途接手。</li>
<li>技术栈：vue + vuex + webpack + less + vue-router + element UI。</li>
</ul>
<h4 id="感悟-4"><a href="#感悟-4" class="headerlink" title="感悟"></a>感悟</h4><p>顶天是一个比较简单的项目，页面功能简单，逻辑清晰易懂，也许是因为我有经验了吧。很开心的是认识了一个非常优秀的后端，前后端分工很明确，每次需求接口完成都很快，并且都会在wiki上写出一份很详细的接口使用文档，做事也会考虑到很深很远，和他合作效率超高，也从他身上学到了不少品质。</p>
<hr>
<h3 id="享读reRead"><a href="#享读reRead" class="headerlink" title="享读reRead"></a>享读reRead</h3><p>时间：2018-08-16 ~ 2018-10-26</p>
<h4 id="项目介绍-5"><a href="#项目介绍-5" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>公司对外创新项目。享读是一款稍后阅读工具，支持多平台文章收藏与存储。在提供极致阅读体验的同时，你还可以在圈子中阅读朋友收集的优质内容，相互碰撞，得到启发。同时支持知乎、微信公众号、今日头条、豆瓣等全网主流平台文章的收藏与内容的优化排版。</p>
<h4 id="工作内容-5"><a href="#工作内容-5" class="headerlink" title="工作内容"></a>工作内容</h4><ul>
<li>相关H5页面：包括<a href="https://reread.com.cn/#/">官网</a>、文章详情页、个人收藏页、部分壳内页面。</li>
<li>微信小程序：本项目小程序主要做导流用，具备享读基本的分享、阅读功能，包括个人圈子列表页、圈子详情页、圈子成员页、文章详情页。</li>
<li>后台系统：开发并维护两个享读后台系统——享读运营后台、享读文章解析后台。</li>
<li>爬虫工作：承担一部分简单爬虫工作，同时辅助优化一些较复杂的爬取脚本。</li>
<li>Chrome插件：开发在Chrome上可同步、收藏文章的享读插件。</li>
</ul>
<h4 id="要点-5"><a href="#要点-5" class="headerlink" title="要点"></a>要点</h4><ul>
<li>独立开发、新启项目、公司创新项目</li>
<li>H5技术栈：vue + vuex + webpack + sass + vue-router + 内部组件库</li>
<li>后台系统技术栈：vue + vuex + webpack + less + vue-router + 内部组件库</li>
<li>微信小程序技术栈：mpvue + vuex + webpack + less</li>
<li>爬虫技术栈：node + puppetter</li>
<li>chrome插件技术栈：vue + vuex + webpack + sass + element UI</li>
</ul>
<h4 id="感悟-5"><a href="#感悟-5" class="headerlink" title="感悟"></a>感悟</h4><p>由于工作长期都是后台系统，所以我的移动端开发能力是比较薄弱的。幸运的是我又进入了享读项目组，涉及到了小程序、H5、chrome插件甚至爬虫，带我正式进入了移动端的领域。经过这段时间的努力以及各位同事的帮助，终于对移动端的开发有所积累，努力完成了从pc端到移动端的过渡，补全自己在移动端开发方面能力的不足。在这个创新项目组中，虽然一直都在为用户体系、微信审核等忙得焦头烂额，找公司各种人沟通打交道，但是每天都过得很充实，一步一步踩的坑都是非常宝贵的经验。</p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>work</tag>
      </tags>
  </entry>
  <entry>
    <title>告别多技</title>
    <url>/goodbyeLanqb/</url>
    <content><![CDATA[<p><strong>多技</strong>是我入职的第三家公司，在杭州安了家，就在家附近找工作，找到了多技，虽然小公司工资福利没那么好，但是离家近，并且正宗965不加班，想着教育行业总归比较稳吧，公司那时候也在上升期，看不错就去了。奈何互联网公司太不稳定，待了一年，教育行业大整顿，公司受了很大的影响，开始大裁员，裁了半年轮到了我头上，哎😑</p>
<span id="more"></span>


<h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2><ul>
<li>2019-12-25：入职多技，进入鳄鱼学园项目组</li>
<li>2021-01-08：鳄鱼学园项目组解散，进入任务星球项目组</li>
<li>2021-03-17：任务星球项目组解散，进入蓝铅笔项目组</li>
<li>2021-07-08：裁员，正式离职</li>
</ul>
<p>多技后端语言使用的是PHP，服务器上使用docker来部署的各个项目，由于架构原因，还未做到前后端分离，所以每次开发都需要本地启动docker服务，这点比较麻烦，我也尝试过分离，但是奈何碰上教育行业大整顿，才刚开始就结束了。前端主框架是Laravel，看中SEO的页面使用JQuery，其他页面使用Vue，虽然Laravel属于PHP语言，但是上手还是挺容易的，我还整理了一份笔记<a href="/tool-laravel/">《Laravel5.6 - 前端速览》</a>。</p>
<p>因为是美术教育的公司，所以对UI的要求比较高，要加各种好看的动效样式，设计验收要求也都挺高，我前两家公司做后台的比较多，多技也是提升了我CSS和JQuery方面短板。docker和PHP也是第一接触，着实长知识了，公司虽然技术没那么先进，但是挺考验基础能力的。虽然是小公司，技术大牛也是有的，也都很乐意和我解释PHP呀服务器呀这些个原理。氛围很是轻松，我也是第一次见技术组分享会能分享个人感情史、红楼梦、宠物这种的，哈哈哈哈哈哈，真的很有意思，每周五的乐趣。</p>
<p>如果教育行业没有被整顿，我能一直快乐得待在多技，待一行整顿一行，莫非我真是行业冥灯？不过往好处想，国家也是越整顿越好，金融已经整顿的比以前干净多了，教育行业也是，希望我下一家公司可以稳定一些吧！</p>
<br/>

<h2 id="工作总结"><a href="#工作总结" class="headerlink" title="工作总结"></a>工作总结</h2><h3 id="团队工作"><a href="#团队工作" class="headerlink" title="团队工作"></a>团队工作</h3><ul>
<li>参与前端基础建设工作，如规范制定、多技总后台升级等</li>
<li>参与前端技术分享活动，共享自己整理的技术文档</li>
<li>为提高项目组工作效率出谋划策</li>
</ul>
<hr>
<h3 id="鳄鱼学园"><a href="#鳄鱼学园" class="headerlink" title="鳄鱼学园"></a>鳄鱼学园</h3><p>时间：2019-12-25 ~ 2021-01-08<br>技术栈：Laravel + Webpack + JQuery &#x2F; Vue</p>
<h4 id="工作内容"><a href="#工作内容" class="headerlink" title="工作内容"></a>工作内容</h4><ul>
<li>独立负责鳄鱼学园大后台、销售sass的日常需求迭代及维护工作。</li>
<li>和另一位前端同事共同维护鳄鱼学园移动端主站、PC教室端及PC教师端。</li>
</ul>
<h4 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h4><p>鳄鱼学园是一个线上美术教育的项目，面向的是4-12岁的少儿群体。家长可以在移动端主站上自主浏览和购买课程，带着小孩在PC教室端进行网络线上课程；老师可以在PC教师端管理学员和课程；销售sass集成了客户资源分配、客户管理、数据统计等功能，销售可以更方便的管理客户；大后台可以协助项目内部人员更加高效的工作。<br>我参与了整站设计标准整改、试听课、排课系统、海外注册登录、资源位管理、成长圈等大大小小的版本迭代，期间也抽出了不少的公共组件，减少了很多冗余代码，也方便日后更好的维护这个大项目。</p>
<hr>
<h3 id="鳄鱼学园简笔画"><a href="#鳄鱼学园简笔画" class="headerlink" title="鳄鱼学园简笔画"></a>鳄鱼学园简笔画</h3><p>时间：2020-02-11 ~ 2021-04-16<br>技术栈：Laravel + JQuery &#x2F; Vue</p>
<h4 id="工作内容-1"><a href="#工作内容-1" class="headerlink" title="工作内容"></a>工作内容</h4><ul>
<li>负责简笔画项目各端的开发工作，包括小程序、移动端主站、PC端主站及后台管理系统</li>
<li>完成了新版简笔画移动端、PC端的开发工作</li>
</ul>
<h4 id="要点-1"><a href="#要点-1" class="headerlink" title="要点"></a>要点</h4><p>鳄鱼学园简笔画是提供免费优质简笔画内容学习的平台，支持图文、视频两种学习方式，目标用户是幼儿园、小学低年级的儿童及他们的父母。<br>本项目由我独立维护，有H5、PC、小程序三端。2020年3月品牌升级，我开发了全新版本的H5和PC端，新版本对比旧版，大大优化了SEO，编写了很多公共组件，各方面都按照规范来，注释也都尽可能的补全了，日后维护高效了很多。</p>
<hr>
<h3 id="任务星球"><a href="#任务星球" class="headerlink" title="任务星球"></a>任务星球</h3><p>时间：2021-01-08 ~ 2021-03-17<br>技术栈：Laravel + Webpack + Vue</p>
<h4 id="工作内容-2"><a href="#工作内容-2" class="headerlink" title="工作内容"></a>工作内容</h4><ul>
<li>主负责任务星球小程序、任务星球总后台</li>
<li>和另一个前端同事共同维护任务星球PC端主站</li>
</ul>
<h4 id="要点-2"><a href="#要点-2" class="headerlink" title="要点"></a>要点</h4><p>任务星球是以经纪服务为核心的一站式设计师接单平台，吸引潜在课程付费用户，满足部分潜在购课用户技能变现的需求。通过经纪模式，为需求方、供应方提供更高效、有品质的专业服务，打造全服务行业安全、高效、可信赖的灵活协作平台。<br>任务星球前期开发时间很短，导致代码质量不是很高，发现了大量历史遗留bug和性能问题，每次需求迭代给的时间也特别少，在有限的时间里，修改了大部分的已知bug，删去了很多冗余代码，在不影响进度的情况下，为项目做了最大程度的优化。</p>
<hr>
<h3 id="知产星球CRM"><a href="#知产星球CRM" class="headerlink" title="知产星球CRM"></a>知产星球CRM</h3><p>时间：2021-01-08 ~ 2021-03-17<br>技术栈：Laravel + Webpack + Vue</p>
<h4 id="工作内容-3"><a href="#工作内容-3" class="headerlink" title="工作内容"></a>工作内容</h4><ul>
<li>完成CRM初版的开发工作</li>
<li>负责CRM日常需求迭代和bug修复工作</li>
</ul>
<h4 id="要点-3"><a href="#要点-3" class="headerlink" title="要点"></a>要点</h4><p>知产星球是提供版权确权、版权监测、维权服务方案的一站式知识产权服务平台。知产星球CRM则是帮助销售有效积累客户、提高销售业绩的客户管理系统，具备客户资源管理、销售过程管理、售后管理、统计分析等功能。<br>独立完成整站的前端开发工作，包括数据、账号、公海、线索、客户五大模块，在保证代码质量、功能满足需求的前提下，经过产品的同意后，主动增加了很多人性化的小功能，帮助销售提高工作效率，减少不必要的工作量。</p>
<hr>
<h3 id="蓝铅笔"><a href="#蓝铅笔" class="headerlink" title="蓝铅笔"></a>蓝铅笔</h3><p>时间：2021-03-17 ~ 2021-07-08<br>技术栈：Laravel + Webpack + Vue</p>
<h4 id="工作内容-4"><a href="#工作内容-4" class="headerlink" title="工作内容"></a>工作内容</h4><ul>
<li>负责蓝铅笔PC站、M站、后台的日常需求迭代和bug修复工作</li>
</ul>
<h4 id="要点-4"><a href="#要点-4" class="headerlink" title="要点"></a>要点</h4><p>蓝铅笔是一个专注绘画、设计的在线学习平台，专业提供优质的艺术类课程培训服务，为画师们提供绘画学习提升、知识经验分享、个人品牌运营服务，并对创作者进行包括绘画技法变现、商业订单扶持、粉丝运营与经纪人管理、绘画作品周边拓展等在内的多维度激励服务。<br>本项目由我和其他同事共同维护，我主要负责PC端主站、M端主站及后台的日常迭代和bug修复，包括一些运营活动页、话题帖子模块新增功能、个人中心提现功能优化等等需求。这是多技公司的核心项目，已经比较稳定，所以工作以小功能迭代和修复为主。</p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>work</tag>
      </tags>
  </entry>
  <entry>
    <title>告别魔蝎</title>
    <url>/goodbyeMoxie/</url>
    <content><![CDATA[<p><strong>魔蝎科技</strong>是我入职的第二家公司，只有一百多人，看起来是小公司，但在业内是很出名的。从2019年2月初入职算起到9月初被抄也只有7个月，公司从蒸蒸日上到轰然倒塌也只是一瞬间啊。我这经历也算是十分稀有了，人生阅历又提高了一个等级。</p>
<span id="more"></span>

<h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2><ul>
<li>2019-02-13 ：入职魔蝎，进入大前端组</li>
<li>2019-06-初：试用期结束，转正</li>
<li>2019-09-06：被带走&#x2F;(ㄒoㄒ)&#x2F;~~</li>
<li>2019-10-16：正式离职</li>
</ul>
<p>说来我和魔蝎也是非常有缘了，投简历时并不知道魔蝎，面试了才发现，老板以前也从51出来，前端主管还是工大学长，还有很多很多工大和51出来的人（面一半让我下次来，过了半小时再让我回去继续面的经历也是和51一样的哈哈）。本身对魔蝎第一印象就不错，技术型公司也比较稳，再加上这奇妙的缘分，我就直接选择了这家公司。</p>
<p>魔蝎主要靠技术吃饭，技术人员比例极高，也是这个原因，技术氛围是相当不错了，不光测试、产品，连运营、项管都懂些基本的开发知识，需求交流起来很是舒服。按人数来说算是一家小公司了，因为人少，所以基建没有那么完善，发布新项目、图片放CDN等都要找运维大哥（都是排着队找运维大哥，太忙了），发布也是简单粗暴得直接操作Jenkins。不过人少也有好处，不同项目总有很多熟面孔，气氛总是很融洽，找人也方便。</p>
<p>也同样是因为人少，魔蝎这边是大前端概念，仅有的iOS小哥、唯二的Android小哥和唯二的UI小姐姐也算前端组，大前端组除了写基本的页面和应用，也做node、RN和爬虫，还做区块链和机器学习等等，一直有尝试新技术，接手的项目类型也是挺多样的，能接触到各种领域，真的是个很好的成长环境。（更加喜欢的是工作之余的扯皮，都是一群有趣的人呀，聊起天来和相声一样）</p>
<p>魔蝎真的是家很温暖的公司呀，回想起9月6日那天就像做梦一样，两百多个警员冲进2楼，带走了我们120个员工，在派出所被扣押了24小时。下午两点多前一秒还赶着写代码，后一秒就被乌泱泱一大片的警员包围了，此处不得不夸一下杭州警方，迅速控制，设备齐全，据说早一个月就制定好了计划，于是全体失联，幸亏老刘警觉5点多就去公司找我。哎…</p>
<br/>

<h2 id="工作总结"><a href="#工作总结" class="headerlink" title="工作总结"></a>工作总结</h2><h3 id="团队工作"><a href="#团队工作" class="headerlink" title="团队工作"></a>团队工作</h3><ul>
<li>参与前端基础建设工作，包括规范制定、base工具库及模板项目的开发</li>
<li>参与前端技术分享活动，为推动前端组技术出谋划策</li>
</ul>
<hr>
<h3 id="魔蝎官网"><a href="#魔蝎官网" class="headerlink" title="魔蝎官网"></a>魔蝎官网</h3><p>时间：2019-02-18 ~ 2019-09-06<br>技术栈：Egg + React + Webpack + Antd </p>
<h4 id="工作内容"><a href="#工作内容" class="headerlink" title="工作内容"></a>工作内容</h4><ul>
<li>负责<a href="https://www.91moxie.com/">公司官网</a>的日常内容更新及维护。</li>
<li>完成了react SSR的升级，优化SEO，显著提高了官网在搜索引擎内的自然排名。</li>
<li>新增使用了若干接口，大大减少了管理官网内容的工作量。</li>
</ul>
<h4 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h4><p>这算是刚进公司接手的新手级项目，展示了公司的产品、特色及动态。接手时是纯静态的，但改动较频繁，经常需要更换banner及动态内容，因此就凸显出了动态配置的重要性，增加接口后事倍功半。且小型项目适合练手，所以这也是第一个升级ssr的项目，大大优化了SEO。</p>
<hr>
<h3 id="开放平台"><a href="#开放平台" class="headerlink" title="开放平台"></a>开放平台</h3><p>时间：2019-02-19 ~ 2019-04-11<br>技术栈：React + Webpack + Antd + bizCharts</p>
<h4 id="工作内容-1"><a href="#工作内容-1" class="headerlink" title="工作内容"></a>工作内容</h4><ul>
<li>完成接手期间开放平台的日常更新维护及小功能迭代</li>
<li>完成3.0大版本升级，包括去除云概念、UI升级、新增若干模块、代码整体优化</li>
</ul>
<h4 id="要点-1"><a href="#要点-1" class="headerlink" title="要点"></a>要点</h4><p>开放平台是供客户公司的开发者使用的平台，致力于帮助客户自主管理业务，功能包括资质审核、产品接入、数据管理、测试服务、账单查询、联系人管理、消息中心等等。开放平台是对外且复杂的一个系统，所以比较重要，3.0的升级由我和另一同事一起完成，除了对模块、流程及UI进行了大调整外，对整体代码也进行了优化和规范，在提高业务处理效率的同时，提升了代码质量，规避了很多风险。</p>
<hr>
<h3 id="魔蝎SDK-H5"><a href="#魔蝎SDK-H5" class="headerlink" title="魔蝎SDK-H5"></a>魔蝎SDK-H5</h3><p>时间：2019-04-15 ~ 2019-09-06<br>技术栈：React + Webpack</p>
<h4 id="工作内容-2"><a href="#工作内容-2" class="headerlink" title="工作内容"></a>工作内容</h4><ul>
<li>4月中到8月初期间，协助修改H5相关问题。</li>
<li>8月初正式接手此项目，负责解决SDK H5相关bug及小功能修改。</li>
</ul>
<h4 id="要点-2"><a href="#要点-2" class="headerlink" title="要点"></a>要点</h4><p>moxie SDK是公司非常重要的一个项目，sdk-h5是采集用户信息的入口，此项目通过界面引导用户授权各平台来帮助获取各种可用信息。sdk-h5由于流程复杂、页面数量大且涉及到的项目成员众多，是个需要非常谨慎对待的庞大项目。所以这个项目的流程是非常规范的，也是比较磨练开发人员，每次改动都必须考虑到所有情况。这个项目经手过很多人，搞懂流程及代码也着实费了我不少精力。</p>
<hr>
<h3 id="魔链授权"><a href="#魔链授权" class="headerlink" title="魔链授权"></a>魔链授权</h3><p>时间：2019-04-27 ~ 2019-05-21<br>技术栈：React + Webpack + Antd </p>
<h4 id="工作内容-3"><a href="#工作内容-3" class="headerlink" title="工作内容"></a>工作内容</h4><ul>
<li>从零开发魔链授权项目</li>
<li>负责魔链授权项目的维护及迭代</li>
</ul>
<h4 id="要点-3"><a href="#要点-3" class="headerlink" title="要点"></a>要点</h4><p>魔链授权项目的目的是在SDK数据授权过程中让用户选择是否将采集结果上链，使用魔蝎的魔链产品，能让授权采集过程更加高效与安全，也是为C端产品线提前铺路。此项目需要与魔蝎SDK-H5、开放平台及魔链进行联调，开发难度也体现在这一点上，中间还涉及到与sdk-h5的数据加解密及传递信息，也算是有点复杂的一个项目了。</p>
<hr>
<h3 id="区块链可信建模平台"><a href="#区块链可信建模平台" class="headerlink" title="区块链可信建模平台"></a>区块链可信建模平台</h3><p>时间：2019-05-13 ~ 2019-09-06<br>技术栈：Egg + React + Webpack + Antd + ECharts</p>
<h4 id="工作内容-4"><a href="#工作内容-4" class="headerlink" title="工作内容"></a>工作内容</h4><ul>
<li>与另一同事协作从零开发并完成整个系统，使用了SSR框架，我主要负责“首页”、“我的项目”、“使用教程”、“数据上传”及“模型构建”模块。</li>
</ul>
<h4 id="要点-4"><a href="#要点-4" class="headerlink" title="要点"></a>要点</h4><p>魔蝎可信建模平台是一项基于区块链技术作为底层数据隐私保护，方便客户提供自有数据与魔蝎大数据风险指标联合建模，并对模型进行全生命周期管理的一站式平台。平台包括数据上传、模型构建、安全训练等功能。此项目图表数量多、数据量大、参数多、关联性强，我们在图表基本功能完善的前提下，提出并完成了许多性能、交互方面的优化点。</p>
<hr>
<h3 id="设备指纹SDK-JS"><a href="#设备指纹SDK-JS" class="headerlink" title="设备指纹SDK-JS"></a>设备指纹SDK-JS</h3><p>时间：2019-07-08 ~ 2019-09-06<br>技术栈：Webpack + CryptoJS + JSEncrypt </p>
<h4 id="工作内容-5"><a href="#工作内容-5" class="headerlink" title="工作内容"></a>工作内容</h4><ul>
<li>SDK js版本：独立开发设备指纹SDK的JS版本，主要功能是收集上报web端的事件、设备硬件、浏览器、物理加速度及方向等信息。</li>
<li>设备指纹报告页（React&#x2F;Webpack&#x2F;Antd）：独立开发报告页供内部及客户查阅，内容包括iOS、Android和H5三大平台的原始数据信息及分析结果。</li>
</ul>
<h4 id="要点-5"><a href="#要点-5" class="headerlink" title="要点"></a>要点</h4><p>设备指纹sdk能收集硬软件多维信息，生成能有效对抗黑产的唯一设备ID，实现终端设备上的各类风险检测、行为分析，有效侦测模拟器、刷机改机、团伙作弊等欺诈行为，有效对抗网络爬虫、虚假交易等恶意行为。我负责的js版本主要是尽可能收集并上报web端的多重信息以提高SDK针对各类风险设备及环境的识别率，实时防御营销活动作弊、刷榜刷单等欺诈行为，护航客户的营销ROI增长。</p>
<hr>
<h3 id="AI引导页"><a href="#AI引导页" class="headerlink" title="AI引导页"></a>AI引导页</h3><p>时间：2019-07-24 ~ 2019-09-06<br>技术栈：React + Webpack + Antd </p>
<h4 id="工作内容-6"><a href="#工作内容-6" class="headerlink" title="工作内容"></a>工作内容</h4><ul>
<li>负责AI辅助认证APP内置H5引导页的开发</li>
</ul>
<h4 id="要点-6"><a href="#要点-6" class="headerlink" title="要点"></a>要点</h4><p>使用AI辅助认证APP只需开启无障碍功能，即可自动认证，而本项目是内嵌在APP中的H5引导页，提示用户当前AI套餐认证过程中会出现的页面，防止用户因为没有耐心而关闭退出。此项目为简单的静态页面。</p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>work</tag>
      </tags>
  </entry>
  <entry>
    <title>备忘录-车车篇</title>
    <url>/life-experience-car/</url>
    <content><![CDATA[<p>成为社畜后，车车还是挺需要的，蓝牌摇了好几年了，着实摇不到，于是买了电车。就我这手气，这篇下次更新估计得好多年后了，祝我早日摇到车牌吧🙏🏻。其他方面的经验点击看这篇汇总文章-<a href="/life-experience/">《社畜的生活备忘录》</a>吧~</p>
<span id="more"></span>

<h2 id="特斯拉韭菜指南"><a href="#特斯拉韭菜指南" class="headerlink" title="特斯拉韭菜指南"></a>特斯拉韭菜指南</h2><blockquote>
<p>我们买特斯拉主要是因为蓝牌摇不到，绿牌在杭州也不限号，还能省油费，特斯拉样子也好看，目前开下来挺香，电费可太便宜了，日常车子的开销很少很少，特斯拉技术也是挺牛的，还是不错的。</p>
</blockquote>
<h3 id="关于买车"><a href="#关于买车" class="headerlink" title="关于买车"></a>关于买车</h3><ul>
<li><strong>2021年3月7日下单定金</strong><ul>
<li>定车之前可以先摸进一个车友群，没有朋友推的话，可以去找卖特斯拉配件的大淘宝店要群，群里情报很多，薅羊毛啊买保险啊买配件啊都可以少踩很多坑</li>
<li>如果可以等到车博会的话，最好是车博会上下单，会送很多东西</li>
<li>试驾记得提前预约，不然要等很久</li>
<li>下单前问有没有礼品，万一有呢哈哈哈</li>
<li>选择商场的门店下单可以拿到商场的卡，比如我们在杭州的城西银泰下的单，就拿到了一张金卡，有一些折扣和停车优惠</li>
<li>下单后销售会拉群，会告诉你后续的各种流程，这块体验还是很不错的，基本上不用操心</li>
<li>如果小区能装充电桩，订单下完就可以去买啦，周期还挺长的</li>
</ul>
</li>
<li><strong>2021年3月17日提车</strong><ul>
<li>3月15日订单就匹配到了，匹配到后一两天就可以去交付中心提车啦</li>
<li>验车我就不讲了，攻略找找很多，太长了</li>
<li>我交付中心定了龙膜s玻璃膜全车3278元，建议提前几天找几家靠谱贴膜店问问，贴的不咋地还贵，踩雷💣</li>
<li>保险的话都差不多，听说新手选平安，5952元，我们又加了乘客险什么的，总共算下来6451元，定之前也可以问问有没有礼品，万一有呢哈哈哈</li>
<li>提车是会送棒球帽和雨伞的，一定要向他们要，不然不会给</li>
<li>保险办完是即时生效的，可以安心开回家~</li>
</ul>
</li>
<li><strong>2021年3月22日上牌</strong><ul>
<li>验车上牌后才可以做车辆外观的改动，包括贴膜，别着急动哦</li>
<li>需要提前几天联系群里的车务，最好两个人去，到了之后联系车务，一人排队车检，一人去交资料，省时省力</li>
<li>可以在车管所现场“50选1”，也可以提前在交管12123APP上选号，我们嫌麻烦，就直接现场选了，时间很紧张，号码都还可以，幸运的选到了手机尾号✌️</li>
<li>记得带上静电贴，证件到手后，把合格标志一贴就可以走啦</li>
</ul>
</li>
</ul>
<h3 id="关于膜"><a href="#关于膜" class="headerlink" title="关于膜"></a>关于膜</h3><ul>
<li>玻璃膜建议贴，不是很贵，能一定程度的防晒，基本贴上就不会换了；</li>
<li>隐形车衣有钱就贴，TPU材质中档的都得一万多，而且蹭坏的话补车衣钱也很贵，贫穷的我价格劝退；</li>
<li>改色膜看个人，比较便宜，五千多质量就已经很好了，差不多三年一换，喜欢的话可以去贴；</li>
<li>我去的官方贴膜门店不咋地，个人建议找找那种只做贴膜的店，客流量大，那水平也不会差，还便宜；还有种省钱的办法就是淘宝买膜，然后找家靠谱的店帮忙贴；</li>
</ul>
<h3 id="关于ETC"><a href="#关于ETC" class="headerlink" title="关于ETC"></a>关于ETC</h3><ul>
<li>省事的话微信支付宝可以直接线上申请，但是听说如果是异地通行卡以后要变更会比较麻烦，我们就打算去银行办了，也都差不多，银行还能帮忙安装</li>
<li>我们选的了工行，提前打电话去问，现在ETC机子紧张，电话问了好几家都没机子，可以留个号码等一两个礼拜到货后就会来联系</li>
<li>记得在玻璃膜贴完后再搞ETC，膜贴完要过一两个礼拜才能贴东西</li>
</ul>
<h3 id="关于羊毛"><a href="#关于羊毛" class="headerlink" title="关于羊毛"></a>关于羊毛</h3><ul>
<li>多问问有没有礼物，不要不好意思，会哭的孩子有奶吃，比如下订单、付保险、提车的时候</li>
<li>保险买好后下APP，多瞧瞧活动，比如平安好车主APP，前12个月每个月都可以领东西，可以换免费洗车券、玻璃水这种</li>
<li>如果最终还是选择了在交付中心买膜（虽然个人不推荐），稍微扯扯就能送很多东西，脸皮不能薄，送了我垫子、停车牌和后视镜防雨膜</li>
<li>提车礼不能忘！棒球帽和雨伞在官网卖的还是很贵的，提车没拿的话还可以找下单时候的销售补，会邮寄到家</li>
</ul>
<h3 id="关于充电"><a href="#关于充电" class="headerlink" title="关于充电"></a>关于充电</h3><ul>
<li>去在自带地图上找到超充站点后开始导航，就会提前预热电池，到了之后扫车位后巨大的二维码，输入导航上充电站的验证码就能停进去充电了，插上充电器开始计费，拔掉结束计费，在特斯拉官网上可以付钱，⚠️注意电充好之后5分钟之内要开走哦，超时占用费6块4&#x2F;每分钟无上限。详情可以看这个链接：<a href="https://mp.weixin.qq.com/s/YyVkU0Mvl_zvZZa22zmkOA">https://mp.weixin.qq.com/s/YyVkU0Mvl_zvZZa22zmkOA</a></li>
<li>第三方充电站大部分也都是能用的，我就不细讲了，都差不多，步骤很简单</li>
</ul>
<p>需要提前问问小区物业可不可以安装以及能否安装380v充电桩，然后估算下要多长的电缆，电缆很短的话可以考虑闲鱼淘一淘原装的，自己找师傅买电缆，能省很多钱，像我家有56米，直接官网买比较划算，因为电缆真的贵。</p>
<ul>
<li><strong>⚡️3月9日下单购买充电桩</strong><ul>
<li>下单后会拉个群，会发来带特斯拉公章的充电桩安装申请登记表，将这个表彩打出来5份，在物业那边盖章</li>
<li>下载网上国网APP，电动车 &#x3D;&gt; “充电桩报装”，按提示上传文件照片即可，没多久国网就会打电话来确认</li>
</ul>
</li>
<li><strong>⚡️3月16日国网装电表</strong><ul>
<li>我13号国网APP提交的申请，16日就来了，记得叫上物业一起，准备好物业盖好章的申请登记表和电子版充电桩检测报告</li>
<li>真心夸一夸国网，效率超高，靠谱，服务好，还是免费的！</li>
</ul>
</li>
<li><strong>⚡️3月18日充电桩勘测</strong><ul>
<li>记得也要加上物业一起，确认桩装在哪个位置，得物业同意</li>
<li>勘测完后才会申请发桩，发货周期大概一周多</li>
<li>中间发生了小插曲，本来买的8000的三代充电桩，搞活动出了6000元40m二代桩，31号的时候果断换了，4月3日桩就到了</li>
</ul>
</li>
<li><strong>⚡️4月12日花了半天装完了充电桩</strong><ul>
<li>电缆超出免费范围16米，每米70，多花了1120，虽然贵，香还是香，在家充电就是方便，电费还便宜</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>备忘录-公司篇</title>
    <url>/life-experience-company/</url>
    <content><![CDATA[<p>被朋友戏称为“行业冥灯”的我，职场经历算是比较丰富，这篇里就记录下我的一些在工作方面的经验，比如落户、裁员等。其他方面的经验点击看这篇汇总文章-<a href="/life-experience/">《社畜的生活备忘录》</a>吧~</p>
<span id="more"></span>

<h2 id="应届生本科落户公司"><a href="#应届生本科落户公司" class="headerlink" title="应届生本科落户公司"></a>应届生本科落户公司</h2><blockquote>
<p>我当时是准备先迁户口到公司，然后在杭州房子买完后再迁到自己的房子里去，如果你们迁户口也是为了买房，顺便的时候就可以要个集体户口的户主页，省得后面迁去家里的时候再去要。备注：本篇仅适用于户口在老家与51信用卡集体户口，不同公司不同时间可能不同。</p>
</blockquote>
<p><strong>Step1：档案调到我司</strong><br>学校将档案寄到人才市场后在<a href="http://rsdl.zjrc.com/personlogin.do">浙江人才人事代理网站</a>查询，如有记录（很慢）就能进行Step2</p>
<ul>
<li>我们学校（浙工大）是把档案直送到人才市场的，7月15日左右送出，8月6日左右能查到</li>
<li>如果是外省邮寄，差不多10个工作日就能录入了</li>
<li>有问题或者长时间都没到可以打 0571-88392911 问</li>
</ul>
<p><strong>Step2：提交材料去小营派出所办理《准予迁入证明》</strong></p>
<ol>
<li>毕业证、身份证、劳动合同的原件及复印件</li>
<li>户口本原件与复印件，或户籍证明</li>
<li>杭州市社会保险参保证明原件（彩打）：<ul>
<li>支付宝搜索“杭州人力社保” &#x3D;&gt; 办社保，选择参保类型“个人专用”</li>
<li>需要一个月以上记录且显示到账才行，到账一般会有一两个月延迟，比如7月的社保大概8月底到账。</li>
</ul>
</li>
<li>《无房证明》（彩打）：<a href="http://hz.zjzwfw.gov.cn/">浙江政务服务网</a> &#x3D;&gt; (热点服务)个人住房信息查询</li>
<li>落户协议、同意落户证明、人事代理协议复印件：等档案到人才市场后找外服取</li>
</ol>
<table>
<thead>
<tr>
<th>单位</th>
<th>社会保险管理服务局</th>
<th>小营派出所</th>
</tr>
</thead>
<tbody><tr>
<td>地址</td>
<td>杭州市上城区清吟街123号社保大楼</td>
<td>杭州市上城区翰林街107号</td>
</tr>
<tr>
<td>电话</td>
<td>12333</td>
<td>0571-87800209</td>
</tr>
<tr>
<td>服务时间</td>
<td>周一至周五 9:00-17:00</td>
<td>周一到周六 8:30-12:00 14:30-17:30</td>
</tr>
<tr>
<td>备注</td>
<td></td>
<td>周六办理落户相关业务限号，上午下午各限30位。</td>
</tr>
</tbody></table>
<ul>
<li>【跑两趟】交完材料要再过几天才能拿到《准予迁入证明》，拿到就能进行Step3或者Step4了</li>
<li>如果户籍是浙江省内户口的话这不就不用Step3了，可以直接Step4</li>
</ul>
<p><strong>Step3：回户籍所在地派出所出具《户口迁移证》</strong><br>本人持《准予迁入证明》、户口本原件，也可让在同一户口本上的人代办。<br>拿到《户口迁移证》就能进行Step4了。</p>
<p><strong>Step4：小营派出所落户</strong><br>持《户口迁移证》（需要的话及户口簿原件办理落户。最后拍个身份证（穿深色上衣）就over啦~</p>
<br/>

<h2 id="万一不幸被裁员了"><a href="#万一不幸被裁员了" class="headerlink" title="万一不幸被裁员了"></a>万一不幸被裁员了</h2><ul>
<li><strong>互联网公司常见裁员原因：</strong>公司赚不着钱、项目被砍、公司上市（上市前为了报表好看会扩招）、公司被收购、考核、结构优化</li>
<li><strong>常见危机人员：</strong>试用期员工 &gt; 应届生 &gt; 已婚未育女员工 &gt; 老员工 &gt; 非“刚需”岗位（如算法、测试）</li>
</ul>
<h3 id="checklist"><a href="#checklist" class="headerlink" title="checklist"></a>checklist</h3><ol>
<li>不要立马签离职协议，先把该问的都问清楚，尽量晚点签，去找一同被裁的，大家好交流互助。</li>
<li>谈的时候记得录音，谈完后达成的条件都要让HR写下来。</li>
<li>首先要搞清楚赔偿几个月及赔偿规则，也去问下其他人都赔了几个月，情报很重要。</li>
</ol>
<ul>
<li>常听说的“N+数字”里面的N是工作年限，工作年限的零头满6个月算1，不满6个月算0.5。</li>
<li>公司如果提前30天通知职工，赔N就可以了，如果没有提前30天的，就是工龄补偿加一个月工资作为代通知金，也就是N+1。我这次碰到的N+2，就是 工龄补偿 + 代通知金 + 年终奖补偿。（<a href="https://www.sohu.com/a/150454105_367376%EF%BC%89">https://www.sohu.com/a/150454105_367376）</a></li>
<li>赔偿都有上限，如果工资很高的话问问会不会超出上限。</li>
<li>赔偿应该是全薪的，并且一次性发放。（有些公司会分月发赔偿，还不是全薪的，这两点都是不合法的）</li>
<li>孕期、产期、哺乳期内的女员工们要是碰上黑心企业要裁你们，那可是违法的，硬气点</li>
</ul>
<ol start="4">
<li>如果裁员时间是国庆或者春节这类长假的月份，问清楚最后一个月的工资是按月算还是按日算。<ul>
<li>十月份工作日少，无良公司会钻漏洞省不少钱。</li>
<li>按天算的话，工资要 &#x2F; 21.5 * 这个月的实际工作日，国庆节假期算没有工资。</li>
<li>尽量不要在有假期的月份请事假。如10月31号走，是满月，就不能按天计算，否则可以少发我们6.5天工资。</li>
</ul>
</li>
<li>最好签主动离职，否则档案里不好看，可能会对下一份工作有影响。</li>
<li>公积金断了没事（除非需要公积金贷款），社保要多争取下，断了会对买房、医保有影响，公司不让步的话可以自己淘宝代缴，本地户口还可以去社保局办理个人缴纳，离职后记得在月初把社保交上。</li>
<li>如果对电脑有感情了可以去问下能不能买，不过得问清楚会不会拆你硬盘，要拆的话那就很不划算了。</li>
<li>如果是公司的集体户口的话，要去找外服，一般是两个月内迁出，如果两个月内没找到迁出地的话可以去人才中心临时挂靠下。一定要问清楚这个哦，可能会产生挂靠费。</li>
<li>如果不明白的可以打律师咨询电话，该提仲裁还是要大胆的去提。</li>
<li>离职后如果不打算打工了，可以去了解下失业金。</li>
</ol>
<br/>

<h2 id="如果不幸公司被抄了"><a href="#如果不幸公司被抄了" class="headerlink" title="如果不幸公司被抄了"></a>如果不幸公司被抄了</h2><blockquote>
<p>魔蝎被抄圈内应该是人尽皆知了，事发突然，作为第一家被抄的公司，也是jc叔叔眼中的典型了。枪打出头鸟，那时我才知道，原来魔蝎在业内名气是这么响的，我居然也是重大案件里的犯罪嫌疑人，也会被刑事问询并且扣押24小时，真的像做梦一样。</p>
</blockquote>
<ul>
<li>当时是两百多位便衣JC叔叔涌进公司，迅速控制住了我们公司一百二十余人，没收手机电脑，就这么陷入了全体失联状态。所有人被分批送去不同派出所，我们那批是8人，男女分开关押。为了安全，是需要取下鞋带、皮筋、眼镜等物品的，外套别脱，里面很冷。环境也是非常压抑的，密闭房间，无法知道时间，时刻被三位以上的人员盯着，不允许讲话及大幅度动作</li>
<li>拘传不得超过24小时，所以如果没犯法也不用怕，最多不玩手机24小时。审讯室里积极配合就好，JC叔叔也不是穷凶极恶的人，也不要有心理负担，没犯法的不会留案底（期间有个叔叔看我太瘦了问我有没有吸毒，看完守护解放西后觉得叔叔可能是认真的Ծ‸Ծ）</li>
<li>被扣押后是不允许与外界联系的，但是如果家门钥匙只有一把且在你包里的话是可以求情联系下的。虽然是失联了，但只要家属一去公司看下就知道情况了，可以一个个打电话给各个派出所问人在哪里，如果找到了可以饭点送（仅限）面包进去。所以家属把人接到后好好带着吃几顿大鱼大肉安抚安抚</li>
<li>如果24小时还没放人，就要等48小时或者取保候审，然后准备好请律师，可能会有点麻烦了</li>
<li>出去以后不要理会那些想要采访的人，不信谣不传谣，不要向别人透露本案信息，一切以官方消息为准</li>
<li>公司被抄基本上就凉了，就准备找工作吧。公司的U盾、资产是被封着的，所以工资、五险一金都是结案后才能补发，而调查时间基本都是要好几个月。接着员工成立工会，可以与相关部门争取离职证明</li>
<li>处理五险一金很重要，连续3个月才构成断缴，最好两个月后去电话咨询下办理停保的时间及统一办理停保的方案。</li>
<li>最后，慎重选择公司，看到几家网贷公司被抄后都要求员工退还所有工资，太惨了</li>
</ul>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>备忘录-安家篇</title>
    <url>/life-experience-home/</url>
    <content><![CDATA[<p>买房装修真的太不容易了，处处都是坑，一步一个坑的，都是含着泪撒着钱踩下去的，这值得我专门开一篇。其他方面的经验点击看这篇汇总文章-<a href="/life-experience/">《社畜的生活备忘录》</a>吧~</p>
<span id="more"></span>

<h2 id="看房"><a href="#看房" class="headerlink" title="看房"></a>看房</h2><ul>
<li>可以的话还是选择<strong>知名</strong>房地产的一手房，杭州房子摇号可以微信搜下“摇号管家”</li>
<li>如果要买二手房，一定要多找多看，多找几个中介看房，等看得多了再决定要哪个小区</li>
<li>如果要考虑孩子教育问题的话最好还是西湖区，学区不会太差，将来要换房也好脱手</li>
<li>拆迁房要谨慎考虑，很多房子政府拆不起。如果非要拆迁房，大马路边的容易被拆</li>
</ul>
<h2 id="定房"><a href="#定房" class="headerlink" title="定房"></a>定房</h2><blockquote>
<p>备注：我买的二手房，所以以下建议仅适合二手房</p>
</blockquote>
<ul>
<li>最好是找小中介定房子，扯一扯能省下好多万中介费，三百万以下的房子两万就能搞定</li>
<li>全款还是贷款就看自己了，预算充足的话推荐贷款多买几套，房价跌不了</li>
<li>合同好好看，一定要讲清楚什么时候交房及延期赔偿，尤其是出租屋，比较麻烦</li>
<li>签合同过户什么的中介都会帮忙安排，过户的时候记得打扮打扮，要和前房东合影存档</li>
<li>最好买个车位，车位费也一直在涨</li>
</ul>
<hr>
<h2 id="装修"><a href="#装修" class="headerlink" title="装修"></a>装修</h2><blockquote>
<p>备注：我是找的装修公司，且原先为自如出租房</p>
</blockquote>
<h3 id="找施工队"><a href="#找施工队" class="headerlink" title="找施工队"></a>找施工队</h3><ul>
<li>最好是找认识的私人施工队，比装修公司便宜，有矛盾也好解决，老家的也可以包住宿请过来装修，主要是还没听说过非常靠谱的装修公司。如果要定装修公司的话早点挑，蹲着他们搞活动（比如双旦）</li>
<li>优先考虑自己找的店和工人，装修公司推荐的店和工人，水平都层次不齐，太无语，我家好多地方装的很差😑</li>
<li>最好先去看下装修公司的样板房和正在装修的房子，顺便看下公司大不大，靠不靠谱，装到一半跑路了就麻烦了</li>
<li>签合同的时候要白纸黑字写好会有哪些增项、增项都怎么算、日后怎么算延期赔偿、是否包含节假日及周末、保洁是否为公司承担，管理费比较好砍价，并且多要点赠品，比如送个全屋美缝呀优惠券啥啥的，尤其是增项，很容易在这方面吵架，一些没良心的就会在后期和你要很多不合理的增项款</li>
<li>尾款一定一定一定要装修验收完、质保有效、公司没倒闭、延期赔偿扯清楚了，再去付，装修基本上都会延期的，我那家公司就装到一半倒闭了😑</li>
<li>建议找个懂装修、靠谱的第三方监理，或者装摄像头，一定要多盯着工地，水电都让有经验的人来验收</li>
<li>一定一定要当心装修队的项目经理，别把他们想太好，拖欠工人工资、不管工地的经理很多很多，很少有良心的</li>
<li>多问问爸妈，爸妈经验丰富还会砍价</li>
</ul>
<h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><ul>
<li>可以去酷家乐看看自己喜欢的风格给设计师做参考，可以省去很多改稿时间</li>
<li><strong>网线</strong>也要设计好，把墙里的网线全部换成最好的，同时可以考虑下使用MESH还是AC+AP方案，尤其是大户型</li>
<li>最好设计阶段就把冰箱、洗衣机等大件电器定下来，不然就像我家那样发现用小冰箱都会撞着门呜呜呜</li>
<li>小户型不要搞美式这种花的风格，拿不定主意的话，色调多用白、灰、原木就是北欧简约了，不会很难看</li>
<li>插座多留点，特别是卫生间、阳台和厨房，保不准以后要多装些智能电器，比如洗碗机、智能马桶、内衣洗衣机、洗鞋机等等</li>
<li>对照下楼上楼下的户型结构，以免日后由于漏水、排污管等问题起冲突</li>
<li>早点加业主群，平时多窥屏看看小区房子有什么问题，装修阶段少讲话当个小透明，不然装修吵到邻居了会在群里被艾特骂的</li>
</ul>
<h3 id="施工阶段"><a href="#施工阶段" class="headerlink" title="施工阶段"></a>施工阶段</h3><ul>
<li>大致流程：砌墙 → 水电 → 泥木 → 墙饰面处理 → 成品、灯具、五金安装，一般是60个工作日完工，我们家是3月20日开工，9月12日才完工验收，延期了一个多月。</li>
<li>拆旧的时候一定要保护好窗户轨道和地漏，我家地漏全堵了呜呜呜，多花了好多钱修</li>
<li>水要走顶，多检查卫生间、露台的防水、堵漏情况</li>
<li>多在下完暴雨的时候看看哪里有堵漏，比如露台墙、各房窗户沿</li>
<li>建议装个松下新风，城市空气质量堪忧。地暖看闲钱多不多了，中央空调的话个人建议是150平以下没必要，平方不大的反而耗电</li>
<li>瓷砖推荐做个美缝，不然时间久了会很丑</li>
<li>建议把弱电箱换一下，顺带把家庭组网整顿一下，后悔我家没搞，弱电箱和网络都一塌糊涂</li>
<li>要和物业打好关系，因为我们小区入住率比较高，装修时间很严格，经常要去找物业，还花了很多冤枉钱</li>
<li>不要信保安的话，保安流动性很大，都不懂装修，好几个保安经常拦我家的材料和工人，很气</li>
<li>露台问题，先去问物业能不能封再动工，或者等装修完了再去封，阳光房还算违建的</li>
<li>找个懂装修的老师傅或者第三方监理定期验收，而且一定要脸皮厚！不满意让他们重做重买！硬气点，搞装修吵架正常的，不能被欺负</li>
</ul>
<h3 id="置办家电"><a href="#置办家电" class="headerlink" title="置办家电"></a>置办家电</h3><blockquote>
<p>备注：以下建议适合我这种精打细算省钱的，土豪可以不看</p>
</blockquote>
<ul>
<li>家具优先实体店买，淘宝上容易买到次品，最好是蹲活动买，我是正巧碰上新门店开业打7折，挺划算。也可以去苏州蠡口、家博会这种地方逛一逛</li>
<li>买电器淘宝没问题，国庆活动力度不大别买，还是得等双十一，我就吃了亏；或者去闲鱼买，有很多代理商，卖的很便宜。</li>
<li>据说双十一电信200M一年只要六百多，我是去都市水乡分店办了69&#x2F;月的，奇怪的是另一家门店说没有69的，说法还不一样，要多跑几家，碰碰运气多问问</li>
<li>理智消费，很多东西个人觉得没必要买或者买太好，有些东西利润太高，完全可以找小店以低价买到同等质量的，比如窗帘（我可以推荐朋友家的店~）</li>
<li>必备神器：激光测距仪、无痕钉、美纹纸、折叠梯、小榔头、小推车</li>
</ul>
<h3 id="花费清单，仅供参考"><a href="#花费清单，仅供参考" class="headerlink" title="花费清单，仅供参考"></a>花费清单，仅供参考</h3><blockquote>
<p>约 364394</p>
</blockquote>
<ul>
<li>装修公司总费用 - 208000</li>
<li>物业装修押金（1000次年拿回）、代办(400) - 1400</li>
<li>拆旧 - 7612 </li>
<li>松下新风 - 13000</li>
<li>包阳台 - 12856</li>
<li>被举报违建拆阳光房费用 - 200 </li>
<li>通下水道7次(960)、门窗修补(300)、拆旧误拆水龙头(300) - 1560 </li>
<li>泥沙、木料、油漆、水泥、垃圾搬运费 - 4000</li>
<li>木工增加项 - 1500</li>
<li>方太油烟机灶具、止回阀、天然气开通 - 5029</li>
<li>松下暖风机、林内热水器、安装费 - 7625</li>
<li>灯具 * 7、安装 - 2197</li>
<li>曲美，包括2床具1客厅三件套4桌椅1按摩沙发2背景等木质家具 - 60600</li>
<li>冰箱洗衣机空调 - 13992</li>
<li>淘宝家具、装饰及日用品 - 10497</li>
<li>小电器 - 6526</li>
<li>阳台洗衣池 - 1800</li>
<li>窗帘 - 2500</li>
<li>又包露台 - 3500</li>
</ul>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>备忘录-婚礼篇</title>
    <url>/life-experience-wedding/</url>
    <content><![CDATA[<p>婚礼和装修真的是两大最坑的行业，结婚愁的我头都要秃了，最近几年结婚的小姐妹也多，趁我还记得，赶紧记下来。我们的各种成片都记录在公众号（微信号：zlt_lws）上面，可以去看看当做参考哦，有<a href="https://mp.weixin.qq.com/s/Y7Oxhos_RUHZu60zBbNBKw">婚纱照</a>、<a href="https://mp.weixin.qq.com/s/2BtmbLpvbqg0lM8L7F7veg">白色视觉成片</a>、<a href="https://mp.weixin.qq.com/s/4UsulHtCyq-qOGW8SKL3fQ">米光成片</a>等等</p>
<span id="more"></span>

<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul>
<li>建议差不多要谈婚论嫁的时候，就去逛逛婚博会，摸进当地备婚群，情报相当重要，能知道当地哪家口碑好，也能防止被宰，砍价也有个数。婚博会或者小红书上都能找到当地备婚群。而且备婚群太有意思了，八卦聚集地🍉</li>
<li>不要草率领证哦，备婚期间分手的也很多，领证后再分手就亏大了。最理想的是等了解过对方父母和家境和都做过体检再决定要不要领证</li>
<li>婚纱照、钻戒、四大、婚车、酒店、喜糖都可以去婚博会上定，确实很实惠，羊毛也不少，越早定越好</li>
<li>比较推荐的顺序是，婚庆、婚礼管家 &#x3D;&gt; 酒店 &#x3D;&gt; 四大 &#x3D;&gt; 婚纱照、婚纱、婚车</li>
<li>婚庆行业水很深，坑也特别多，而且销售都特别强势，定的时候，<strong>不要轻易付钱</strong>，能迟点付就迟点付，能不全款就不全款，都是可以留尾款的，定金也要问清楚能不能退</li>
<li>备婚建议起码提前一年开始，如果是节假日，起码提前一年半</li>
</ul>
<h2 id="领证"><a href="#领证" class="headerlink" title="领证"></a>领证</h2><ul>
<li>普通日子的话直接去民政局就行，大日子需要提前预约，可以在支付宝也可以电脑上<a href="http://jhyy.mzt.zj.gov.cn/">浙江省婚姻登记网上预约系统</a>预约，电脑上预约会不卡一些，我是5.21领的证，蹲零点去预约的，很好抢</li>
<li>带上3张2寸（53mm宽，35mm高不含白边）登记照、户口本、身份证，如果证件上的信息不是最新的，最好提前打电话去问问民政局，省得万一过不了还要当天去补办</li>
<li>婚检不用当天做，婚前婚后都可以，不过检查项比较基础，想要全面的还是得自费去医院检查</li>
<li>很推荐找跟拍，或者找朋友帮忙录像，是很有纪念意义的一天~</li>
</ul>
<h2 id="婚庆"><a href="#婚庆" class="headerlink" title="婚庆"></a>婚庆</h2><ul>
<li>建议第一步找婚庆和婚礼管家，问问有没有合作酒店、有没有四大合作价，多找几家看看。去问问周围亲朋好友都找的哪些婚庆，有没有踩雷的。有意向的婚庆，一定要实地去看看他们的布置，不要只看视频，视频照片太有欺骗性。一般满顶是3万5，可以以这个价格去判断这家婚庆的价位合不合理。</li>
<li>婚礼管家因人而异，找不找都可以。如果家里能帮忙的亲戚姐妹比较多，那就没必要花这钱。如果找不到能帮忙的又比较懂的亲友，又想省事的，可以找个好点的婚礼管家。</li>
<li>如果现场看过这家婚庆布置的还可以，打听来口碑也还行，那么可以让他们先出设计稿再付定金，总之不要太快付钱</li>
</ul>
<h2 id="酒店"><a href="#酒店" class="headerlink" title="酒店"></a>酒店</h2><ul>
<li>定酒店之前，问清楚，有没有进场费和强制设备费，音响灯光架子能不能用自己找的婚庆的，婚庆几点能进场，有没有化妆间，送不送婚房和甜品（一般桌数多一点都会送），开瓶费和服务费和酒水都怎么算，备桌怎么算，婚礼客房有没有优惠价，当天的服务员是外包的还是酒店自己的员工（很多外包服务员会偷东西），全部搞清楚了，能砍的都砍了，能送的都答应送了，让他们白纸黑字写下来，再付定金</li>
</ul>
<h2 id="四大"><a href="#四大" class="headerlink" title="四大"></a>四大</h2><ul>
<li>找口碑好的，建议指定到个人，备婚群和亲友都打探下，时间充裕的话再对比下婚博会、店庆和婚庆那边的价格</li>
<li>越早定越便宜，基本上每年都会涨价，热门的那些四大基本上每年都要涨六七百，要是朋友婚礼上看中某个四大了，没订婚也可以先交定金保留价格。而且优秀的四大档期要靠抢，我提前一年很多火的四大都已经没档期了</li>
<li>个人认为，四大重要性：跟拍 &gt; 跟妆 &gt; 摄像 &gt; 司仪。跟拍是最重要的，照片是看的最多的，贵的摄像师拍出来的确实好看；其次是跟妆，优秀的跟妆时间会把控的很好，好看的妆造拍出来都不用P；然后是摄像，视频太长，很少会拿出来看，但是MV或者快剪可以发朋友圈；司仪预算多的可以请贵一点的，一般气氛活跃的，搞笑点的不会有什么大问题。</li>
<li>关于双机位还是单机位，还是看个人预算，预算充裕，婚庆布置搞的比较好的，跟拍摄像都请双机位，很值，尤其我是午宴，双机位省时间，还能多拍很多照片和视频，新郎新娘角度都能拍到，我是很满意的</li>
<li>跟妆的话，要先试妆再付定金，也要注意看她手脚快不快。关于跟妆助理，如果跟拍摄像请的贵的话，要加！值！能给新郎倒腾倒腾，会帅气很多，都花了大价钱请了跟拍摄像，也不差这500块钱了😂</li>
<li>司仪的话，如果有特殊要求，一定要多提几遍，司仪很容易忘记，我那场一些小要求，大部分他都忘了😭不过气氛还好，朋友反映也不错，也就没追究了。还有音响问题，早点和他对接，把设备型号发他，督促他早点来现场调试音响，很重要。</li>
<li>四大真的一分钱一分货，我的双机位成片出来很明显，主机位拍的比副机位好看太多了</li>
</ul>
<h2 id="婚纱照"><a href="#婚纱照" class="headerlink" title="婚纱照"></a>婚纱照</h2><ul>
<li>主要还是看个人的预算，也不用太追求大城市的摄影店，小县城也有拍的好看的婚纱摄影店和工作室，很多贵的店面，只是因为牌子响、租金贵、婚纱贵，并不代表拍出来会很好看。而且讲真，影楼拍出来都差不多。</li>
<li>一定要优惠、要求全谈完了再付定金，不要一下子付全款，尾款也是能晚点付就晚点付，钱付了再谈优惠就谈不下来了</li>
<li>相框相册可以都不要，让销售换精修或者抵钱，婚纱照水分很多，砍价余地一般都很大，谈的时候不要表现的很喜欢，价钱砍不下来就让他们多送东西</li>
<li>同一家店的摄像师水平都参差不齐，所以能指定就指定，能一对一拍就一对一拍</li>
<li>如果定的跟拍跟妆也是这家的，可以直接指定他们来拍，顺便看看他们的水平怎么样</li>
<li>如果需要raw格式的文件，要在拍之前就说好，不然不会留</li>
<li>送的登记照拍完就去要底片，只会留一张精修完的，我那家就是不去要不会给的，他们直接删了</li>
<li>拍内景的时候，可以穿同一套衣服换很多个场景拍，后期能修出来好多种风格的照片</li>
<li>外景一定要大晴天去拍！阴天拍的后期都拯救不了🤷🏻‍♀️</li>
<li>选片的时候，如果发现拍的很差，当场就要求重拍，不然等修图了就不让重拍了，不能心软</li>
<li>不要加精修🙅🏻‍♀️真的很喜欢，冷静点，加个几张就够了，或者磨着让他们送精修，不要一时冲动加个几千的精修，也不要被店员用入册不够这种理由给骗了</li>
</ul>
<h2 id="婚纱"><a href="#婚纱" class="headerlink" title="婚纱"></a>婚纱</h2><ul>
<li>省事选租婚纱，省钱选买婚纱，租的话基本都要四千以上，去江苏虎丘买的话，买买也差不多的价钱，甚至更便宜。主纱只穿一次的话建议租，毕竟太大了不好收，洗洗也贵，两头穿两次的话可以考虑买，不过主纱不建议淘宝，淘宝质量都挺差。秀禾敬酒外景，这些小件的衣服，租和买都是可以的，淘宝上买也还好。</li>
<li>不要一下子付定金，也千万不要直接付全款，看几家再定。婚纱店款式基本都差不多，有喜欢的款可以发图片问问老板有没有货。而且主纱远看也看不出价位来，预算不多的话可以不用租很贵的。</li>
<li>可以看看婚纱店里的跟妆，直接定店里的跟妆会省事一些，试妆定妆可以直接穿着婚纱，不然定妆还要两头联系，有些婚纱店还不允许带跟妆来。我跟妆就是定的婚纱店老板娘，还不错的。</li>
<li>如果想自己买秀禾，又懒得去虎丘，可以问问婚纱馆有没有清仓的，像乡下办的，没仪式只吃顿饭的可以这样买一件，我乡下穿的那件买来只要200</li>
</ul>
<h2 id="婚礼小经验"><a href="#婚礼小经验" class="headerlink" title="婚礼小经验"></a>婚礼小经验</h2><ul>
<li>对钻石没有执念的，想省钱的，强烈安利莫桑石，比真钻还要闪，一克拉一百多真的香，婚礼上用还不怕丢</li>
<li>像我这样有刘海的妹子，可以提前半年考虑婚礼上要不要刘海，不想要刘海的话要早点开始把刘海留长</li>
<li>早点开始锻炼减肥，尤其练腰腹，要把小肚子收一收，这样在亲友相机里就是完美的</li>
<li>安利产后束腰裤，我穿鱼尾裙，这条束腰裤把我小肚子收没了，买来以后也能用</li>
<li>当天预告照片修出来后早点发朋友圈，让亲友有图可以发，不然他们照片不修就发出去了</li>
<li>布置家里，必备美纹纸（保护墙面）、泡沫胶、点胶，静电贴喜字、无纺布喜字可以多买点，好看也不怕贴坏</li>
<li>很多东西都可以再1688上批发，又便宜质量又好，比如娃娃“临沂爱丽丝玩具有限公司”、喜字“滨州市睿瑞婚庆用品有限公司”(大喜字非常出片）、泡泡机“汕头市澄海区优久玩具厂”、发箍啪啪圈“义乌市红业饰品有限公司”</li>
<li>婚礼上的奖品，大奖可以少一点，小奖多买点，大家都拿到奖品的话大家都开心。尤其是小孩喜欢的小玩具，还能防小孩无聊到处搞破坏，比如1688上8块钱的游戏机、11块钱的泡泡机、9块钱的液晶写字板、一块多的啪啪圈、两块多的毛绒发箍等等。</li>
</ul>
<blockquote>
<p>小插曲：我准备了很多小玩具本来打算分成40份打包，签到的时候给小孩每人一份的，没想到有一半被误拿到台上当奖品了，还有一半小礼物被以为只要签到就能领小礼物。不过弄巧成拙，签到区人爆满，去签到的人也多了，去的迟的只能拿一块多的小扭蛋，舞台那边呢奖品一下子变多了，气氛变得极为热闹，一直嗨到结束，这些玩具居然大人也都喜欢，抢着要，我也是没想到，很多大人都带着卡哇伊的毛绒发箍和啪啪圈，很有意思。</p>
</blockquote>
<h2 id="花费清单，仅供参考"><a href="#花费清单，仅供参考" class="headerlink" title="花费清单，仅供参考"></a>花费清单，仅供参考</h2><table>
<thead>
<tr>
<th>项目</th>
<th>金额</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>婚纱照</td>
<td>5999</td>
<td>嘉兴经典文苑，5套53张精修<br/>（相册2&#x2F;大照1&#x2F;照片墙2&#x2F;摆台6&#x2F;海报1&#x2F;登记照1&#x2F;婚纱1）</td>
</tr>
<tr>
<td>婚庆布置</td>
<td>34371</td>
<td>嘉善缇纳Tina</td>
</tr>
<tr>
<td>跟拍</td>
<td>5880 + 100路费 &#x3D; 5980</td>
<td>白色视觉，双机位-小黑</td>
</tr>
<tr>
<td>摄像</td>
<td>5280 - 600午宴 &#x3D; 4680</td>
<td>米光，首席双机位-老板</td>
</tr>
<tr>
<td>司仪</td>
<td>2580</td>
<td>阳光司仪阿勇</td>
</tr>
<tr>
<td>跟妆</td>
<td>2860 + 500助理 &#x3D; 3360</td>
<td>简白婚纱，林恩</td>
</tr>
<tr>
<td>婚纱</td>
<td>5200</td>
<td>简白婚纱，主纱秀禾外景敬酒4件，送胸贴晨袍，免租4套伴娘服</td>
</tr>
<tr>
<td>婚车</td>
<td>5080 + 650鲜花套餐</td>
<td>阳光婚车，玛莎拉蒂总裁+S奔驰350，全套车花&#x2F;胸花&#x2F;腕花&#x2F;手捧</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>社畜的生活备忘录</title>
    <url>/life-experience/</url>
    <content><![CDATA[<p>本人记性比较差，所以喜欢记东西，写下来还能给朋友当攻略用。刚毕业那两年经历了很多，当时整理了这篇社畜备忘录，记录了落户、买房、装修、裁员、公司被抄的攻略，但是现在攻略越攒越多，放一篇里就太长了，原文章就被我拆分出去了，分为了以下各种篇章，大家按需浏览吧~</p>
<span id="more"></span>

<ul>
<li><a href="/life-experience-company/">公司篇</a></li>
<li><a href="/life-experience-home/">安家篇</a></li>
<li><a href="/life-experience-car/">车车篇</a></li>
<li><a href="/life-experience-wedding/">婚礼篇</a></li>
</ul>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>node.js的异步IO机制</title>
    <url>/node-asynchronous/</url>
    <content><![CDATA[<h2 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h2><p><strong>单线程</strong>、<strong>异步非阻塞I&#x2F;O</strong>、<strong>事件驱动</strong> 是Node.js的三大闪光点。其中，理解异步非阻塞I&#x2F;O模型是学习node过程中的一大难点。</p>
<span id="more"></span>

<h3 id="什么是I-x2F-O"><a href="#什么是I-x2F-O" class="headerlink" title="什么是I&#x2F;O"></a>什么是I&#x2F;O</h3><p>I&#x2F;O在计算机中指Input&#x2F;Output，也就是输入和输出，分为I&#x2F;O设备和I&#x2F;O接口两个部分。</p>
<ul>
<li>I&#x2F;O接口是CPU和I&#x2F;O设备之间交换信息的媒介和桥梁。由于程序和运行时数据是在内存中驻留，由CPU这个超快的计算核心来执行，涉及到数据交换的地方，通常是磁盘、网络等。</li>
<li>现代计算机系统中配置了大量的外围设备，即I&#x2F;O设备。通常进行如下分类：<ul>
<li>字符设备，又叫做人机交互设备，例如，键盘和显示器为一体的字符终端、打印机、鼠标等。</li>
<li>块设备，又叫外部存储器，用户通过这些设备实现程序和数据的长期保存，如磁盘、光盘等。</li>
<li>网络通信设备。这类设备主要有网卡、调制解调器等，主要用于与远程设备的通信。</li>
</ul>
</li>
</ul>
<h3 id="同步与异步I-x2F-O"><a href="#同步与异步I-x2F-O" class="headerlink" title="同步与异步I&#x2F;O"></a>同步与异步I&#x2F;O</h3><p>由于CPU和内存的速度远远高于外设的速度，所以，在I&#x2F;O编程中，就存在速度严重不匹配的问题。比如要把100M的数据写入磁盘，CPU输出100M的数据只需要0.01秒，可是磁盘要接收这100M数据可能需要10秒，怎么办呢？有两种办法：</p>
<ul>
<li>同步I&#x2F;O：CPU等待，也就是程序暂停执行后续代码，等100M的数据在10秒后写入磁盘，再接着往下执行。</li>
<li>异步I&#x2F;O：CPU不等待，后续代码可以立刻接着执行。<ul>
<li>实现方式1：主动轮询异步调用的结果。</li>
<li>实现方式2：被调用方通过callback来通知调用方调用结果。</li>
</ul>
</li>
</ul>
<blockquote>
<p>同步和异步是一种通信机制，涉及到调用方和被调用方，关注的是I&#x2F;O操作的执行过程及结果的返回方式，不同点在于双方在这两个方面的行为方式。</p>
</blockquote>
<h3 id="阻塞与非阻塞I-x2F-O"><a href="#阻塞与非阻塞I-x2F-O" class="headerlink" title="阻塞与非阻塞I&#x2F;O"></a>阻塞与非阻塞I&#x2F;O</h3><ul>
<li>阻塞I&#x2F;O：调用结果返回之前，该执行线程会被挂起，不释放CPU执行权，线程不能做其它事情，只有等到调用结果返回了，才能接着往下执行</li>
<li>非阻塞I&#x2F;O：在没有获取调用结果时，线程可以往下执行，而不是等待。<ul>
<li>如果是同步的，会通过轮询的方式检查有没有调用结果返回；</li>
<li>如果是异步的，会通知回调。</li>
</ul>
</li>
</ul>
<blockquote>
<p>阻塞和非阻塞是一种调用机制，只涉及到调用方，关注的是I&#x2F;O操作的执行状态，不同点在于请求I&#x2F;O操作后，针对I&#x2F;O操作的状态，调用方的行为方式。</p>
</blockquote>
<h3 id="举个🌰"><a href="#举个🌰" class="headerlink" title="举个🌰"></a>举个🌰</h3><p>故事：老张烧开水。<br>出场人物：老张，普通水壶，会响的水壶。</p>
<ol>
<li>老张把水壶放到火上，立等水开。<strong>（同步阻塞）</strong> </li>
<li>老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。<strong>（同步非阻塞）</strong>     </li>
<li>老张买了把会响笛的水壶。水开之后能发出嘀~~~~的噪音。老张把响水壶放火上，立等水开。<strong>（异步阻塞）</strong> </li>
<li>老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。<strong>（异步非阻塞）</strong></li>
</ol>
<p>所谓同步异步，只是对于水壶而言。<br>普通水壶，同步；响水壶，异步。<br>虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。 </p>
<p>所谓阻塞非阻塞，仅仅对于老张而言。<br>立等的老张，阻塞；看电视的老张，非阻塞。<br>情况1和情况3中老张就是阻塞的，电视放什么他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。</p>
<h2 id="Node-js与异步"><a href="#Node-js与异步" class="headerlink" title="Node.js与异步"></a>Node.js与异步</h2><h3 id="Node为什么要选择异步？"><a href="#Node为什么要选择异步？" class="headerlink" title="Node为什么要选择异步？"></a>Node为什么要选择异步？</h3><h4 id="1、前提条件：JavaScript是单线程的"><a href="#1、前提条件：JavaScript是单线程的" class="headerlink" title="1、前提条件：JavaScript是单线程的"></a>1、前提条件：JavaScript是单线程的</h4><p>JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？<strong>所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</strong></p>
<blockquote>
<p>为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p>
</blockquote>
<h4 id="2、从用户体验角度讲，异步I-x2F-O可以消除UI阻塞，快速响应资源"><a href="#2、从用户体验角度讲，异步I-x2F-O可以消除UI阻塞，快速响应资源" class="headerlink" title="2、从用户体验角度讲，异步I&#x2F;O可以消除UI阻塞，快速响应资源"></a>2、从用户体验角度讲，异步I&#x2F;O可以消除UI阻塞，快速响应资源</h4><ul>
<li>JavaScript是单线程的，它与UI渲染共用一个线程。所以在JavaScript执行的时候，UI渲染将处于停顿的状态，用户体验较差。而异步请求可以在下载资源的时候，JavaScript和UI渲染都同时执行，消除UI阻塞，降低响应资源需要的时间开销。</li>
<li>假如一个资源来自两个不同位置的数据的返回，第一个资源需要M毫秒的耗时，第二个资源需要N毫秒的耗时。<ul>
<li>当采用同步的方式，总耗时为（M+N）毫秒。</li>
<li>当采用异步的方式，总耗时为max（M，N）毫秒。</li>
</ul>
</li>
</ul>
<h4 id="3、从资源分配角度讲，异步I-x2F-O可以让单线程远离阻塞，以更好地利用CPU"><a href="#3、从资源分配角度讲，异步I-x2F-O可以让单线程远离阻塞，以更好地利用CPU" class="headerlink" title="3、从资源分配角度讲，异步I&#x2F;O可以让单线程远离阻塞，以更好地利用CPU"></a>3、从资源分配角度讲，异步I&#x2F;O可以让单线程远离阻塞，以更好地利用CPU</h4><ul>
<li>假设业务线上有一组互不相关的任务需要完成，现行的主流方法有以下两种：<ul>
<li>单线程同步执行：会阻塞I&#x2F;O导致硬件资源和CPU得不到更优的使用。</li>
<li>多线程并发执行：会出现死锁、状态同步等问题。</li>
</ul>
</li>
<li>Node的解决方案<ul>
<li>利用单线程远离多线程的死锁、状态同步等问题。</li>
<li>利用异步I&#x2F;O，让单线程远离阻塞，更好的利CPU。</li>
</ul>
</li>
</ul>
<h3 id="Node如何实现异步I-x2F-O？"><a href="#Node如何实现异步I-x2F-O？" class="headerlink" title="Node如何实现异步I&#x2F;O？"></a>Node如何实现异步I&#x2F;O？</h3><p><strong>事件循环、观察者、请求对象、I&#x2F;O线程池这四者共同构成了Node异步I&#x2F;O模型的基本要素。</strong><br><img src="/image/asynchronous/%E5%BC%82%E6%AD%A5%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="异步流程图"><br>整个实现过程大概更可以描述为：  </p>
<ul>
<li>发起异步请求之后将请求进行封装，封装为请求对象，对请求对象设置参数和回调函数并将请求对象放入线程池，线程池中检查是否有可用线程，当线程可用时执行请求对象的I&#x2F;O操作，并将执行完成的结果放入请求对象中，通知IOCP调用完成并获取完成的I&#x2F;O交给I&#x2F;O观察者。</li>
<li>在libuv中创建主循环开始事件循环，主循环从I&#x2F;O观察者中取出可用的请求对象，在请求对象中取出回调函数和I&#x2F;O结果并调用回调函数。</li>
</ul>
<h4 id="名词解析"><a href="#名词解析" class="headerlink" title="名词解析"></a>名词解析</h4><ul>
<li><p>观察者：事件循环判断是否有事件待执行，就是通过询问观察者，观察者不会主动通知进程，而是进程询问时才返回结果。 </p>
<blockquote>
<p>事件循环是生产者&#x2F;消费者模型。异步I&#x2F;O和网络请求是事件的生产者，这些事件被输送到观察者，事件循环是消费者，从观察者这里取出事件处理。观察者就相当于模型中的缓冲区，生产者不断产生事件放到缓冲区，而消费者从缓冲区里取出事件进行消费。</p>
</blockquote>
</li>
<li><p>libuv：libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎。它是Node.js实现异步的核心。</p>
</li>
<li><p>请求对象：从JavaScript发起调用到内核执行完I&#x2F;O操作的过渡过程中，存在一种中间产物，叫做请求对象。从JavaScript传入的参数和当前方法都被封装在这个请求对象中，其中回调函数则被设置在这个对象的oncomplete_sym属性上。<br><img src="/image/asynchronous/%E8%AF%B7%E6%B1%82%E5%AF%B9%E8%B1%A1.png" alt="请求对象"><br>假设fs.open()，根据指定路径和参数打开文件。在JS发起调用后，JS调用Node的核心模块（lib&#x2F;fs.js），核心模块调用C++内建模块(node_file.cc)，內建模块通过libuv判断平台(是*nix还是win)并进行系统调用。在进行系统调用时，从JS层传入的方法和参数都被封装在一个请求对象FSReqWrap中，请求对象被放在线程池中等待执行。JS立即返回继续下面的操作。</p>
</li>
<li><p>I&#x2F;O线程池：在Node中，JS是在单线程中执行的，但是内部完成I&#x2F;O工作的另有线程池，使用一个主进程和多个I&#x2F;O线程来模拟异步I&#x2F;O。当主线程发起I&#x2F;O调用时，I&#x2F;O操作会被放在I&#x2F;O线程来执行，主线程继续执行下面的任务。I&#x2F;O操作不管是否阻塞，都不会影响JS执行线程的执行。在I&#x2F;O线程完成操作后会带着数据通知主线程发起回调。<br><img src="/image/asynchronous/%E5%A4%9A%E7%BA%BF%E7%A8%8B.png" alt="多线程"></p>
</li>
</ul>
<p><strong>因此，Node.js 的单线程仅仅是指 JavaScript 运行在单线程中，而并非 Node.js 是单线程。</strong></p>
<ul>
<li><p>事件队列：Node.js 在主线程里维护了一个事件队列，当接到请求后，就将该请求作为一个事件放入这个队列中，然后继续接收其他请求。当主线程空闲时(没有请求接入时)，就开始循环事件队列，检查队列中是否有要处理的事件，这时要分两种情况：如果是非 I&#x2F;O 任务，就亲自处理，并通过回调函数返回到上层调用；如果是 I&#x2F;O 任务，就从 线程池 中拿出一个线程来处理这个事件，并指定回调函数，然后继续循环队列中的其他事件。</p>
</li>
<li><p>事件循环 (Event Loop)：在进程启动时，Node会创建一个类似于While(true)的循环，每执行一次循环体的过程称为Tick。每个Tick过程中观察者会查看是否有事件需要处理，如果有就取出事件及其相关的回调函数并执行。然后进入下一个Tick。如果没有事件处理，就退出进程。<br><img src="/image/asynchronous/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt="事件循环"></p>
</li>
<li><p>执行回调：I&#x2F;O执行结束后，会将结果通知IOCP（windows下,linux下epoll），并将线程归还线程池。使用事件循环的I&#x2F;O观察者，如果有已经执行完的I&#x2F;O，则将请求对象加入I&#x2F;O观察者队列中，事件循环再Tick过程中，检测到有I&#x2F;O观察者，则取出其中的请求对象，再取出请求对象中的回调函数执行。</p>
</li>
</ul>
<h4 id="代码模拟"><a href="#代码模拟" class="headerlink" title="代码模拟"></a>代码模拟</h4><p>Node.js 实现异步的核心是事件，也就是说，它把每一个任务都当成 事件 来处理，然后通过 Event Loop 模拟了异步的效果，为了更具体、更清晰的理解和接受这个事实，下面我们用伪代码来描述一下其工作原理 。</p>
<h5 id="【1】定义事件队列"><a href="#【1】定义事件队列" class="headerlink" title="【1】定义事件队列"></a>【1】定义事件队列</h5><p>既然是队列，那就是一个先进先出 (FIFO) 的数据结构，我们用JS数组来描述，如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义事件队列</span></span><br><span class="line"><span class="comment"> * 入队：push()</span></span><br><span class="line"><span class="comment"> * 出队：shift()</span></span><br><span class="line"><span class="comment"> * 空队列：length == 0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">globalEventQueue</span>: []</span><br></pre></td></tr></table></figure>
<p>我们利用数组来模拟队列结构：数组的第一个元素是队列的头部，数组的最后一个元素是队列的尾部，push() 就是在队列尾部插入一个元素，shift() 就是从队列头部弹出一个元素。这样就实现了一个简单的事件队列。</p>
<h5 id="【2】定义接收请求入口"><a href="#【2】定义接收请求入口" class="headerlink" title="【2】定义接收请求入口"></a>【2】定义接收请求入口</h5><p>每一个请求都会被拦截并进入处理函数，如下所示： </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收用户请求</span></span><br><span class="line"><span class="comment"> * 每一个请求都会进入到该函数</span></span><br><span class="line"><span class="comment"> * 传递参数request和response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">processHttpRequest</span>:<span class="keyword">function</span>(<span class="params">request,response</span>)&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 定义一个事件对象</span></span><br><span class="line">    <span class="keyword">var</span> event = <span class="title function_">createEvent</span>(&#123;</span><br><span class="line">        <span class="attr">params</span>:request.<span class="property">params</span>, <span class="comment">// 传递请求参数</span></span><br><span class="line">        <span class="attr">result</span>:<span class="literal">null</span>, <span class="comment">// 存放请求结果</span></span><br><span class="line">        <span class="attr">callback</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; <span class="comment">// 指定回调函数</span></span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 在队列的尾部添加该事件  </span></span><br><span class="line">    globalEventQueue.<span class="title function_">push</span>(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个函数就是把用户的请求包装成事件，放到队列里，然后继续接收其他请求。</p>
<h5 id="【3】定义-Event-Loop"><a href="#【3】定义-Event-Loop" class="headerlink" title="【3】定义 Event Loop"></a>【3】定义 Event Loop</h5><p>当主线程处于空闲时就开始循环事件队列，所以我们还要定义一个函数来循环事件队列： </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事件循环主体，主线程择机执行</span></span><br><span class="line"><span class="comment"> * 循环遍历事件队列</span></span><br><span class="line"><span class="comment"> * 处理非I/O任务</span></span><br><span class="line"><span class="comment"> * 处理I/O任务</span></span><br><span class="line"><span class="comment"> * 执行回调，返回给上层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">eventLoop</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 如果队列不为空，就继续循环</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">globalEventQueue</span>.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 从队列的头部拿出一个事件</span></span><br><span class="line">        <span class="keyword">var</span> event = <span class="variable language_">this</span>.<span class="property">globalEventQueue</span>.<span class="title function_">shift</span>();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 如果是耗时任务</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">isIOTask</span>(event))&#123;</span><br><span class="line">            <span class="comment">// 从线程池里拿出一个线程</span></span><br><span class="line">            <span class="keyword">var</span> thread = <span class="title function_">getThreadFromThreadPool</span>();</span><br><span class="line">            <span class="comment">// 交给线程处理</span></span><br><span class="line">            thread.<span class="title function_">handleIOTask</span>(event)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 非耗时任务处理后，直接返回结果</span></span><br><span class="line">            <span class="keyword">var</span> result = <span class="title function_">handleEvent</span>(event);</span><br><span class="line">            <span class="comment">// 最终通过回调函数返回给V8，再由V8返回给应用程序</span></span><br><span class="line">            event.<span class="property">callback</span>.<span class="title function_">call</span>(<span class="literal">null</span>,result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主线程不停的检测事件队列，对于 I&#x2F;O 任务，就交给线程池来处理，非 I&#x2F;O 任务就自己处理并返回。</p>
<h5 id="【4】处理-I-x2F-O-任务"><a href="#【4】处理-I-x2F-O-任务" class="headerlink" title="【4】处理 I&#x2F;O 任务"></a>【4】处理 I&#x2F;O 任务</h5><p>线程池接到任务以后，直接处理I&#x2F;O操作，比如读取数据库：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理I/O任务</span></span><br><span class="line"><span class="comment"> * 完成后将事件添加到队列尾部</span></span><br><span class="line"><span class="comment"> * 释放线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">handleIOTask</span>:<span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="comment">//当前线程</span></span><br><span class="line">    <span class="keyword">var</span> curThread = <span class="variable language_">this</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 操作数据库</span></span><br><span class="line">    <span class="keyword">var</span> optDatabase = <span class="keyword">function</span>(<span class="params">params,callback</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="title function_">readDataFromDb</span>(params);</span><br><span class="line">        callback.<span class="title function_">call</span>(<span class="literal">null</span>,result)</span><br><span class="line">    &#125;;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 执行I/O任务</span></span><br><span class="line">    <span class="title function_">optDatabase</span>(event.<span class="property">params</span>,<span class="keyword">function</span>(<span class="params">result</span>)&#123;</span><br><span class="line">        <span class="comment">// 返回结果存入事件对象中</span></span><br><span class="line">        event.<span class="property">result</span> = result;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// I/O完成后，将不再是耗时任务</span></span><br><span class="line">        event.<span class="property">isIOTask</span> = <span class="literal">false</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 将该事件重新添加到队列的尾部</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">globalEventQueue</span>.<span class="title function_">push</span>(event);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 释放当前线程</span></span><br><span class="line">        <span class="title function_">releaseThread</span>(curThread)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当 I&#x2F;O 任务完成以后就执行回调，把请求结果存入事件中，并将该事件重新放入队列中，等待循环，最后释放当前线程，当主线程再次循环到该事件时，就直接处理了。</p>
<h4 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h4><p>Node.js通过事件驱动模型实现了高并发和异步 I&#x2F;O，然而也有 Node.js 不擅长做的事情：<br>上面提到，如果是 I&#x2F;O 任务，Node.js 就把任务交给线程池来异步处理，高效简单，因此 Node.js 适合处理I&#x2F;O密集型任务。<br>但不是所有的任务都是I&#x2F;O密集型任务，当碰到CPU密集型任务时，即只用CPU计算的操作，比如要对数据加解密、数据压缩和解压，这时Node.js就会亲自处理，一个一个的计算，前面的任务没有执行完，后面的任务就只能干等着。<br>在事件队列中，如果前面的CPU计算任务没有完成，后面的任务就会被阻塞，出现响应缓慢的情况，如果操作系统本身就是单核，那也就算了，但现在大部分服务器都是多CPU或多核的，而Node.js只有一个Event Loop，也就是只占用一个CPU内核，当Node.js被CPU密集型任务占用，导致其他任务被阻塞时，却还有CPU内核处于闲置状态，造成资源浪费。<br><strong>因此，Node.js 并不适合 CPU 密集型任务。</strong></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>Nodejs实际上只是应用程序层面JavaScript单线程执行，真正I&#x2F;O操作、网络请求、底层API调用都是多线程执行。</li>
<li>事件循环是Node异步I&#x2F;O实现的核心，Node通过事件驱动的方式处理请求，使得其无须为每个请求创建额外的线程，省掉了创建和销毁线程的开销。同时也因为线程数较少，不受线程上下文切换的影响，维持了Node的高性能。</li>
<li>Nodejs具备单线程执行应用程序、异步非阻塞I&#x2F;O的特点，因此适用于I&#x2F;O密集型场景，而并不擅长于CPU计算密集型场景。</li>
</ul>
<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p><a href="https://segmentfault.com/a/1190000012925872">从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理</a><br><a href="https://my.oschina.net/zhangjiawen/blog/1551020?from=timeline&isappinstalled=0">单线程NodeJS的异步I&#x2F;O</a><br><a href="https://blog.csdn.net/pengpengrose0406/article/details/46964595">[读书笔记]深入浅出NodeJS——Node中的异步I&#x2F;O</a><br><a href="https://www.cnblogs.com/onepixel/p/7143769.html">Node.js 事件循环机制</a><br><a href="https://juejin.im/post/5ab367acf265da23a049783e">JS&#x2F;NodeJS中的异步任务与事件环</a><br><a href="https://github.com/zhaoluting/asynchronous/blob/master/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BANode.js.pdf">深入浅出node.js</a>   </p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>puppeteer实战-微信文章爬取调研</title>
    <url>/node-puppeteerWX/</url>
    <content><![CDATA[<h2 id="puppeteer"><a href="#puppeteer" class="headerlink" title="puppeteer"></a>puppeteer</h2><p>Puppeteer是一个Nodejs的库，支持调用Chrome的API来操纵Web，可以很方便的用它来抓取文章。微信公众号文章又是大家阅读量非常大的一个平台，但是想要完美得抓取出公众号文章是相当难的。</p>
<span id="more"></span>

<h2 id="编辑工具"><a href="#编辑工具" class="headerlink" title="编辑工具"></a>编辑工具</h2><p>微信公众号的文章一般是通过如下的富文本编辑器进行编辑，就算是使用了其他第三方的编辑器（如秀米），也是编辑完再复制到后台的，所以只研究后台的这个编辑器就OK了。<br><img src="/image/puppeteer/1-1-1.png" alt="编辑工具"></p>
<h2 id="典型文章"><a href="#典型文章" class="headerlink" title="典型文章"></a>典型文章</h2><ol>
<li>带视频的文章： <a href="https://mp.weixin.qq.com/s/Uw6b7_W_NkCZDIce4Obn6g">https://mp.weixin.qq.com/s/Uw6b7_W_NkCZDIce4Obn6g</a>  </li>
<li>带音频的文章：<a href="https://mp.weixin.qq.com/s/-5oj6Q4qYS0gf5hptNYfjw">https://mp.weixin.qq.com/s/-5oj6Q4qYS0gf5hptNYfjw</a>  </li>
<li>带投票的文章：<a href="https://mp.weixin.qq.com/s/ROlm_YXgmQMC1of7CEojRw">https://mp.weixin.qq.com/s/ROlm_YXgmQMC1of7CEojRw</a>  </li>
<li>带小程序二维码的文章：<a href="https://mp.weixin.qq.com/s/A9UvCji6XJmfusNpSWigFQ">https://mp.weixin.qq.com/s/A9UvCji6XJmfusNpSWigFQ</a>  </li>
<li>特殊视频类文章：<a href="https://mp.weixin.qq.com/s/XPrdTJppD-jVCwuGzdd0Ew">https://mp.weixin.qq.com/s/XPrdTJppD-jVCwuGzdd0Ew</a><br>推送出来是个视频，点进去是篇带视频的文章：<br><img src="/image/puppeteer/1-2-1.png" alt="特殊视频类文章"></li>
<li>分享类文章：  <ul>
<li><a href="https://mp.weixin.qq.com/s/fnVRpI1rvMHDnTZIiMzL-A">https://mp.weixin.qq.com/s/fnVRpI1rvMHDnTZIiMzL-A</a> </li>
<li><a href="https://mp.weixin.qq.com/s/nlR6AzRi1IPnWh0m9M9dcA">https://mp.weixin.qq.com/s/nlR6AzRi1IPnWh0m9M9dcA</a></li>
</ul>
</li>
<li>争议类文章：<ul>
<li><a href="https://mp.weixin.qq.com/safe/dispute?action=info&amp;__biz=MzIxMjgxMDAwOA==&amp;mid=2247485963&amp;idx=1&amp;sn=661d71f440962cebc08594abb124bd20#wechat_redirect">https://mp.weixin.qq.com/safe/dispute?action=info&amp;__biz=MzIxMjgxMDAwOA==&amp;mid=2247485963&amp;idx=1&amp;sn=661d71f440962cebc08594abb124bd20#wechat_redirect</a></li>
</ul>
</li>
</ol>
<h2 id="元素分析"><a href="#元素分析" class="headerlink" title="元素分析"></a>元素分析</h2><h3 id="普通元素"><a href="#普通元素" class="headerlink" title="普通元素"></a>普通元素</h3><ul>
<li>这些看起来很复杂的元素，都是富文本，可以简单理解为带css样式的图片和文字<br><img src="/image/puppeteer/1-3-1.png" alt="普通元素"></li>
</ul>
<h3 id="特殊图片元素"><a href="#特殊图片元素" class="headerlink" title="特殊图片元素"></a>特殊图片元素</h3><ul>
<li>右上角带着类似出口标志的都是带超链接的图片</li>
<li>特征：class&#x3D;”js_jump_icon h5_image_link”<br><img src="/image/puppeteer/1-3-2.png" alt="特殊图片元素"></li>
</ul>
<h3 id="视频元素"><a href="#视频元素" class="headerlink" title="视频元素"></a>视频元素</h3><ul>
<li>特征：class&#x3D;”js_tx_video_container” 嵌iframe的方式</li>
<li>上传视频要求：视频不能超过20M，超过20M的视频可至腾讯视频上传后添加，也可通过添加视频详情页链接以及公众号文章链接插入视频，视频时长不少于1秒，不多于10小时，支持大部分主流视频格式。</li>
<li>小于20MB的视频好像也会转到腾讯视频（如<a href="https://mp.weixin.qq.com/s/VOLKVAIcOqiX-XAv-s3b2w">https://mp.weixin.qq.com/s/VOLKVAIcOqiX-XAv-s3b2w</a> 待验证）</li>
</ul>
<h3 id="音频元素"><a href="#音频元素" class="headerlink" title="音频元素"></a>音频元素</h3><ul>
<li>特征：qqmusic标签，class&#x3D;”db qqmusic_area</li>
<li>上传音频要求：格式支持mp3、wma、wav、amr，文件大小不超过30M，语音时长不超过30分钟</li>
</ul>
<h3 id="投票元素"><a href="#投票元素" class="headerlink" title="投票元素"></a>投票元素</h3><ul>
<li>特征：class&#x3D;”vote_iframe js_editor_vote_card” </li>
<li>嵌iframe的方式加进文章</li>
</ul>
<h3 id="小程序元素"><a href="#小程序元素" class="headerlink" title="小程序元素"></a>小程序元素</h3><ul>
<li>特征：mp-miniprogram标签，class&#x3D;”weapp_display_element js_weapp_display_element”</li>
</ul>
<h3 id="文章链接卡片"><a href="#文章链接卡片" class="headerlink" title="文章链接卡片"></a>文章链接卡片</h3><ul>
<li>公众号可分享原创声明文章：<a href="https://jingyan.baidu.com/article/454316ab126339f7a7c03aae.html">微信公众号如何分享原创声明文章？</a>，分享后网页样式会有所不同。</li>
<li>分享者只能编辑引导语，且只能编辑文字，并且限制在140字以内，无法插入图片，文字样式等也不可更改。</li>
<li>例如：<a href="https://mp.weixin.qq.com/s/fnVRpI1rvMHDnTZIiMzL-A">https://mp.weixin.qq.com/s/fnVRpI1rvMHDnTZIiMzL-A</a></li>
<li>特征：id&#x3D;”js_share_content”</li>
</ul>
<h3 id="底部广告与留言元素"><a href="#底部广告与留言元素" class="headerlink" title="底部广告与留言元素"></a>底部广告与留言元素</h3><ul>
<li>pc端会隐藏掉 点赞小手 及 以下的所有内容，所以不用去管底部的广告与留言。<br><img src="/image/puppeteer/1-3-3.png" alt="底部广告与留言元素"></li>
</ul>
<h3 id="打赏元素"><a href="#打赏元素" class="headerlink" title="打赏元素"></a>打赏元素</h3><ul>
<li><a href="https://mp.weixin.qq.com/s/8VLIsbkuQcAFI5qM_B4g3w">打赏功能</a>，由于微信和苹果吵了一架，iOS就没有了赞赏功能，但是PC上打开是没有的，所以也不用管了。<br><img src="/image/puppeteer/1-3-4.png" alt="打赏元素"></li>
</ul>
<h2 id="非文章内容"><a href="#非文章内容" class="headerlink" title="非文章内容"></a>非文章内容</h2><h3 id="微信自带广告"><a href="#微信自带广告" class="headerlink" title="微信自带广告"></a>微信自带广告</h3><ul>
<li>位于 点赞小手 下方</li>
<li>在PC端打开不会出现不用管。</li>
</ul>
<h3 id="评论留言及打赏"><a href="#评论留言及打赏" class="headerlink" title="评论留言及打赏"></a>评论留言及打赏</h3><ul>
<li>位于 点赞小手 下方</li>
<li>在PC端打开不会出现不用管。</li>
</ul>
<h3 id="编辑者放的广告"><a href="#编辑者放的广告" class="headerlink" title="编辑者放的广告"></a>编辑者放的广告</h3><ul>
<li>普通文本：如 “点击关注…”、“点击阅读原文”；</li>
<li>带超链接的广告图片；</li>
<li>不带超链接的普通广告图片；</li>
<li>小程序卡片；</li>
</ul>
<p>由于那些内容是编辑者自己放的，有些情况下其本身是文章中不可删除的内容部分，若一概删除会有内容丢失的风险。</p>
<h3 id="文章推荐列表"><a href="#文章推荐列表" class="headerlink" title="文章推荐列表"></a>文章推荐列表</h3><ul>
<li>当前公众号内的往期文章</li>
<li>“你可能喜欢的文章”</li>
<li>其他合作公众号的推荐文章</li>
</ul>
<p>由于这些列表都是编辑者自己放的，有些情况下其本身是文章中不可删除的内容部分，若一概删除会有内容丢失的风险。</p>
<h3 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h3><ul>
<li>公众号的二维码</li>
<li>私人号的二维码</li>
<li>打赏用的二维码</li>
<li>H5页面的二维码</li>
</ul>
<p>由于这些二维码都是编辑者自己放的，有些情况下其本身是文章中不可删除的内容部分，若一概删除会有内容丢失的风险。</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="lt-head-gt-代码"><a href="#lt-head-gt-代码" class="headerlink" title="&lt;head&gt;代码"></a>&lt;head&gt;代码</h3><ul>
<li>document.title 获取&lt;title&gt;&lt;&#x2F;title&gt;</li>
<li>无网站描述</li>
</ul>
<h3 id="lt-body-gt-代码"><a href="#lt-body-gt-代码" class="headerlink" title="&lt;body&gt;代码"></a>&lt;body&gt;代码</h3><ul>
<li>document.getElementById(“activity-name”) 获取 id&#x3D;”activity-name” 为标题 （分享类文章没有标题）</li>
<li>document.getElementById(“js_content”) 获取 id&#x3D;”js_content”为正文部分</li>
<li>一些全局变量（特殊视频类文章除外）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 浏览器控制台输入 console.log(_ori_article_type,nickname,msg_title,msg_desc)</span><br><span class="line">var _ori_article_type = &quot;文章内容类型&quot;;</span><br><span class="line">var nickname = &quot;公众号名称&quot;;</span><br><span class="line">var msg_title = &quot;文章标题&quot;;</span><br><span class="line">var msg_desc = &quot;文章描述&quot;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="脚本重要代码段"><a href="#脚本重要代码段" class="headerlink" title="脚本重要代码段"></a>脚本重要代码段</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var article = new Object();</span><br><span class="line">// 设置文章来源</span><br><span class="line">article.sourcename=&#x27;微信公众号&#x27;;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">  // 设置文章标题</span><br><span class="line">  article.title = msg_title;</span><br><span class="line">  // 获取文章描述</span><br><span class="line">  article.summary= msg_desc;</span><br><span class="line">&#125; catch (e)&#123;</span><br><span class="line">  console.log(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 当文章为分享类，点击 阅读原文 按钮 跳转到源文章地址</span><br><span class="line">var shareContent = document.getElementById(&quot;js_share_content&quot;)</span><br><span class="line">var sourceBut = document.getElementById(&quot;js_share_source&quot;);</span><br><span class="line">if (shareContent &amp;&amp; sourceBut) &#123;</span><br><span class="line">  sourceBut.click();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 删除小程序卡片</span><br><span class="line">var deleteElements = document.getElementsByClassName(&quot;weapp_display_element js_weapp_display_element&quot;)</span><br><span class="line">for(var i=0;i&lt;deleteElements.length;i++) &#123;</span><br><span class="line">   deleteElements[i].remove();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取文章内容  </span><br><span class="line">var contentElement = document.getElementById(&#x27;js_content&#x27;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>性能优化专题-理论篇</title>
    <url>/performance-theory/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p><strong>Fast is better than slow.</strong>   – <a href="https://www.jianshu.com/p/162454cf2241">Ten things we know to be true</a></p>

</blockquote>

<span id="more"></span>

<h1 id="优化标准-RAIL模型"><a href="#优化标准-RAIL模型" class="headerlink" title="优化标准-RAIL模型"></a>优化标准-RAIL模型</h1><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><ul>
<li>以用户为中心；最终目标不是让您的网站在任何特定设备上都能运行很快，而是使用户满意。</li>
<li>立即响应用户；在 100 毫秒以内确认用户输入。</li>
<li>设置动画或滚动时，在 10 毫秒以内生成帧。</li>
<li>最大程度增加主线程的空闲时间。</li>
<li>持续吸引用户；在 1000 毫秒以内呈现交互内容。</li>
</ul>
<p>要根据 RAIL 指标评估您的网站，请使用 <a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/">Chrome DevTools performance</a> 工具记录用户操作。然后根据这些关键 RAIL 指标检查记录时间。</p>
<h2 id="延迟与用户反应"><a href="#延迟与用户反应" class="headerlink" title="延迟与用户反应"></a>延迟与用户反应</h2><p>让用户成为您的性能工作的中心。用户花在网站上的大多数时间不是等待加载，而是在使用时等待响应。了解用户如何评价性能延迟：</p>
<style>
table th:first-of-type {
    width: 150px;
}
</style>

<table>
<thead>
<tr>
<th>延迟时间</th>
<th>用户体验</th>
</tr>
</thead>
<tbody><tr>
<td>0 ~ 16 ms</td>
<td>用户可以感知每秒渲染 60 帧的平滑动画转场，也就是每帧 16 毫秒。<br/>留给应用大约 10 毫秒的时间来生成一帧。</td>
</tr>
<tr>
<td>0 ~ 100 ms</td>
<td>在此时间窗口内响应用户操作，他们会觉得可以立即获得结果。时间再长，操作与反应之间的连接就会中断。</td>
</tr>
<tr>
<td>100 ~ 300 ms</td>
<td>轻微可觉察的延迟。</td>
</tr>
<tr>
<td>300 ~ 1000 ms</td>
<td>延迟感觉像是任务自然和持续发展的一部分(用户觉得这是正常流，但不会觉得快)。</td>
</tr>
<tr>
<td>1000+ ms (&gt;1s)</td>
<td>用户的注意力将离开他们正在执行的任务。</td>
</tr>
<tr>
<td>10,000+ ms (&gt;10s)</td>
<td>用户感到失望，可能会放弃任务；之后他们或许不会再回来。</td>
</tr>
</tbody></table>
<p>Google团队提出了RAIL模型作为优化的目标。 Google把交互的过程分成4个独立的模块，称为 RAIL。RAIL 是一种以用户为中心的性能模型。每个网络应用均具有与其生命周期有关的四个不同方面，且这些方面以不同的方式影响着性能：response （响应）、 animation（动画）、idle（浏览器空置状态）和 load（加载）。<br><img src="/image/performance-theory/RAIL.png" alt="RAIL"></p>
<h2 id="RAIL模型"><a href="#RAIL模型" class="headerlink" title="RAIL模型"></a>RAIL模型</h2><h3 id=""><a href="#" class="headerlink" title=""></a><mark class="label info">response响应 – 在100ms内响应</mark></h3><p>在用户注意到滞后之前您有 100 毫秒的时间可以响应用户输入。这适用于大多数输入，不管他们是在点击按钮、切换表单控件还是启动动画。但不适用于触摸拖动或滚动。</p>
<p><strong>要得到响应式的回应，我们需要：</strong></p>
<ul>
<li>输入延迟时间（从按下到绘制）小于 100 毫秒。</li>
<li>如果最终结果需要花长时间才能得到，就要给一个“加载”的标识来告诉用户“还在处理中”。</li>
</ul>
<h3 id="-1"><a href="#-1" class="headerlink" title=""></a><mark class="label info">Animation动画 – 在10ms内生成一帧</mark></h3><p>在数学上来说，人眼感受到的帧数为60帧&#x2F;s，则会认为是流畅的动画（1s&#x2F;60 &#x3D; 1000ms&#x2F;60 &#x3D; 16ms&#x2F;帧）；也就是说加上每一帧的预算是16ms，减去浏览器绘制帧的时间，留给我们的大约只有10ms&#x2F;帧。 如果超过这个时间，用户眼中动画的流畅度就会降低。动画包含了以下概念:</p>
<ul>
<li>视觉动画 ：这个包括了动画的开始和退出，状态改变时的动画，还有加载标识。 </li>
<li>滚动 ：当用户开始滚动页面，页面出现猛动的情况。 </li>
<li>拖拽 ：当我们需要对用户的拖拽交互在100毫秒以内做出响应时，比如平移地图或者缩放屏幕时，我们需要依赖动画。</li>
</ul>
<p><strong>要合理地生成动画，我们需要：</strong></p>
<ul>
<li>每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒。</li>
</ul>
<h3 id="-2"><a href="#-2" class="headerlink" title=""></a><mark class="label info">IDLE 空闲 – 利用空闲的时间完成推迟的工作</mark></h3><p><strong>要合理地应用浏览器空闲时间，我们需要：</strong></p>
<ul>
<li>尽可能减少预加载数据，以便您的应用快速加载。不是需要立刻传达给用户的，所以可以在浏览器空闲的时候再处理这些任务。</li>
<li>推迟的工作应分成每个耗时约 50 毫秒的多个块，因为应用应在 100 毫秒内给出响应。</li>
<li>如果用户开始交互，优先级最高的事项是响应用户。</li>
</ul>
<h3 id="-3"><a href="#-3" class="headerlink" title=""></a><mark class="label info">LOAD 加载 – 在1000ms内呈现内容</mark></h3><p><strong>页面加载时间是最常见的性能话题。 要尽快将页面加载出来，我们需要：</strong></p>
<ul>
<li>把最需要传达的、对用户来说最有意义的内容在 1000ms 内渲染出来。</li>
<li>要持续响应用户，绝对不允许出现在滚动页面、轻触或者看动画的时候卡顿。</li>
<li>优先考虑关键渲染路径，将所有不需要在加载时处理的任务延迟到浏览器空闲时再处理（或根据需求拦加载）。</li>
</ul>
<hr>
<h1 id="相关原理"><a href="#相关原理" class="headerlink" title="相关原理"></a>相关原理</h1><h2 id="浏览器渲染进程"><a href="#浏览器渲染进程" class="headerlink" title="浏览器渲染进程"></a>浏览器渲染进程</h2><p>要想知道网页会卡顿在哪个阶段、哪些阶段可以进行性能优化，那么必须要对浏览器的渲染流程有个大体的了解。废话不多说，直接进入正题。</p>
<h3 id="浏览器的渲染进程是多线程的"><a href="#浏览器的渲染进程是多线程的" class="headerlink" title="浏览器的渲染进程是多线程的"></a>浏览器的渲染进程是多线程的</h3><h4 id="-4"><a href="#-4" class="headerlink" title=""></a><mark class="label info">GUI渲染线程</mark></h4><ul>
<li>负责渲染浏览器界面，解析HTML，CSS，构建DOM树和RenderObject树，布局和绘制等。</li>
<li>当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行。</li>
<li>注意，<strong>GUI渲染线程与JS引擎线程是互斥的</strong>，当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中 <strong>等到JS引擎空闲时</strong>立即被执行。</li>
</ul>
<h4 id="-5"><a href="#-5" class="headerlink" title=""></a><mark class="label info">JS引擎线程</mark></h4><ul>
<li>也称为JS内核，负责处理Javascript脚本程序，例如V8引擎。</li>
<li>JS引擎线程负责解析Javascript脚本，运行代码。</li>
<li>JS引擎一直等待着任务队列中任务的到来，然后加以处理，一个Tab页（renderer进程）中无论什么时候都只有一个JS线程在运行JS程序。</li>
<li>同样注意，<strong>GUI渲染线程与JS引擎线程是互斥的</strong>，所以如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。</li>
</ul>
<h4 id="-6"><a href="#-6" class="headerlink" title=""></a><mark class="label info">事件触发线程</mark></h4><ul>
<li>归属于浏览器而不是JS引擎，用来控制事件循环（可以理解，JS引擎自己都忙不过来，需要浏览器另开线程协助）。</li>
<li>当JS引擎执行代码块如setTimeOut时（也可来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件线程中。</li>
<li>当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。</li>
<li>注意，由于JS的单线程关系，所以这些待处理队列中的事件都得排队等待JS引擎处理（当JS引擎空闲时才会去执行）。</li>
</ul>
<h4 id="-7"><a href="#-7" class="headerlink" title=""></a><mark class="label info">定时触发器线程</mark></h4><ul>
<li>传说中的setInterval与setTimeout所在线程。</li>
<li>浏览器定时计数器并不是由JavaScript引擎计数的,（因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确）。</li>
<li>因此通过单独线程来计时并触发定时（计时完毕后，添加到事件队列中，等待JS引擎空闲后执行）。</li>
<li>注意，W3C在HTML标准中规定，规定要求setTimeout中低于4ms的时间间隔算为4ms。</li>
</ul>
<h4 id="-8"><a href="#-8" class="headerlink" title=""></a><mark class="label info">异步http请求线程</mark></h4><ul>
<li>在XMLHttpRequest在连接后是通过浏览器新开一个线程请求。</li>
<li>将检测到状态变更时，如果设置有回调函数，异步线程就 <strong>产生状态变更事件</strong>，将这个回调再放入事件队列中。再由JavaScript引擎执行。</li>
</ul>
<h3 id="浏览器渲染流程"><a href="#浏览器渲染流程" class="headerlink" title="浏览器渲染流程"></a>浏览器渲染流程</h3><ul>
<li>浏览器输入url，浏览器主进程接管，开一个下载线程。</li>
<li>然后进行http请求（略去DNS查询，IP寻址等等操作）。</li>
<li>接着等待响应，获取内容。</li>
<li>随后将内容通过RendererHost接口转交给Renderer进程，接着浏览器渲染流程开始。</li>
</ul>
<p><img src="/image/performance-theory/render.png" alt="render"></p>
<ol>
<li>处理 HTML 标记并构建 DOM 树、处理 CSS 标记并构建 CSSOM 树 。</li>
<li>结合DOM树和CSSDOM树形成render树， 也就是渲染树。</li>
<li>布局render树（Layout&#x2F;reflow），负责各元素尺寸、位置的计算。</li>
<li>绘制render树（paint），绘制页面像素信息。</li>
<li>浏览器会将各层的信息发送给GPU，GPU会将各层合成（composite），显示在屏幕上。</li>
</ol>
<p><strong>_优化关键渲染路径_就是指最大限度缩短执行上述第 1 步至第 5 步耗费的总时间</strong></p>
<hr>
<h1 id="性能检测工具"><a href="#性能检测工具" class="headerlink" title="性能检测工具"></a>性能检测工具</h1><h2 id="Chrome-Devtools-–-Network"><a href="#Chrome-Devtools-–-Network" class="headerlink" title="Chrome Devtools – Network"></a>Chrome Devtools – Network</h2><blockquote>
<p>使用网络面板可以了解请求和下载的资源文件并优化网页加载性能。</p>
</blockquote>
<h3 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h3><p>打开Chrome Devtools，选择Network标签。</p>
<h3 id="Request-Table-请求列表"><a href="#Request-Table-请求列表" class="headerlink" title="Request Table 请求列表"></a>Request Table 请求列表</h3><p>该视窗列出了所有的资源请求，默认按时间顺序排序，点击某个资源，可以查看更详细的信息：</p>
<ul>
<li>Headers：请求头信息和响应头信息。</li>
<li>Preview：预览结果。</li>
<li>Response：从服务器返回的响应结果。</li>
<li>Cookies：请求和响应的Cookie。</li>
<li>Timing：查看资源请求的生命周期。<ul>
<li>Queueing：浏览器会在以下情况对请求进行排队：有更高优先级的请求；在这个域下，已经有6个TCP连接了，达到Chrome最大限制数量。此条规则仅适用 在HTTP&#x2F;1.0和HTTP&#x2F;1.1。</li>
<li>Stalled：发送请求之前等待的时间。它可能因为进入队列的任意原因而被阻塞。这个时间包括代理协商的时间。</li>
<li>Proxy negotiation：浏览器与代理服务器协商消耗的时间。</li>
<li>DNS Lookup：浏览器对请求的IP地址进行DNS查找所消耗的时间。</li>
<li>Initial conncection：发起连接所消耗的时间。</li>
<li>Request sent：请求发送消耗的时间。</li>
<li>Waiting (TTFB)：浏览器等待响应的时间，TTFB表示 Time To First Byte。</li>
<li>Content Download：资源下载所消耗的时间。</li>
</ul>
</li>
</ul>
<h3 id="Summary-总览"><a href="#Summary-总览" class="headerlink" title="Summary 总览"></a>Summary 总览</h3><p>面板底部汇总了请求数量，传输数据大小，加载时间等信息,从左往右依次显示为：</p>
<ul>
<li>X requests：请求总个数。</li>
<li>X transferred：所有请求的大小。</li>
<li>Finish：加载完毕时间， 是页面上所有 http 请求发送到响应完成的时间。</li>
<li>DOMContentLoaded： DOM树构建完成时间。它在两个地方都有体现：概览视窗的蓝色竖线，总览视窗的触发时间。</li>
<li>Load：所有资源加载完成的时间。它在三个地方有体现：概览视窗的红色竖线，请求列表视窗的红色竖线，总览视窗的触发时间。</li>
</ul>
<blockquote>
<p>结合DOM文档加载的加载步骤，DOMContentLoaded事件&#x2F;Load事件触发时机如下：<br>1、解析HTML结构。<br>2、加载外部脚本和样式表文件。<br>3、解析并执行脚本代码。        &#x2F;&#x2F; 部分脚本会阻塞页面的加载<br>4、DOM树构建完成。            &#x2F;&#x2F;DOMContentLoaded 事件<br>5、加载图片等外部文件。<br>6、页面加载完毕。             &#x2F;&#x2F;load 事件</p>
</blockquote>
<h2 id="Chrome-Devtools-–-Performance"><a href="#Chrome-Devtools-–-Performance" class="headerlink" title="Chrome Devtools –  Performance"></a>Chrome Devtools –  Performance</h2><blockquote>
<p>使用性能面板可以通过记录和查看网站生命周期内发生的各种事件来提高页面的运行时性能。</p>
</blockquote>
<h3 id="打开-1"><a href="#打开-1" class="headerlink" title="打开"></a>打开</h3><ol>
<li>打开<a href="https://googlechrome.github.io/devtools-samples/jank/">指定网页</a>， 打开Chrome Devtools，然后选择Performance标签。</li>
<li>点击【record】开始录制，或点击reload按钮录制页面载入过程。</li>
<li>稍等片刻就会出现检测结果。</li>
</ol>
<h3 id="分析结果-–-分析每一秒的帧"><a href="#分析结果-–-分析每一秒的帧" class="headerlink" title="分析结果 – 分析每一秒的帧"></a>分析结果 – 分析每一秒的帧</h3><p>FPS（frames per second）是用来分析动画的一个主要性能指标。能保持在60的FPS的话，那么用户体验就是不错的。</p>
<ol>
<li>观察FPS图表，如果你发现了一个红色的长条，那么就说明这些帧存在严重问题，有可能导致非常差的用户体验。一般来说，绿色的长条越高，说明FPS越高，用户体验越好。<br><img src="/image/performance-theory/tool-fps.png" alt="FPS"></li>
<li>在Frames图表中，把鼠标移动到绿色条状图上，Devtools会展示这个帧的FPS。<br><img src="/image/performance-theory/tool-frames.png" alt="Frames"></li>
<li>勾选顶部的screenShots就可以看到各个时间点的界面截图，可以用来分析动画的各个细节。</li>
<li>另外一个好用的小工具就是实时FPS面板，它可以实时展示页面的FPS指标。<ul>
<li>打开more tools 里面 Randering面板，勾选 FPSmeter，FPS实时面板就出现在页面的右上方了。</li>
</ul>
</li>
<li>就在FPS图表下方，你会看到CPU图表。<ul>
<li>在CPU图表中的各种颜色与Summary面板里的颜色是相互对应的，Summary面板就在Performance面板的下方。</li>
<li>CPU图表中的各种颜色代表着在这个时间段内，CPU在各种处理上所花费的时间。</li>
<li>如果你看到了某个处理占用了大量的时间，那么这可能就是一个可以找到性能瓶颈的线索。详细看<a href="/tool-devTool/">Chrome调试指南</a>。<br><img src="/image/performance-theory/tool-cpu.png" alt="CPU"></li>
</ul>
</li>
<li>展开Main图表，Devtools展示了主线程运行状况。<ul>
<li>X轴代表着时间。每个长条代表着一个event,长条越长就代表这个event花费的时间越长。</li>
<li>Y轴代表了调用栈。在栈里，上面的event调用了下面的event。<br><img src="/image/performance-theory/tool-main.png" alt="Main"></li>
</ul>
</li>
</ol>
<h2 id="Chrome-Devtools-–-Audits"><a href="#Chrome-Devtools-–-Audits" class="headerlink" title="Chrome Devtools –  Audits"></a>Chrome Devtools –  Audits</h2><blockquote>
<p>Audit标签使用了Google开源的一个自动化测试工具 – Lighthouse。可对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议。</p>
</blockquote>
<h3 id="打开-2"><a href="#打开-2" class="headerlink" title="打开"></a>打开</h3><p>注意：这个工具需要翻墙，不然会卡在“lighthouse is warming up”。</p>
<ol>
<li>打开Chrome Devtools，然后选择Audits标签。</li>
<li>点击【Perform an audit…】，一般只检查【Performance】和【Best practices】即可，接着点击 Run audit 。</li>
<li>只需要等待一会儿，我们就完成了性能检查并且能把它当成衡量指标来提升网站的性能。</li>
</ol>
<h3 id="分析结果-综合分析"><a href="#分析结果-综合分析" class="headerlink" title="分析结果 - 综合分析"></a>分析结果 - 综合分析</h3><ul>
<li><mark class="label info">Metrics 指标</mark> —— Metrics下列举了基本的性能指标，并且给出页面加载时间的概览。
<ul>
<li><strong>First meaningful paint</strong> —— 首次有效绘制：代表用户看到初始内容所需的时间。请尽量让它的值小于1秒。</li>
<li><strong>First interactive</strong> —— 首次互动：代表可交互元素从展示到响应所需的时间，即cpu有空闲能力来处理用户交互操作的时间。</li>
<li><strong>Consistently Interactive</strong> —— 持续互动：页面中的大多数网络资源完成加载并且CPU在很长一段时间都很空闲的所需的时间。</li>
<li><strong>Perceptual Speed Index</strong> —— 速度指标：页面加载性能指标，页面展示可见部分所需时间的平均值。以毫秒为单位并且取决于窗口的大小，应尽量减少到1250毫秒以内。</li>
<li><strong>Estimated Input Latency</strong> —— 预计输入延迟时间： 应用有 100 毫秒的时间响应用户输入。如果超过此时间，用户就会认为应用反应迟缓。</li>
</ul>
</li>
<li><mark class="label info">Opportunities 可优化项</mark> —— 这项里面的内容指的是LightHouse发现的一些可以直接优化的点，你可以对应这些点来进行优化。</li>
<li><mark class="label info">Diagnostics 手动诊断项目</mark> —— 这些项目表示LightHouse并不能替你决定当前是好是坏，但是把详情列出来，由你手动排查每个项目的情况。</li>
<li><mark class="label info">Passed Audits 通过的审查项目</mark> —— 这里列出的都是你做的好的地方，比如：减少阻塞渲染的脚本、图片懒加载、样式脚本压缩等等。</li>
<li><mark class="label info">Best Practice 最佳实践</mark> —— 本项指标是指LightHouse用业界公认的几项最佳实践来评估站点。</li>
</ul>
<h2 id="其他检测工具推荐"><a href="#其他检测工具推荐" class="headerlink" title="其他检测工具推荐"></a>其他检测工具推荐</h2><p>性能检测方面，Chrome DevTools已经很强大了，完全够用，除了我们常用的network、performance、auditing，More tools里面的Rendering、JavaScript Profiler、performance monitor等工具也很强大，所以，我就稍微介绍下其他工具：</p>
<ul>
<li><a href="https://www.cnblogs.com/strick/p/6677836.html">WebPageTest</a>，很强大，也很复杂，有兴趣的可以去研究下；</li>
<li><a href="https://tools.pingdom.com/">tools.pingdom.com</a> 可在线检测，兼具了Audits与Network标签对应的功能。</li>
</ul>
<hr>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://developers.google.com/web/fundamentals/performance/rail">RAIL</a><br><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/">关键渲染路径</a><br><a href="https://segmentfault.com/a/1190000012925872">从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理</a><br><a href="https://developers.google.com/web/tools/chrome-devtools/">chrome-devtools官方文档</a><br><a href="https://www.breakyizhan.com/chromeconsole/1249.html">Chrome 谷歌浏览器的开发者工具-Break驿站</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>performance</tag>
      </tags>
  </entry>
  <entry>
    <title>面向前端的数据库指南</title>
    <url>/sql-guide/</url>
    <content><![CDATA[<h1 id="数据库概览"><a href="#数据库概览" class="headerlink" title="数据库概览"></a>数据库概览</h1><p>一般一个数据库系统（Database System）可分为数据库（Database）与数据管理系统（Database Management System，DBMS）两个部分。数据库就是按照数据结构来组织、存储和管理数据的仓库，管理这个数据库的软件就称之为数据库管理系统。<a href="https://www.zhihu.com/question/21091495/answer/17197897">也可以更形象地类比成中药铺子。</a></p>
<span id="more"></span>

<h2 id="关系型与非关系型"><a href="#关系型与非关系型" class="headerlink" title="关系型与非关系型"></a>关系型与非关系型</h2><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><ol>
<li>以行和列的形式存储数据，结构稳定，具有逻辑性，易于理解，但不易修改。</li>
<li>查询能力强，可以操作很复杂的查询。</li>
<li>一致性高。由于并发高，在数据同步的时候一般采用锁来保证数据的可靠性。</li>
<li>事务支持使得对于安全性能很高的数据访问要求得以实现。</li>
</ol>
<h3 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h3><ol>
<li>非关系型数据库主要使用key-value的方式存储数据，即是“no relational”，由于数据间没有关联性，相对来说层级扁平。而且不需要经过SQL层的解析，所以性能非常高。</li>
<li>可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。</li>
<li>数据结构灵活，每个数据都可以有不同的结构。</li>
<li>由于降低了一致性的要求，所以查询速度更快。</li>
<li>不适用于复杂SQL操作。</li>
<li>不支持事务。</li>
</ol>
<h3 id="关系型数据库-V-S-非关系型数据库"><a href="#关系型数据库-V-S-非关系型数据库" class="headerlink" title="关系型数据库  V.S.  非关系型数据库"></a>关系型数据库  V.S.  非关系型数据库</h3><p>关系型数据库的最大特点就是事务的一致性：传统的关系型数据库读写操作都是事务的，具有ACID的特点，这个特性使得关系型数据库可以用于几乎所有对一致性有要求的系统中，如典型的银行系统。相反地，关系型数据库为了维护一致性所付出的巨大代价就是其读写性能比较差，而像微博、facebook这类SNS的应用，对并发读写能力要求极高；另外，其固定的表结构，因此，其扩展性极差。</p>
<p>于是，非关系型数据库应运而生，由于不可能用一种数据结构化存储应付所有的新的需求，因此，非关系型数据库严格上不是一种数据库，应该是一种数据结构化存储方法的集合。必须强调的是，数据的持久存储，尤其是海量数据的持久存储，还是需要一种关系数据库这员老将。</p>
<h2 id="主流数据库"><a href="#主流数据库" class="headerlink" title="主流数据库"></a>主流数据库</h2><p><a href="https://db-engines.com/en/ranking">数据库排行榜</a>中商业Oracle、微软SQLServer、免费MySQL，三者是目前市场占有率最高（依安装量而非收入）的关系数据库，而且很有代表性。</p>
<h3 id="三大关系型数据库"><a href="#三大关系型数据库" class="headerlink" title="三大关系型数据库"></a>三大关系型数据库</h3><ol>
<li>Oracle<br>Oracle主要应用在传统行业的数据化业务中，比如：银行、金融这样的对可用性、健壮性、安全性、实时性要求极高的业务；零售、物流这样对海量数据存储分析要求很高的业务。而且由于Oracle对复杂计算、统计分析的强大支持，在互联网数据分析、数据挖掘方面的应用也越来越多。</li>
<li>MySQL<br>MySQL基本是生于互联网，长于互联网。其应用实例也大都集中于互联网方向，MySQL的高并发存取能力并不比大型数据库差，同时价格便宜，安装使用简便快捷，深受广大互联网公司的喜爱。最大的一个特色，就是自由选择存储引擎。每个表都是一个文件，都可以选择合适的存储引擎。常见的引擎有 InnoDB、 MyISAM、 NDBCluster等。并且由于MySQL的开源特性，针对一些对数据库有特别要求的应用，可以通过修改代码来实现定向优化，例如SNS、LBS等互联网业务。</li>
<li>MS SQLServer<br>windows生态系统的产品，好处坏处都很分明。好处就是，高度集成化，微软也提供了整套的软件方案，基本上一套win系统装下来就齐活了。因此，不那么缺钱，但很缺IT人才的中小企业，会偏爱 MS SQL Server。例如，自建ERP系统、商业智能、垂直领域零售商、餐饮、事业单位等等。</li>
</ol>
<h3 id="两大非关系型数据库"><a href="#两大非关系型数据库" class="headerlink" title="两大非关系型数据库"></a>两大非关系型数据库</h3><p>NoSQL主要有以下几类：临时性键值存储（memcached、Redis）、永久性键值存储（ROMA、Redis）、面向文档的数据库（MongoDB、CouchDB）、面向列的数据库（Cassandra、HBase）。最热门的是MongoDB 和 Redis。下面从以下几个维度对redis、mongoDB进行对比：</p>
<ol>
<li><p>性能<br>性能都比较高，总体来讲，TPS方面redis优于mongodb；</p>
</li>
<li><p>可操作性<br>redis数据丰富，较少的网络IO次数；<br>mongodb支持丰富的数据表达、索引，类似关系型数据库MySQL，支持的查询语言非常丰富。<br>总体来讲，MongoDB优于Redis。</p>
</li>
<li><p>内存空间的大小和数据量的大小<br>redis在2.0版本后增加了自己的VM特性，突破物理内存的限制，可以对key value设置过期时间（类似memcache）；<br>mongoDB适合大数据量存储，依赖系统虚拟内存管理，采用镜像文件存储；内存占有率比较高，官方建议独立部署在64位系统。<br>不同的应用角度看，各有优势。</p>
</li>
<li><p>可用性<br>redis依赖客户端来实现分布式读写，主从复制时，每次从节点重新连接主节点都要依赖整个快照,无增量复制；不支持自动sharding,需要依赖程序设定一致hash机制。<br>mongoDB支持master-slave,replicaset（内部采用paxos选举算法，自动故障恢复）,auto sharding机制，对客户端屏蔽了故障转移和切分机制。<br>总体来讲，MongoDB优于Redis；单点问题上，MongoDB应用简单，相对用户透明，Redis比较复杂，需要客户端主动解决。</p>
</li>
<li><p>可靠性(持久化)<br>redis依赖快照进行持久化，aof增强了可靠性的同时，对性能有所影响;<br>MongoDB从1.8版本开始采用binlog方式（MySQL同样采用该方式）支持持久化的可靠性。<br>对于数据持久化和数据恢复，MongoDB优于Redis</p>
</li>
<li><p>数据一致性（事务支持）<br>redis事务支持比较弱，只能保证事务中的每个操作连续执行;<br>mongoDB不支持事务。<br>此方面，Redis优于MongoDB。</p>
</li>
<li><p>数据分析<br>mongoDB内置了数据分析的功能，Redis不支持</p>
</li>
<li><p>应用场景<br>redis：数据量较小的更性能操作和运算上;<br>MongoDB:主要解决海量数据的访问效率问题。</p>
</li>
</ol>
<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>组内推荐使用MySQL，所以接下来介绍下MySQL。</p>
<h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><h3 id="主键-primary-key"><a href="#主键-primary-key" class="headerlink" title="主键(primary key)"></a>主键(primary key)</h3><p>能够唯一标识表中某一行的属性或属性组。一个表只能有一个主键，但可以有多个候选索引。主键常常与外键构成参照完整性约束，防止出现数据不一致。主键可以保证记录的唯一和主键域非空,数据库管理系统对于主键自动生成唯一索引，所以主键也是一个特殊的索引。</p>
<h3 id="外键（foreign-key）"><a href="#外键（foreign-key）" class="headerlink" title="外键（foreign key）"></a>外键（foreign key）</h3><p>是用于建立和加强两个表数据之间的链接的一列或多列。外键约束主要用来维护两个表之间数据的一致性。简言之，表的外键就是另一表的主键，外键将两表联系起来。一般情况下，要删除一张表中的主键必须首先要确保其它表中的没有相同外键（即该表中的主键没有一个外键和它相关联）。</p>
<h3 id="约束（constraints）"><a href="#约束（constraints）" class="headerlink" title="约束（constraints）"></a>约束（constraints）</h3><p>SQL 约束用于规定表中的数据规则。如果存在违反约束的数据行为，行为会被约束终止。约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）。<br>常用SQL约束：</p>
<ul>
<li>NOT NULL - 非空约束，指定某列不为空。</li>
<li>UNIQUE - 保证某列的每行必须有唯一的值。</li>
<li>PRIMARY KEY - NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。</li>
<li>FOREIGN KEY - 保证一个表中的数据匹配另一个表中的值的参照完整性。</li>
<li>CHECK - 保证列中的值符合指定的条件。</li>
<li>DEFAULT - 规定没有给列赋值时的默认值。</li>
</ul>
<h3 id="索引-index"><a href="#索引-index" class="headerlink" title="索引(index)"></a>索引(index)</h3><p>是用来快速地寻找那些具有特定值的记录。主要是为了检索的方便，是为了加快访问速度， 按一定的规则创建的，一般起到排序作用。所谓唯一性索引，这种索引和前面的“普通索引”基本相同，但有一个区别：索引列的所有值都只能出现一次，即必须唯一。</p>
<h3 id="存储过程-proceduer"><a href="#存储过程-proceduer" class="headerlink" title="存储过程(proceduer)"></a>存储过程(proceduer)</h3><p>存储过程是保存在数据库上的一段可执行代码。与java中的函数类似。通过一系列的SQL语句，根据传入的参数（也可以没有），通过简单的调用，完成比单个SQL语句更复杂的功能，存储在数据库服务器端，只需要编译过一次之后再次使用都不需要再进行编译。主要对存储的过程进行控制。</p>
<h3 id="触发器-trigger"><a href="#触发器-trigger" class="headerlink" title="触发器(trigger)"></a>触发器(trigger)</h3><p>触发器是一个特殊的存储过程，不同的是存储过程要用CALL来调用，而触发器不需要使用CALL也不需要手工启动，只要当一个预定义的事件发生的时候，就会被MYSQL自动调用。触发器可以让你在执行INSERT,UPDATE或者DELETE的时候，执行一些特定的操作，可以在MYSQL中指定实在SQL语句执行前触发还是执行后触发。</p>
<h3 id="事务-transaction"><a href="#事务-transaction" class="headerlink" title="事务(transaction)"></a>事务(transaction)</h3><p>特点：</p>
<ul>
<li>原子性(atomicity)：组成事务处理的语句形成了一个逻辑单元，不能只执行其中的一部分。</li>
<li>一致性(consistency)：在事务处理执行前后，数据库是一致的(数据库数据完整性约束)。</li>
<li>隔离性(isolcation)：一个事务处理对另一个事务处理的影响。</li>
<li>持续性(durability)：事务处理的效果能够被永久保存下来 。</li>
</ul>
<p>过程：</p>
<ul>
<li>Start transaction：开始一个事务。  </li>
<li>Commit：提交所做的修改。  </li>
<li>Rollback：回滚所做的修改。如果在操作时出错，应该从新开始一个事务。</li>
</ul>
<p>总结：事务从Start transaction到Commit或者Rollback结束，这中间的语句是一个整体，如果执行Rollback，那么这些动作都会回滚。如果执行Commit那么这些动作全部执行成功。</p>
<h3 id="锁-lock"><a href="#锁-lock" class="headerlink" title="锁(lock)"></a>锁(lock)</h3><p>InnoDB主要实现了两种类型的行锁：共享锁和排它锁。InnoDB行锁是通过给索引项加锁实现的，如果没有索引，InnoDB会通过隐藏的聚簇索引来对记录加锁。对于insert、update、delete，InnoDB会自动给涉及的数据加排他锁（X）；对于一般的Select语句，InnoDB不会加任何锁。 </p>
<ul>
<li>共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同的数据集的排他锁（我读的时候，你可以读，但是不能写）。</li>
<li>排他锁（X）：允许获得排他锁的事务更新数据，但是组织其他事务获得相同数据集的共享锁和排他锁（我写的时候，你不能读也不能写）。</li>
</ul>
<p><strong>何时在InnoDB中使用表锁：</strong><br>InnoDB在绝大部分情况会使用行级锁，因为事务和行锁往往是我们选择InnoDB的原因，但是在如下情况我们也考虑使用表级锁：</p>
<ul>
<li>当事务需要更新大部分数据时，表又比较大，如果使用默认的行锁，不仅效率低，而且还容易造成其他事务长时间等待和锁冲突。</li>
<li>事务比较复杂，很可能引起死锁导致回滚。</li>
</ul>
<p><strong>避免死锁</strong><br>在InnoDB中，锁是逐步获得的，就造成了死锁的可能。当两个事务都需要获得对方持有的锁才能够继续完成事务，导致双方都在等待，就会产生死锁。有多种方法可以避免死锁，这里只介绍常见的三种：</p>
<ul>
<li>如果不同程序会并发存取多个表，尽量约定以相同的顺序访问表，可以大大降低死锁机会；</li>
<li>在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁产生概率；</li>
<li>对于非常容易产生死锁的业务部分，可以尝试使用升级锁定颗粒度，通过表级锁定来减少死锁产生的概率；</li>
</ul>
<h3 id="MySQL三大范式和反范式"><a href="#MySQL三大范式和反范式" class="headerlink" title="MySQL三大范式和反范式"></a>MySQL三大范式和反范式</h3><p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。但是有些时候一昧的追求范式减少冗余，反而会降低数据读写的效率，这个时候就要反范式，利用空间来换时间。</p>
<ul>
<li>第一范式：确保每列的原子性。</li>
<li>第二范式：确保表中的每列都和主键相关。</li>
<li>第三范式：确保每列都和主键列直接相关,而不是间接相关。</li>
<li>反三范式：没有冗余的数据库未必是最好的数据库，有时为了提高运行效率，就必须降低范式标准，适当保留冗余数据。具体做法是： 在概念数据模型设计时遵守第三范式，降低范式标准的工作放到物理数据模型设计时考虑。降低范式就是增加字段，减少了查询时的关联，提高查询效率，因为在数据库的操作中查询的比例要远远大于DML的比例。但是反范式化一定要适度，并且在原本已满足三范式的基础上再做调整的。</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li>首先安装MySQL，可参照此教程&#x3D;&gt;<a href="http://blog.csdn.net/catstarxcode/article/details/78940385">Mac安装MySQL</a>。（注：一定要记住临时密码并重置）；</li>
<li>安装可视化工具：sequel pro或者Navicat都可以（我用<a href="https://sequelpro.com/">sequel pro</a>举例）；</li>
<li>然后打开 sequel pro就可以在里面进行与数据库的连接，连接时输入的信息有：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host –在本机上面就输入本机的IP地址（127.0.0.1），   </span><br><span class="line">username – 默认是 root   </span><br><span class="line">password – 就是数据库的密码   </span><br><span class="line">database – 可以不填   </span><br><span class="line">port – 端口号 默认是 3306</span><br></pre></td></tr></table></figure></li>
<li>连接后就可以进行各种操作啦（附上简单<a href="https://segmentfault.com/a/1190000006255923">教程</a>）</li>
</ol>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>基本会增删改查即可（<a href="http://www.runoob.com/sql/sql-tutorial.html">SQL语法学习地址</a>）</p>
<ul>
<li>SELECT - 从数据库中提取数据</li>
<li>UPDATE - 更新数据库中的数据</li>
<li>DELETE - 从数据库中删除数据</li>
<li>INSERT INTO - 向数据库中插入新数据</li>
<li>CREATE DATABASE - 创建新数据库</li>
<li>ALTER DATABASE - 修改数据库</li>
<li>CREATE TABLE - 创建新表</li>
<li>ALTER TABLE - 变更（改变）数据库表</li>
<li>DROP TABLE - 删除表</li>
<li>CREATE INDEX - 创建索引（搜索键）</li>
<li>DROP INDEX - 删除索引</li>
</ul>
<h2 id="争议点"><a href="#争议点" class="headerlink" title="争议点"></a>争议点</h2><h3 id="该不该摒弃外键"><a href="#该不该摒弃外键" class="headerlink" title="该不该摒弃外键"></a>该不该摒弃外键</h3><h4 id="矛盾焦点"><a href="#矛盾焦点" class="headerlink" title="矛盾焦点"></a>矛盾焦点</h4><p>数据库设计是否需要外键。这里有两个问题：一个是如何保证数据库数据的完整性和一致性；二是第一条对性能的影响。</p>
<h4 id="正方观点"><a href="#正方观点" class="headerlink" title="正方观点"></a>正方观点</h4><ol>
<li>由数据库自身保证数据一致性，完整性，更可靠，因为程序很难100％保证数据的完整性，而用外键即使在数据库服务器当机或者出现其他问题的时候，也能够最大限度的保证数据的一致性和完整性。</li>
<li>有主外键的数据库设计可以增加ER图的可读性，这点在数据库设计时非常重要。</li>
<li>外键在一定程度上说明的业务逻辑，会使设计周到具体全面。</li>
</ol>
<h4 id="反方观点"><a href="#反方观点" class="headerlink" title="反方观点"></a>反方观点</h4><ol>
<li>数据库需要维护外键的内部管理；</li>
<li>外键等于把数据的一致性事务实现，全部交给数据库服务器完成，可控性就会降低。你自己写代码控制的话，相当于许多数据逻辑自己控制，虽然麻烦，但是出了问题有利于自己查找并针对性解决。</li>
<li>有了外键，当做一些涉及外键字段的增，删，更新操作之后，需要触发相关操作去检查，进行完整性检查是一个耗费时间和资源的过程。在并发小的情况下，这种开销应该没什么区别，但是在高并发的情况下，数据库的外键对性能的影响肯定是很高的；</li>
<li>外键还会因为需要请求对其他表内部加锁而容易出现死锁情况；</li>
<li>可以用事务或应用程序保证数据的完整性。</li>
</ol>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>外键是否采用看业务应用场景，以及开发成本的，大致列下什么时候适合，什么时候不适合使用：</p>
<ol>
<li><p>互联网行业应用不推荐使用外键：<br>用户量大，并发度高，为此数据库服务器很容易成为性能瓶颈，尤其受IO能力限制，且不能轻易地水平扩展；若是把数据一致性的控制放到事务中，也即让应用服务器承担此部分的压力，而引用服务器一般都是可以做到轻松地水平的伸缩；</p>
</li>
<li><p>传统行业建议使用外键：<br>软件应用的人数有限，换句话说是可控的；数据库服务器的数据量也一般不会超大，且活跃数据有限。综合上述2句话描述，也即数据库服务器的性能不是问题，所以不用过多考虑性能的问题；另外，使用外键可以降低开发成本，借助数据库产品自身的触发器可以实现表与关联表之间的数据一致性和更新；最后一点，使用外键的方式，还可以做到开发人员和数据库设计人员的分工，可以为程序员承担更多的工作量；</p>
</li>
<li><p>需要注意的是：MySQL允许使用外键，但是为了完整性检验的目的，在除了InnoDB表类型之外的所有表类型中都忽略了这个功能。如果需要更好的性能，并且不需要完整性检查，可以选择使用MyISAM表类型，如果想要在MySQL中根据参照完整性来建立表并且希望在此基础上保持良好的性能，最好选择表结构为innoDB类型。</p>
</li>
</ol>
<h2 id="学习重点"><a href="#学习重点" class="headerlink" title="学习重点"></a>学习重点</h2><ul>
<li>熟练运用增删改查命令</li>
<li>用事务来代替外键来保证完整性</li>
<li>用索引提高查询速度</li>
<li>熟练运用锁来优化数据库</li>
</ul>
<h2 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h2><p>《MySQL必知必会》（适合入门）<br>《高性能MySQL》<br>《MySQL技术内幕-innorDB搜索引擎》</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>规范汇总</title>
    <url>/summary-standard/</url>
    <content><![CDATA[<p>规范的重要性不言而喻，决定了团队的代码质量和风格走向。规范有很多方面，比如流程规范、commit规范、readme规范、安全规范等等。团队越大，越能凸显出规范的作用。这篇就简单总结下各种规范，还不完整，以后慢慢补充。（立起了一个flag）</p>
<span id="more"></span>

<h2 id="流程规范"><a href="#流程规范" class="headerlink" title="流程规范"></a>流程规范</h2><ol>
<li>需求确认后，从线上主分支拉出新任务分支，同时向团队告知“正在开发”</li>
<li>开发完毕后将代码merge到测试分支，指派给测试人员，向团队告知“已提测”</li>
<li>完成code review，交由测试、设计、产品验收；</li>
<li>约定发布时间，并捋清需要发布的服务及顺序；</li>
<li>创建由任务分支到预发分支的Merge Requests，交由负责人审核确认并发布；</li>
<li>预发环境验收后，创建由任务分支到线上主分支的MR，交由负责人审核确认并发布；</li>
<li>通知业务方做好准备，上线后及时进行回归，再次由测试、设计、产品验收；</li>
<li>观察半小时左右，确保线上无异常。</li>
</ol>
<h2 id="git规范"><a href="#git规范" class="headerlink" title="git规范"></a>git规范</h2><blockquote>
<p>仓库命名、分支命名、权限管理、分支管理按各公司的规定来</p>
</blockquote>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>千万<strong>不要使用gitlab在线解决冲突</strong>，会污染任务代码。</li>
</ul>
<h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><p>参考<a href="/tool-git-commit/">git commit辅助工具</a>，项目不强制使用Commitizen等工具，但提交时需要选择性加上以下一种前缀：</p>
<ul>
<li><strong>feat</strong>: 新功能（feature）</li>
<li><strong>fix</strong>: 修补bug</li>
<li><strong>docs</strong>: 文档改动</li>
<li><strong>style</strong>: 不影响代码运行的格式改动</li>
<li><strong>refactor</strong>: 重构，不是新增功能或修补bug的代码变动</li>
<li><strong>perf</strong>: 提高代码性能的代码变动</li>
<li><strong>test</strong>: 新增或修改测试用例</li>
<li><strong>build</strong>: 影响构建系统或外部依赖的更改（如webpack、broccoli、npm等）</li>
<li><strong>ci</strong>: 对CI配置文件和脚本的变动（如travis、circle、browserstack、saucelabs等）</li>
<li><strong>chore</strong>: 不涉及src或测试文件的代码变更</li>
<li><strong>revert</strong>: 代码回退</li>
<li><strong>misc</strong>: 一些未归类或不知道将它归类到什么方面的提交</li>
</ul>
<h3 id="README规范"><a href="#README规范" class="headerlink" title="README规范"></a>README规范</h3><p>每个git项目必须在根目录创建README文档，项目简介、成员为必填信息，其他信息视具体项目情况而定，可参考<a href="https://github.com/zhaoluting/hexo-blog/blob/master/README-template.md">README</a></p>
<h2 id="vue编码规范"><a href="#vue编码规范" class="headerlink" title="vue编码规范"></a>vue编码规范</h2><p>以下规范参考<a href="https://cn.vuejs.org/v2/style-guide/">风格指南 — Vue.js</a>，进行了提炼及小部分删减。</p>
<h3 id="必要规范"><a href="#必要规范" class="headerlink" title="必要规范"></a>必要规范</h3><ul>
<li><strong>组件名应该始终是多个单词</strong>，根组件 App 以及 <transition>、<component> 之类的 Vue 内置组件除外。这样做可以避免跟现有的以及未来的 HTML 元素<a href="https://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name">相冲突</a>。</li>
<li><strong>组件的 data 必须是一个函数</strong>。当在组件中使用data属性的时候 (除了 new Vue 外的任何地方)，它的值必须是返回一个对象的函数。因为对象data会在组件的所有实例之间共享，而利用函数可以使每个实例变成一个独立的数据对象。</li>
<li><strong>prop 的定义应该尽量详细</strong>，至少需要指定其类型。</li>
<li><strong>必须为 v-for 设置始终唯一的键值 key</strong>，以便维护内部组件及其子树的状态。</li>
<li><strong>避免把 v-if 和 v-for 同时用在同一个元素上</strong>，一般有两种常见情况：<ul>
<li>为了过滤一个列表中的项目 (比如 <code>v-for=&quot;user in users&quot; v-if=&quot;user.isActive&quot;</code>)。在这种情形下，请将 users 替换为一个计算属性 (比如 activeUsers)，让其返回过滤后的列表。</li>
<li>为了避免渲染本应该被隐藏的列表 (比如 <code>v-for=&quot;user in users&quot; v-if=&quot;shouldShowUsers&quot;</code>)。这种情形下，请将 v-if 移动至容器元素上 (比如 ul, ol)。</li>
</ul>
</li>
<li><strong>除 App 和布局组件以外的其它所有组件样式都应该设置作用域</strong>，并且对于组件库应该更倾向于选用基于 class 的策略而不是 scoped attribute，使用唯一的 class 名同样可以避免样式冲突。</li>
<li><strong>使用模块作用域保持不允许外部访问的函数的私有性。</strong>如果无法做到这点，就始终为插件、混入等不考虑作为对外公共 API 的自定义私有属性使用 <code>$_</code> 前缀，并附带一个命名空间以回避和其它作者的冲突 (比如 <code>$_yourPluginName_</code>)。详见<a href="https://cn.vuejs.org/v2/style-guide/#%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7%E5%90%8D-%E5%BF%85%E8%A6%81" title="私有属性名 必要">私有属性名</a>。</li>
</ul>
<h3 id="推荐遵守规范"><a href="#推荐遵守规范" class="headerlink" title="推荐遵守规范"></a>推荐遵守规范</h3><ul>
<li><strong>尽可能的将文件拆解成组件</strong>，封装高质量、可复用组件。</li>
<li><strong>单文件组件的文件名应始终是单词大写开头 (PascalCase)或横线连接 (kebab-case)。</strong>单词大写开头对于代码编辑器的自动补全最为友好，因为这使得我们在 JS(X) 和模板中引用组件的方式尽可能的一致。（涉及到<a href="/tool-git-caseSensitive/"><strong>大小写不敏感的文件系统的问题</strong></a>，待讨论）</li>
<li><strong>特定样式和约定的基础组件应全部以特定的前缀开头</strong>，比如 Base、App，便于统一管理。</li>
<li><strong>只拥有单个活跃实例的组件应该以 The 前缀命名</strong>，以示其唯一性。此单例组件应该每个页面只使用一次，不接受任何 prop。</li>
<li><strong>和父组件紧密耦合的子组件应该以父组件名作为前缀命名，</strong>这样可以把相关联文件排在一起。</li>
<li><strong>组件名应以高级别</strong> (一般化描述) <strong>的单词开头，以描述性的修饰词结尾</strong>，便于编辑器排序后组件之间的关系一目了然。</li>
<li><strong>在单文件组件、字符串模板和 JSX 中没有内容的组件应该是自闭合的，</strong>如<code>&lt;MyComponent/&gt;</code>，但在 DOM 模板里不要这样做。</li>
<li><strong>在单文件组件、字符串模板、JS&#x2F;</strong><a href="https://cn.vuejs.org/v2/guide/render-function.html#JSX"><strong>JSX</strong></a>** 中组件名应使用 PascalCase ，在 DOM 模板、只通过 Vue.component 定义全局组件的应用中必须使用 kebab-case。**</li>
<li><strong>组件名应该倾向于完整单词而不是缩写，</strong>不常用的缩写尤其应该避免。</li>
<li><strong>声明 prop 时应使用 camelCase命名，在模板和 <strong><a href="https://cn.vuejs.org/v2/guide/render-function.html#JSX"><strong>JSX</strong></a></strong> 中应使用 kebab-case。</strong>因为在 JavaScript 中更自然的是 camelCase，而在 HTML 中则是 kebab-case。</li>
<li><strong>多个 attribute 的元素应分多行撰写</strong>，每个 attribute 一行<strong>。</strong></li>
<li><strong>组件模板应该只包含简单的表达式</strong>，复杂的表达式则应该重构为计算属性或方法，并且<strong>把复杂计算属性尽可能多的分割为更简单的属性。</strong></li>
<li><strong>非空 HTML attribute 值应带引号</strong>，建议双引号<strong>。</strong></li>
<li>**指令缩写 **(用<code>:</code>表示<code>v-bind:</code> 、<code>@</code> 表示 <code>v-on:</code>、 <code>#</code>表示<code>v-slot:</code>) 要么都用要么都不用。</li>
</ul>
<h3 id="非强制规范"><a href="#非强制规范" class="headerlink" title="非强制规范"></a>非强制规范</h3><p><strong>组件&#x2F;实例的选项的顺序</strong></p>
<ol>
<li><strong>副作用</strong> (触发组件外的影响)：<code>el</code></li>
<li><strong>全局感知</strong> (要求组件以外的知识)：<code>name</code>、<code>parent</code></li>
<li><strong>组件类型</strong> (更改组件的类型)：<code>functional</code></li>
<li><strong>模板修改器</strong> (改变模板的编译方式)：<code>delimiters</code>、<code>comments</code></li>
<li><strong>模板依赖</strong> (模板内使用的资源)：<code>components</code>、<code>directives</code>、<code>filters</code></li>
<li><strong>组合</strong> (向选项里合并属性)：<code>extends</code>、<code>mixins</code></li>
<li><strong>接口</strong> (组件的接口)：<code>inheritAttrs</code>、<code>model</code>、<code>props</code>&#x2F;<code>propsData</code></li>
<li><strong>本地状态</strong> (本地的响应式属性)：<code>data</code>、<code>computed</code></li>
<li><strong>事件</strong> (通过响应式事件触发的回调)：<code>watch</code>、生命周期钩子 (按照被调用的顺序<code>beforeCreate</code>、<code>created</code>、<code>beforeMount</code>、<code>mounted</code>、<code>beforeUpdate</code>、<code>updated</code>、<code>activated</code>、<code>deactivated</code>、<code>beforeDestroy</code>、<code>destroyed</code>）</li>
<li><strong>非响应式的属性</strong> (不依赖响应系统的实例属性)：<code>methods</code></li>
<li><strong>渲染</strong> (组件输出的声明式描述)：<code>template</code>&#x2F;<code>render</code>、<code>renderError</code></li>
</ol>
<p><strong>元素 attribute 的顺序</strong></p>
<ol>
<li><strong>定义</strong> (提供组件的选项)：<code>is</code></li>
<li><strong>列表渲染</strong> (创建多个变化的相同元素)：<code>v-for</code></li>
<li><strong>条件渲染</strong> (元素是否渲染&#x2F;显示)：<code>v-if</code>、<code>v-else-if</code>、<code>v-else</code>、<code>v-show</code>、<code>v-cloak</code></li>
<li><strong>渲染方式</strong> (改变元素的渲染方式)：<code>v-pre</code>、<code>v-once</code></li>
<li><strong>全局感知</strong> (需要超越组件的知识)：<code>id</code></li>
<li><strong>唯一的 attribute</strong> (需要唯一值的 attribute)：<code>ref</code>、<code>key</code></li>
<li><strong>双向绑定</strong> (把绑定和事件结合起来)：<code>v-model</code></li>
<li><strong>其它 attribute</strong> (所有普通的绑定或未绑定的 attribute)</li>
<li><strong>事件</strong> (组件事件监听器)：<code>v-on</code></li>
<li><strong>内容</strong> (覆写元素的内容)：<code>v-html</code>、<code>v-text</code></li>
</ol>
<p><strong>单文件组件的顶级元素的顺序</strong><br><code>&lt;style&gt;</code>放在最后，所有组件顺序都保持一致即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ComponentA.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span>...<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="comment">/* ... */</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="comment">/* ... */</span></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ComponentB.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span>...<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="comment">/* ... */</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="comment">/* ... */</span></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="小建议"><a href="#小建议" class="headerlink" title="小建议"></a>小建议</h3><ul>
<li><strong>如果一组 <code>v-if</code> + <code>v-else</code>的元素类型相同，最好使用</strong><code>key</code> (比如两个 <code>&lt;div&gt;</code> 元素)。因为vue在相同类型的元素之间切换时，会修补已存在元素，而不是将旧的元素移除然后在同一位置添加新元素。如果本不相同的元素被识别为相同，可能会出现<a href="https://jsfiddle.net/chrisvfritz/bh8fLeds/">意料之外的结果</a>。</li>
<li><strong>元素选择器应该避免在<code>scoped</code>中出现</strong>，大量的元素和 attribute 组合的选择器 (比如 <code>button[data-v-f3f3eg9]</code>) 会比类和 attribute 组合的选择器 慢，所以应该尽可能选用类选择器。</li>
<li><strong>优先通过 prop 和事件进行父子组件之间的通信</strong>，而不是 <code>this.$parent</code> 或改变 prop。 遵循prop 向下传递，事件向上传递的约定。</li>
<li><strong>优先通过<a href="https://github.com/vuejs/vuex">Vuex</a>管理全局状态</strong>，而不是通过 <code>this.$root</code> 或一个全局事件总线。</li>
</ul>
<h2 id="CSS规范"><a href="#CSS规范" class="headerlink" title="CSS规范"></a>CSS规范</h2><p>业界出名的规范是<a href="http://getbem.com/introduction/">BEM</a>，但太复杂，个人建议使用kebab-case这种简单规范，参考了<a href="https://codeguide.bootcss.com/">编码规范 by @mdo</a>，详见：</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul>
<li>对于属性值或颜色参数，值在 -1 和 1 之间时去掉小数点前的 “0”，如果属性值为数字 0，不加任何单位；</li>
<li>十六进制值应该全部小写，且尽量使用简写形式的十六进制值，例如，用 <code>#fff</code> 代替 <code>#ffffff</code></li>
<li>属性选择器或属性值使用双引号 “” 括起来</li>
<li>不要在 <code>rgb()</code>、<code>rgba()</code>、<code>hsl()</code>、<code>hsla()</code> 或 <code>rect()</code> 值的内部的逗号后面插入空格</li>
<li>在每个声明块的左花括号前、每条声明语句的冒号后、圆括号中的数学计算表达式的数值、变量和操作符之间都应该插入一个空格</li>
<li>每条声明都应该独占一行，声明块的右花括号应当单独成行</li>
<li>块级内容都应缩进，用两个空格来代替制表符（tab）</li>
<li>所有声明语句都应当以分号结尾</li>
<li>将媒体查询放在尽可能相关规则的附近，不要将打包放在单一样式文件中或文档底部</li>
<li>对于只包含一条声明的样式，为了易读性和便于快速编辑，建议将语句放在同一行。对于带有多条声明的样式，还是应当将声明分为多行。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.selector</span>,</span><br><span class="line"><span class="selector-class">.selector-secondary</span>,</span><br><span class="line"><span class="selector-class">.selector</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* Positioning */</span></span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Box-model */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Typography */</span></span><br><span class="line">  <span class="attribute">font</span>: normal <span class="number">13px</span> <span class="string">&quot;Helvetica Neue&quot;</span>, sans-serif;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Visual */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">15</span>);</span><br><span class="line">          <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">15</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon</span>           &#123; <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-class">.icon-home</span>      &#123; <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">20px</span>; &#125;</span><br><span class="line"><span class="selector-class">.icon-account</span>   &#123; <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">40px</span>; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h3><p>在适当的位置给予代码正确的注释，让他人更容易理解。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Wrapping element for .modal-title and .modal-close */</span></span><br><span class="line"><span class="selector-class">.modal-header</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果是对整个文件做注释，最好放在文本头部，简要描述一下文中元信息以及作用。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里描述元信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="样式顺序规范"><a href="#样式顺序规范" class="headerlink" title="样式顺序规范"></a>样式顺序规范</h3><p>相关的属性说明放在一组，提高代码的可读性。</p>
<ol>
<li>Positioning，布局方式、位置，如position, left, right, top, bottom, z-index等</li>
<li>Box model，盒模型，如display, float, width, height, margin, padding等</li>
<li>Typographic文本排版，如font, color, line-height, text-align</li>
<li>Visual视觉外观，如background, border, border-radius</li>
<li>Misc杂项，如opacity, transform, animation</li>
</ol>
<p><strong>完整排序请参考</strong>：<a href="https://github.com/twbs/stylelint-config-twbs-bootstrap/blob/master/css/index.js"><strong>https://github.com/twbs/stylelint-config-twbs-bootstrap/blob/master/css/index.js</strong></a></p>
<h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><h4 id="选择器命名规范"><a href="#选择器命名规范" class="headerlink" title="选择器命名规范"></a>选择器命名规范</h4><ul>
<li>class 名称中只能出现小写字符和破折号（dashe）（不是下划线，也不是驼峰命名法）。破折号应当用于相关 class 的命名（类似于命名空间）（例如，<code>.btn</code> 和 <code>.btn-danger</code>）。</li>
<li>避免过度任意的简写。<code>.btn</code> 代表 button，但是 <code>.s</code> 不能表达任何意思。</li>
<li>class 名称应当尽可能短，并且意义明确。</li>
<li>使用有意义的名称。使用有组织的或目的明确的名称，不要使用表现形式（presentational）的名称。</li>
<li>基于最近的父 class 或基本（base） class 作为新 class 的前缀。</li>
<li>使用 <code>.js-*</code> class 来标识行为（与样式相对），并且不要将这些 class 包含到 CSS 文件中。</li>
</ul>
<h4 id="文件命名规范"><a href="#文件命名规范" class="headerlink" title="文件命名规范"></a>文件命名规范</h4><ol>
<li>index.css: 一般用于首页建立样式</li>
<li>base.css: 共用样式</li>
<li>style.css: 独立页面所使用的样式文件</li>
<li>global.css: 页面样式基础，全局公用样式，页面中必须包含</li>
<li>layout.css: 布局、版面样式，公用类型较多时使用，一般用在首页级页面和产品类页面中</li>
<li>themes.css: 主体样式</li>
</ol>
<h4 id="页面结构命名"><a href="#页面结构命名" class="headerlink" title="页面结构命名"></a>页面结构命名</h4><ol>
<li>page: 代表整个页面，用于最外层。</li>
<li>wrap: 所有元素包在一起的一个外围包，用于最外层</li>
<li>wrapper: 页面外围控制整体布局宽度，用于最外层</li>
<li>container: 一个整体容器，用于最外层</li>
<li>head, header: 页头区域，用于头部</li>
<li>nav: 导航条</li>
<li>content: 内容，网站中最重要的内容区域，用于网页中部主体</li>
<li>main: 网站中的主要区域（表示最重要的一块位置），用于中部主体内容</li>
<li>column: 栏目</li>
<li>sidebar: 侧栏</li>
<li>foot, footer: 页尾、页脚。网站一些附加信息放置区域，或命名为 copyright用于底部</li>
</ol>
<h4 id="功能命名"><a href="#功能命名" class="headerlink" title="功能命名"></a>功能命名</h4><ol>
<li>breadcrumb: 页面所处位置导航提示</li>
<li>logo: 标记网站logo标志</li>
<li>banner: 标语、广告条、顶部广告条</li>
<li>homepage: 首页</li>
<li>subpage: 二级页面子页面</li>
<li>current: 当前的</li>
<li>login: 登陆，（例如登录表单：form-login）</li>
<li>register: 注册</li>
<li>tool, toolbar: 工具条</li>
<li>searchbar: 搜索条</li>
<li>searchlnput: 搜索输入框</li>
<li>icon: 小图标</li>
<li>label: 商标</li>
<li>hot: 热门热点</li>
<li>list: 文章列表，（例如：新闻列表：list-news）</li>
<li>scroll: 滚动</li>
<li>tab: 标签</li>
<li>msg 或 message: 提示信息</li>
<li>status: 状态</li>
<li>btn: 按钮，（例如：搜索按钮可写成：btn-search）</li>
<li>tips: 小技巧</li>
<li>note: 注释</li>
<li>arr, arrow: 标记箭头</li>
<li>download: 下载</li>
<li>vote: 投票</li>
</ol>
<h4 id="导航命名"><a href="#导航命名" class="headerlink" title="导航命名"></a>导航命名</h4><ol>
<li>nav, navbar, navigation, nav-wrapper: 导航条或导航包，代表横向导航</li>
<li>topnav: 顶部导航</li>
<li>mainbav: 主导航</li>
<li>subnav: 子导航</li>
<li>sidebar: 边导航</li>
<li>leftsidebar 或 sidebar_a: 左导航</li>
<li>rightsidebar 或 sidebar_b: 右导航</li>
<li>title: 标题</li>
<li>summary: 摘要</li>
<li>menu: 菜单，区域包含一般的链接和菜单</li>
<li>submenu: 子菜单</li>
<li>drop: 下拉</li>
<li>dorpmenu: 下拉菜单</li>
<li>links: 链接菜单</li>
</ol>
<h4 id="页尾命名"><a href="#页尾命名" class="headerlink" title="页尾命名"></a>页尾命名</h4><ol>
<li>sitemap: 网站地图</li>
<li>joinus: 加入</li>
<li>siteinfo: 网站信息</li>
<li>partner: 合作伙伴</li>
<li>link, friendlink: 友情链接</li>
<li>copyright: 版权信息</li>
<li>siteinfoCredits: 信誉</li>
<li>siteinfoLegal: 法律信息</li>
</ol>
]]></content>
      <categories>
        <category>技术小合集</category>
      </categories>
      <tags>
        <tag>summary</tag>
      </tags>
  </entry>
  <entry>
    <title>chrome调试指南</title>
    <url>/tool-devTool/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>工欲善其事,必先利其器。</strong><br>轻量 便捷 实时</p>
<blockquote>
<p>Chrome 开发者工具是一套内置于Google Chrome中的Web开发和调试工具，可用来对网站进行迭代、调试和分析。</p>
</blockquote>
<span id="more"></span>

<h2 id="如何打开？"><a href="#如何打开？" class="headerlink" title="如何打开？"></a>如何打开？</h2><ul>
<li>在Chrome菜单中选择 更多工具 &gt; 开发者工具</li>
<li>在页面元素上右键点击，选择 “检查”</li>
<li>使用 快捷键 Ctrl+Shift+I (Windows) 或 Cmd+Opt+I (Mac)</li>
</ul>
<h1 id="设备模式"><a href="#设备模式" class="headerlink" title="设备模式"></a>设备模式</h1><p><strong>构建完全响应式，移动优先的网络体验</strong></p>
<blockquote>
<p>点击它可以切换到不同的终端(移动端和pc端)进行开发模式。<br>还可以选择不同的移动终端设备，同时可以选择不同的尺寸比例。<br>chrome浏览器的模拟移动设备和真实的设备相差不大，是非常好的选择。    </p>
</blockquote>
<h2 id="HOW-TO-USE？"><a href="#HOW-TO-USE？" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/device1_2.png" alt="image">  </p>
<p>除了上图标出的功能，右上角可以发现移动端调试的更多功能哦!<br><img src="/image/devTool/device2.png" width="300"/></p>
<ul>
<li>Show device frame : 显示设备外壳</li>
<li>Show media queries : 显示媒体查询(对屏幕大小的判断生成响应式布局)</li>
<li>Show rulers : 显示标尺</li>
<li>Add device pixel ratio : 调整设备的像素比例</li>
<li>Add device type : 调整设备类型</li>
<li>Capture screenshot : 捕捉当前屏幕截图</li>
<li>Capture full size screenshot : 捕捉完整屏幕截图</li>
<li>Reset to defaults : 恢复默认</li>
</ul>
<h1 id="元素面板"><a href="#元素面板" class="headerlink" title="元素面板"></a>元素面板</h1><p><strong>使用元素面板可以自由的操作DOM和CSS来迭代布局和设计页面</strong></p>
<blockquote>
<p>该面板可以用来查看、修改页面上的元素，包括DOM标签以及css样式的查看、修改(ctrl + z 可撤销修改)，还可以展示相关盒模型的图形信息。    </p>
</blockquote>
<h2 id="HOW-TO-USE？-1"><a href="#HOW-TO-USE？-1" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/elments.png" alt="image">  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">🚩Tips：在 HTML DOM （文档对象模型）中，每个部分都是节点：  </span><br><span class="line">1、文档本身是文档节点  </span><br><span class="line">2、所有 HTML 元素是元素节点  </span><br><span class="line">3、所有 HTML 属性是属性节点  </span><br><span class="line">4、HTML 元素内的文本是文本节点（包括回车符也是属于文本节点）  </span><br><span class="line">5、注释是注释节点  </span><br><span class="line">Element 对象可以拥有类型为元素节点、文本节点、注释节点的子节点；  </span><br><span class="line">元素也可以拥有属性，属性是属性节点。  </span><br><span class="line">✔️总结：元素是元素节点，是节点中的一种，但元素节点中可以包含很多的节点。  </span><br></pre></td></tr></table></figure>
<p><img src="/image/devTool/elements1.png" alt="image"></p>
<p>点击箭头按钮可选择元素,激活后，Elements窗口会根据在页面中鼠标的位置自动移动到相应的代码段并显示相关信息。  </p>
<h3 id="区域①：Html的DOM树结构，可以进行查看定位编辑；"><a href="#区域①：Html的DOM树结构，可以进行查看定位编辑；" class="headerlink" title="区域①：Html的DOM树结构，可以进行查看定位编辑；"></a>区域①：Html的DOM树结构，可以进行查看定位编辑；</h3><ul>
<li>页面自动标出鼠标悬浮所在代码片段元素</li>
<li>点击DOM树视图里面的节点，区域2显示相关信息</li>
<li>直接在某个节点上双击即可修改，且能实时在浏览器里面得到反馈。</li>
<li>拖拽节点可以直接调整顺序，也可以拖拽节点到编辑器</li>
<li>浏览器对例如Video、Password等组件进行了封装，无法查看到组件的详细代码，不利于调试。Settings → Preferences → Elements → 勾选Show user agent shadow DOM,这样能够在元素标签器中显示被隐藏的组件代码<h3 id="区域②：编辑修改并实时显示当前选中元素的CSS样式、属性等。"><a href="#区域②：编辑修改并实时显示当前选中元素的CSS样式、属性等。" class="headerlink" title="区域②：编辑修改并实时显示当前选中元素的CSS样式、属性等。"></a>区域②：编辑修改并实时显示当前选中元素的CSS样式、属性等。</h3></li>
<li>Styles标签页: 显示用户定义的样式，还有开发者工具添加的样式；<ul>
<li>顶部”Filter”输入框 : 快速查找样式</li>
<li>顶部”:hov”按钮 : 可强制改变元素状态,:active(当元素被鼠标按下还没有松开，处于激活状态时所显示的状态),:hover(鼠标悬停时显示的状态),:focus(元素获得光标焦点时的状态),:visited(元素被点击后显示的状态)</li>
<li>顶部”.cls”按钮 : 快速修改元素class</li>
<li>顶部”+”按钮 : 快速添加class</li>
<li>单击即可修改样式</li>
<li>在每个属性后面单击可以添加新的样式</li>
<li>灰色的element.style同样可以进行添加和书写，唯一区别是在这里添加的样式是添加到了该元素内部，即style属性</li>
<li>点击样式区域颜色前面的小方块可调出自定义调色板,支持在rgba、hsl和hexadecimal来回切换颜色模式和实时编辑预览页面颜色。</li>
<li>每行右下角的”┇”可以快速添加阴影、字体颜色、背景颜色</li>
</ul>
</li>
<li>Computed标签页: 显示开发者工具计算好的元素样式（盒式模型）；<ul>
<li>双击数字即可修改</li>
</ul>
</li>
<li>Event Listeners标签页: 显示当前DOM节点和其祖先节点的所有JavaScript事件监听器,即查看元素上绑定了哪些事件；<ul>
<li>勾选Ancestors可显示其祖先节点的事件监听器</li>
<li>勾选Framework listeners:解析框架绑定的事件监听器</li>
<li>每个事件会有对应的几个属性 handler,useCapture等<ul>
<li>handler是处理函数, 右键可以看到这个函数定义的位置</li>
<li>useCapture 是 addEventListener 的第三个参数，如果是true，表示在事件捕获阶段调用事件处理程序；如果是false，表示在事件冒泡阶段调用事件处理程序。</li>
</ul>
</li>
</ul>
</li>
<li>DOM Breakpoints标签页: 列出所有的DOM断点；<ul>
<li>在区域①右键可设置断点</li>
</ul>
</li>
<li>Properties标签页: 全面地列出当前选中元素的属性；</li>
</ul>
<h3 id="dom对象的辅助功能"><a href="#dom对象的辅助功能" class="headerlink" title="dom对象的辅助功能"></a>dom对象的辅助功能</h3><img src="/image/devTool/elements2.png" width="300"/>
- Add attribute : 添加元素属性
- Edit attribute : 编辑元素属性
- Edit as HTML : 直接对元素的HTML进行编辑，所有的修改都会即时在页面上得到呈现
- Copy : 复制HTML代码
    - Copy outerHTML : 复制元素内所有的html和文本内容
    - Copy selector : 复制元素结构
    - Copy xpath : 复制元素路径(爬虫神器)
    - Cut element : 剪切元素
    - Copy element : 复制元素
    - Paste element : 粘贴元素
- Hide element : 隐藏元素
- Delete element : 删除元素
- Expand all : 展开元素所有代码
- Collapse all : 折叠元素所有代码
- Scroll into view : 滚动浏览器窗口或容器元素，以便在当前视窗的可见范围看见当前元素。
- Break on : 可以对某个元素进行监听，在JS对元素的属性或者HTML进行修改的时候，直接触发断点，跳转到对改元素进行修改的JS代码处
    - subtree modifications : 当添加／改变／删除子元素时触发
    - attribute modifications : 当元素属性被改变时触发
    - node removal : 当移除元素时触发

<h1 id="控制台面板"><a href="#控制台面板" class="headerlink" title="控制台面板"></a>控制台面板</h1><p><strong>在开发期间，可以使用控制台面板记录诊断信息，或者使用它作为shell在页面上与JavaScript交互</strong></p>
<blockquote>
<p>console 中有很多对我们调试代码有帮助的函数，我们可以在开发环境中配合 console 来调试代码，使得我们测试更加便利。<br>注： 当需要换到下一行而不是回车的时候，请按Shift+Enter。</p>
</blockquote>
<h2 id="HOW-TO-USE？-2"><a href="#HOW-TO-USE？-2" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/console.png" alt="image">  </p>
<table>
<thead>
<tr>
<th>代码实例</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>console.log(“这是平凡的字符串”);</td>
<td>打印字符串</td>
</tr>
<tr>
<td>console.info(“这是温柔的提示”);</td>
<td>打印提示消息</td>
</tr>
<tr>
<td>console.warn(“这是严肃的警告”);</td>
<td>打印警告消息</td>
</tr>
<tr>
<td>console.error(“这是错误消息”);</td>
<td>打印错误消息</td>
</tr>
<tr>
<td>console.debug(“这是调试信息”);</td>
<td>打印调试信息,console.log方法的别称</td>
</tr>
<tr>
<td>console.log(console);</td>
<td>打印对象</td>
</tr>
<tr>
<td>console.assert(1 &#x3D;&#x3D; 0);</td>
<td>判断真假情况</td>
</tr>
<tr>
<td>console.group(‘报数’);  console.log(“一！”);  console.log(“二！”);  console.groupEnd();</td>
<td>分组输出</td>
</tr>
<tr>
<td>console.groupCollapsed();</td>
<td>创建一个新的分组.随后输出到控制台上的内容都会被添加一个缩进,表示该内容属于当前分组,直到调用console.groupEnd() 之后,当前分组结束。</td>
</tr>
<tr>
<td>var data &#x3D; [{‘姓名’: ‘zlt’, ‘数量’: 1}];    console.table(data);</td>
<td>显示关联数组信息</td>
</tr>
<tr>
<td>console.dir(document.body);</td>
<td>将一个 JavaScript 对象的所有属性和属性值显示成一个可交互的列表,以树的结构进行输出</td>
</tr>
<tr>
<td>var test &#x3D; document.getElementById(‘test’);   console.dirxml(test);</td>
<td>查看页面中对应元素的 html&#x2F;xml 内容</td>
</tr>
<tr>
<td>console.log(‘%cMy name is zlt.’, ‘color: #fff; background: #000; font-size: 24px;’);</td>
<td>特殊的标示符%c，对输出的文字可以附加特殊的样式,background属性的url()中添加图片路径就可以实现图片的输出了</td>
</tr>
<tr>
<td>$(‘table’)</td>
<td>返回与指定的CSS选择器相匹配的第一个元素，等同于document.querySelector();如果你使用的库，如jQuery使用$，那么这个功能将被覆盖，并且$将对应用该库的实现</td>
</tr>
<tr>
<td>$$(‘table’)</td>
<td>返回与指定的CSS选择器相匹配的所有元素的数组，等同于document.querySelectorAll()</td>
</tr>
<tr>
<td>$_</td>
<td>引用最近的一个表达式,功能与按向上的方向键再回车一样</td>
</tr>
<tr>
<td>$0 ~ $4</td>
<td>最近选择过的5个DOM节点。$0会返回最近一次点选的DOM结点。以此类推，$1返回的是上上次点选的DOM节点。最多可以保存5个，如果不满5个，则返回undefined。</td>
</tr>
<tr>
<td>$x(‘&#x2F;&#x2F;*[@id&#x3D;”console”]&#x2F;div[2]&#x2F;table[2]&#x2F;tbody&#x2F;tr[4]’)</td>
<td>返回与指定的XPath相匹配的所有元素的数组</td>
</tr>
<tr>
<td>var data &#x3D; {name: ‘zlt’,num: 1};   keys(data);</td>
<td>返回传入对象所有属性名组成的数据</td>
</tr>
<tr>
<td>var data &#x3D; {name: ‘zlt’,num: 1};   values(data);</td>
<td>返回所有属性值组成的数组</td>
</tr>
<tr>
<td>inspect(document.body)</td>
<td>Elements面板跳到需要查看的对象上</td>
</tr>
<tr>
<td>getEventListeners(document.getElementById  (“eventListeners”)).click[0].listener</td>
<td>查看某个DOM对象上的事件</td>
</tr>
<tr>
<td>monitorEvents(document.body, “click”)</td>
<td>监控相关的事件,unmonitorEvents便是用来停止这一监控</td>
</tr>
<tr>
<td>console.clear()</td>
<td>清理函数</td>
</tr>
<tr>
<td>clear()</td>
<td>用 chrome 的 command line api 来清理控制台</td>
</tr>
<tr>
<td>copy(document.body)</td>
<td>在控制台获取到的内容复制到剪贴板</td>
</tr>
<tr>
<td>document.designMode &#x3D; “on”</td>
<td>直接修改网页内容</td>
</tr>
<tr>
<td><strong>monitor(function) 接收一个函数名作为参数，比如function a,每次a被执行了，都会在控制台输出一条信息，里面包含了函数的名称a及执行时所传入的参数。 而unmonitor(function)便是用来停止这一监听。</strong></td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;hello,&#x27;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">monitor</span>(sayHello);</span><br><span class="line"><span class="title function_">sayHello</span>(<span class="string">&#x27;zlt&#x27;</span>);</span><br><span class="line"><span class="title function_">unmonitor</span>(sayHello);</span><br><span class="line"><span class="title function_">sayHello</span>(<span class="string">&#x27;zlttt&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>调试一个方法，当该方法调用时会暂停并且在源码中定位，效果和断点类似。undebug可以停止调试。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;hello,&#x27;</span> + name); </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">debug</span>(sayHello);</span><br><span class="line"><span class="title function_">sayHello</span>(<span class="string">&#x27;zlt&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>记录次数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hi</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">count</span>(name);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hi &quot;</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span>(i &lt; <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="title function_">hi</span>(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">hi</span>(<span class="string">&quot;zlt&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>记录代码运行所花费的时间,评估某段代码或是某个函数的性能</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;神机妙算&quot;</span>);</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> sum = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> flog = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">          flog+=i;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;)();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&quot;神机妙算&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>评估某段代码或是某个函数的性能,结果显示在 Memory面板的profile中</strong><br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">profile</span>(<span class="string">&quot;更高级的神机妙算&quot;</span>);</span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> sum = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> flog = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">          flog+=i;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">profileEnd</span>(<span class="string">&quot;更高级的神机妙算&quot;</span>);</span><br></pre></td></tr></table></figure><br><strong>追踪函数的调用过程</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="number">0</span> &lt; num) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">trace</span>(<span class="string">&quot;现在num的值为&quot;</span>, num);</span><br><span class="line">    <span class="keyword">return</span> num + <span class="title function_">add</span>(num - <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a =<span class="number">3</span>;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h1 id="源代码面板"><a href="#源代码面板" class="headerlink" title="源代码面板"></a>源代码面板</h1><blockquote>
<p>在源代码面板中设置断点来调试 JavaScript ，或者通过Workspaces（工作区）连接本地文件来使用开发者工具的实时编辑器。</p>
</blockquote>
<h2 id="HOW-TO-USE？-3"><a href="#HOW-TO-USE？-3" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/sources.png" alt="image">  </p>
<h3 id="区域①：Sources-Panel-的左侧分别是-Sources-和-Content-scripts和Snippets"><a href="#区域①：Sources-Panel-的左侧分别是-Sources-和-Content-scripts和Snippets" class="headerlink" title="区域①：Sources Panel 的左侧分别是 Sources 和 Content scripts和Snippets"></a>区域①：Sources Panel 的左侧分别是 Sources 和 Content scripts和Snippets</h3><ul>
<li>Sources : 显示加载的JS、CSS、HTML资源列表，点击后会在区域2显示对应的源代码<ul>
<li>Workspaces是Chrome DevTools的一个强大功能，这使DevTools变成了一个真正的IDE。只需打开Sources选项，然后右击左边面板的任何一个地方，选择Add Folder To Worskpace，或者只是把你的整个工程文件夹拖放入Developer Tool。</li>
<li>Workspaces会将Sources选项卡中的文件和本地项目中的文件进行匹配，所以你可以直接编辑和保存，而不必复制&#x2F;粘贴外部改变的文件到编辑器。</li>
</ul>
</li>
<li>Content scripts : 这是 Chrome 的一种扩展程序， 它是按照扩展的ID来组织的，这些文件也是嵌入在页面中的资源，这类文件可以 读写和操作我们的资源，需要调试这些扩展文件，则可以在这个目录下打开相关 文件调试（但是我们的项目一般没有相关的扩展文件）</li>
<li>Snippets : 点击创建一个新的片段文件，写完后把右键文件Run，再结合控制台查看相关信息</li>
</ul>
<h3 id="区域②：显示源码"><a href="#区域②：显示源码" class="headerlink" title="区域②：显示源码"></a>区域②：显示源码</h3><ul>
<li>如果当前代码是经过压缩的话，可以点击左下方的花括号{}来增强可读性</li>
<li>点击JS代码块前面的数字可以设置断点，所有的断点都会列出右侧的断点区；</li>
<li>除了常规断点外, 还有个条件断点(右键 conditional breakpoint), 在设置的条件为 true 时才会断点, 在循环中需要断点时比较有用.</li>
<li>在当前的代码执行区域，在调试中如果发现需要修改的地方，可以立即修改，修改后保存即可生效</li>
</ul>
<h3 id="区域③：调试的功能区域"><a href="#区域③：调试的功能区域" class="headerlink" title="区域③：调试的功能区域"></a>区域③：调试的功能区域</h3><ul>
<li>最上面一排按钮分别是：<ul>
<li>暂停(F8快捷键):继续执行脚本的命令,如果后面还有断点,直接执行到后面的断点,没有断点直接执行到代码最后面</li>
<li>单步执行(F10快捷键):直接执行完函数进行下一步,不进入函数</li>
<li>单步跳入此执行块(F11快捷键):进入函数逐步执行函数</li>
<li>单步跳出此执行块(shift + F11快捷键):跳出函数</li>
<li>禁用所有断点:注释断点,仍旧显示但是不起作用</li>
<li>启用所有断点:图标激活之后,在代码出错之后会直接跳转到代码出错的那一行</li>
</ul>
</li>
<li>Watch：可以添加需要监听的变量，执行断点时可以观察变量的变化情况；<ul>
<li>选中变量后右键add selected text to watches可以添加监听</li>
<li>Watch窗口可直接添加需要监听的变量</li>
</ul>
</li>
<li>Call Stack：查看断点执行的堆栈情况，可以快速定位断点执行入口；<ul>
<li>若想重新从某个调用方法处执行，可以右键Restart Frame， 断点就会跳到此处开头重新执行，Scope 中的变量值也会依据代码重新更改</li>
</ul>
</li>
<li>Scope : 查看此时局部变量和全局变量的值</li>
<li>Breakpoints: 所有当前js的断点都会展示在这个区域，你可以点击按钮用来“去掉&#x2F;加上”此处断点，也可以点击下方的代码表达式，跳到相应的程序代码处来查看</li>
<li>XHR Breakpoints: 点击右侧的+号，可以添加请求的URL，一旦 XHR 调用触发时就会在 request.send() 的地方中断</li>
<li>DOM Breakpoints: 监听和查看某个元素的变化的DOM断点列表</li>
<li>Event Listener Breakpoints：勾选你要监听的事件，在指定的事件执行时，断点就会有触发；</li>
</ul>
<h1 id="网络面板"><a href="#网络面板" class="headerlink" title="网络面板"></a>网络面板</h1><p><strong>使用网络面板了解请求和下载的资源文件并优化网页加载性能</strong></p>
<blockquote>
<p>可以看到所有的资源请求，包括网络请求，图片资源，html,css，js文件等请求，可以根据需求筛选请求项，一般多用于网络请求的查看和分析，分析后端接口是否正确传输，获取的数据是否准确，请求头，请求参数的查看。</p>
</blockquote>
<h2 id="HOW-TO-USE？-4"><a href="#HOW-TO-USE？-4" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/network.png" alt="image">  </p>
<h3 id="区域①：Controls工具栏"><a href="#区域①：Controls工具栏" class="headerlink" title="区域①：Controls工具栏"></a>区域①：Controls工具栏</h3><p>用来控制Network的功能及外观,从左往右功能依次为：</p>
<ul>
<li>(红色圆点)Record Network Log: 红色表示此时正在记录资源请求信息；</li>
<li>(灰色🚫)Clear: 清空所有的资源请求信息；</li>
<li>(摄像标志)捕获快照：选中某一个快照，在概览&#x2F;请求列表出现的黄色竖线，就是该快照被捕捉的真实时间，双击快照可以放大。</li>
<li>(过滤标志)Filter: 过滤资源请求信息，选择后，会出现区域2所显示的过滤条件；</li>
<li>Perserve Log: 勾选后，再次记录请求的信息时不擦除之前的资源信息；</li>
<li>Disable cache: 勾选后，不允许缓存，所有资源均重新加载</li>
<li>offline: 勾选后，模拟断开网络</li>
<li>Online: 选择模拟网络状态</li>
</ul>
<h3 id="区域②：Filters筛选栏"><a href="#区域②：Filters筛选栏" class="headerlink" title="区域②：Filters筛选栏"></a>区域②：Filters筛选栏</h3><p>根据筛选条件筛选请求列表，按住command&#x2F;ctrl键可多选;筛选框可以实现很多定制化的筛选，比如字符串匹配，关键词筛选等，其中关键词筛选主要有如下几种：</p>
<ul>
<li>domain：筛选出指定域名的请求，不仅支持自动补全，还支持*匹配。</li>
<li>has-response-header：筛选出包含指定响应头的请求。</li>
<li>is：通过is:running找出WebSocket请求。</li>
<li>larger-than：筛选出请求大于指定字节大小的请求，其中1000表示1k。</li>
<li>method：筛选出指定HTTP方法的请求，比如GET请求、POST请求等。</li>
<li>mime-type：筛选出指定文件类型的请求。</li>
<li>mixed-content：筛选出混合内容的请求（不懂啥意思）。</li>
<li>scheme：筛选出指定协议的请求，比如scheme:http、scheme:https。</li>
<li>set-cookie-domain：筛选出指定cookie域名属性的包含Set-Cookie的请求。</li>
<li>set-cookie-name：筛选出指定cookie名称属性的包含Set-Cookie的请求。</li>
<li>set-cookie-value：筛选出指定cookie值属性的包含Set-Cookie的请求。</li>
<li>status-code：筛选出指定HTTP状态码的请求。</li>
</ul>
<h3 id="区域③：Overviews-概览"><a href="#区域③：Overviews-概览" class="headerlink" title="区域③：Overviews 概览"></a>区域③：Overviews 概览</h3><p>资源被加载过来的时间线</p>
<ul>
<li>如果多条时间线垂直堆叠，表示多个资源被并行加载。</li>
</ul>
<h3 id="区域④：Request-Table-请求列表"><a href="#区域④：Request-Table-请求列表" class="headerlink" title="区域④：Request Table 请求列表"></a>区域④：Request Table 请求列表</h3><ul>
<li>该视窗列出了所有的资源请求，默认按时间顺序排序，点击某个资源，可以查看更详细的信息。</li>
<li>Name: 资源名称以及URL路径；</li>
<li>Status: HTTP状态码；</li>
<li>Type: 请求资源的MIME类型；</li>
<li>Initiator解释请求是怎么发起的，有四种可能的值：<ul>
<li>Parser：请求是由页面的HTML解析时发送的;</li>
<li>Redirect：请求是由页面重定向发送的;</li>
<li>Script：请求是由script脚本处理发送的;</li>
<li>Other：请求是由其他过程发送的，比如页面里的link链接点击。</li>
</ul>
</li>
<li>Size: Size是响应头部和响应体结合起来的大小；</li>
<li>Time: Time是从请求开始到接收到最后一个字节的总时长,可利用区域3进行过滤；</li>
<li>Waterfall: 显示网络请求的可视化瀑布流，鼠标悬停在某一个时间线上，可以显示整个请求各部分花费的时间</li>
<li>右键配置可请求列表</li>
<li>按时shift键，鼠标hover在请求上，可以查看请求的上游和下游，例如hover在common.js上，可以看到有一个绿色请求、一个红色请求。其中绿色请求表示common.js的上游请求，即谁触发了common.js请求，红色请求表示common.js的下游请求，即common.js又触发了什么请求。</li>
</ul>
<h3 id="区域⑤：Summary-总览"><a href="#区域⑤：Summary-总览" class="headerlink" title="区域⑤：Summary 总览"></a>区域⑤：Summary 总览</h3><p>汇总了请求数量，传输数据大小，加载时间等信息,从左往右依次显示为：</p>
<ul>
<li>X requests:请求总个数</li>
<li>X transferred:所有请求的大小</li>
<li>Finish:加载完毕时间</li>
<li>DOMContentLoaded:页面文档完全加载并解析完毕之后，会触发DOMContentLoaded事件，它在两个地方都有体现：概览视窗的蓝色竖线，总览视窗的触发时间。</li>
<li>Load:当所有资源加载完成后触发的，它在三个地方有体现：概览视窗的红色竖线，请求列表视窗的红色竖线，总览视窗的触发时间。</li>
</ul>
<p><img src="/image/devTool/network2.png" alt="image"><br>点击左侧某一个具体请求URL，可以看到该请求的详细HTTP请求情况：</p>
<ul>
<li>Headers：请求头信息和响应头信息</li>
<li>Preview：预览结果，如果是文件可以查看这个文件；如果是图片可以预览这个图片；如果是从服务器返回来的JSON数据，可以查看格式话后的JSON</li>
<li>Response：从服务器返回的响应结果</li>
<li>Cookies：请求和响应的Cookie<ul>
<li>Name：cookie的名称。</li>
<li>Value：cookie的值。</li>
<li>Domain：cookie所属域名。</li>
<li>Path：cookie所属URL。</li>
<li>Expire&#x2F;Max-Age：cookie的存活时间。</li>
<li>Size：cookie的字节大小。</li>
<li>HTTP：表示cookie只能被浏览器设置，而且JS不能修改。</li>
<li>Secure：表示cookie只能在安全连接上传输。</li>
</ul>
</li>
<li>Timing：查看资源请求的生命周期，包含Queing&#x2F;Stalled&#x2F;Request&#x2F;Response&#x2F;Request sent&#x2F;Waiting&#x2F;Content Download各个阶段</li>
</ul>
<h1 id="性能面板"><a href="#性能面板" class="headerlink" title="性能面板"></a>性能面板</h1><p><strong>使用性能面板可以通过记录和查看网站生命周期内发生的各种事件来提高页面的运行时性能</strong></p>
<blockquote>
<p>在 Chrome 57 之后时间线(Timeline)面板更名为性能(Performance)面板。</p>
</blockquote>
<h2 id="HOW-TO-USE？-5"><a href="#HOW-TO-USE？-5" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/performance2.png" alt="image"><br>使用 Chrome DevTools 的 Performance 面板记录程序运行时的所有行为，并用于加以分析是解决程序性能问题的最好方案。 由以下四个子面板构成：</p>
<ul>
<li>控制面板（Controls）: 开启记录，停止记录，配置记录期间需要记录的内容。</li>
<li>概括（Overview）: 对页面表现（行为）的一个概述。<ul>
<li>概括区域由三个图形记录组成:<ul>
<li>FPS（Frames Per Second）:绿色的柱越高， FPS 值也越高。FPS 图表上方的红色小块指明了长帧(long frame)，这些可能是卡顿</li>
<li>CPU(CPU Resources):这个面积图(area chart)表明了哪种事件在消耗 CPU 资源。</li>
<li>NET:每种不同颜色的条代表一种资源。<ul>
<li>条越长表明获取该资源所花的时间越长。</li>
<li>每个条中的浅色部分代表等待时间（资源请求被发送到收到第一个响应字节的时间），深色部分代表文件传输时间（从收到第一个字节到这个资源完全被下载好）</li>
<li>蓝色 代表 HTML 文件，黄色 代表 Script 文件，紫色 代表 Stylesheets 文件， 绿色 代表 Media 文件，灰色 代表其他资源。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>火焰图（Flame Chart）: 可视化 CPU 堆栈(stack)信息记录。<ul>
<li>从不同的角度分析框选区域 。例如：Network，Frames, Interactions, Main等</li>
<li>在 Flame Chart 面板上你可能看到三根垂直的线，蓝线代表 DOMContentLoaded 事件，绿线代表渲染开始的时间( time to first paint)，红线代表 load 事件。</li>
</ul>
</li>
<li>详细信息（Detail）: 当有具体事件被选择时，该面板展示这个事件的更多详细信息。如果没有事件被选择，该面板展示当前所选时间段的一些信息。<ul>
<li>精确到毫秒级的分析，以及按调用层级，事件分类的整理<ul>
<li>Summary面板:从宏观层面概括了浏览器加载的总时间<ul>
<li>颜色：蓝色    ；英文： Loading；含义：加载</li>
<li>颜色：黄色    ；英文： Scripting；含义：    脚本</li>
<li>颜色：紫色    ；英文： Rendering；含义：    渲染</li>
<li>颜色：绿色    ；英文： Painting；含义：    绘制</li>
<li>颜色：深灰    ；英文： Other；含义：    其他</li>
<li>颜色：浅灰    ；英文： Idle；含义：    空闲</li>
</ul>
</li>
<li>Bottom-Up面板：The Heavy (Bottom Up) view is available in the Bottom-Up tab<ul>
<li>Self Time代表函数本身执行消耗时间，Total Time则是函数本身消耗再加上在调用它的函数中消耗的总时间，Activity是浏览器活动。</li>
<li>Group面板可以很清晰明了得分析按照活动、目录、域、子域、URL和Frame进行分组的前端性能。</li>
</ul>
</li>
<li>Call Tree面板：the Tree (Top Down) view is available in the Call Tree tab<ul>
<li>Bottom-Up类似事件冒泡，Call Tree类似事件捕获。自上而下的Call-Tree更符合我们的人类正常思维，可以更直观地分析浏览器对页面的build精确到毫秒级的情况</li>
</ul>
</li>
<li>Event Log面板 :展示所有阶段包括loading、javascripting、rendering、painting中各事件的耗时情况，并提供了filter输入框和按钮供你快速过滤。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="内存面板"><a href="#内存面板" class="headerlink" title="内存面板"></a>内存面板</h1><p><strong>如果需要比性能面板提供的更多信息，可以使用内存面板，例如跟踪内存泄漏</strong></p>
<blockquote>
<p>在 Chrome 57 之后分析（Profiles）面板更名为内存（Memory）面板。</p>
</blockquote>
<h2 id="HOW-TO-USE？-6"><a href="#HOW-TO-USE？-6" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/memory.png" alt="image"><br>如果在页面中出现卡顿现象，可以使用 CPU 分析器，它准确地记录调用了哪些函数和每个函数花费的时间，</p>
<ul>
<li>Take Heap Snapshot:创建堆快照用来显示网页上的JS对象和相关的DOM节点的内存分布情况。<ul>
<li>利用该工具你可以创建JS的堆快照、内存分析图、对比堆快照以及定位内存泄漏问题。</li>
<li>选中Take Heap Snapshot,点击Take Snapshot按钮即可获取快照，在每一次获取快照前都会自动执行垃圾回收操作。</li>
<li>堆快照提供了不同的视角来进行查看：<ul>
<li>Summary : 该视图按照构造函数进行分组，用它可以捕获对象和它们使用的内存情况，对于跟踪定位DOM节点的内存泄漏特别有用。</li>
<li>Comparison : 对比两个快照的差别，用它可以对比某个操作前后的内存快照。分析操作前后的内存释放情况以及它的引用计数，便于你确认内存是否存在泄漏以及造成的原因。</li>
<li>Containment : 该视图可以探测堆的具体内容，它提供了一个更适合的视图来查看对象结构，有助于分析对象的引用情况，使用它可以分析闭包和进行更深层次的对象分析。</li>
<li>Statistics : 统计视图。</li>
</ul>
</li>
</ul>
</li>
<li>Record Allocation Profile:从JS函数角度记录内存的分配信息。<ul>
<li>点击Start按钮，执行你想要去深入分析的页面操作，当你完成你的操作后点击Stop按钮。然后会显示一个按JS函数进行内存分配的分解图.</li>
</ul>
</li>
<li>Record Allocation Timeline 从整个Heap角度记录内存的分配信息的时间轴信息，利用这个可以实现隔离内存泄漏问题。<ul>
<li>选中Record Allocation Timeline按钮，点击Start按钮之后，执行你认为可能会引起内存泄漏的操作，操作之后点击左上角的停止按钮即可。</li>
<li>你可以在蓝色竖线上通过缩放来过滤构造器窗格来仅仅显示在指定的时间帧内的被分配的对象。</li>
<li>录制过程中，在时间线上会出现一些蓝色竖条，这些蓝色竖条代表一个新的内存分配，这个新的内存分配都可以会有潜在的内存泄露问题。</li>
<li>通过展开对象并点击它的值则可以在Object窗格中查看更多新分配的对象细节。</li>
</ul>
</li>
</ul>
<h1 id="应用面板"><a href="#应用面板" class="headerlink" title="应用面板"></a>应用面板</h1><p><strong>使用应用面板可以检查加载的所有资源</strong></p>
<blockquote>
<p>在 Chrome 52 之后资源(Resources)面板更名为应用(Application)面板. 该面板可以检查和修改IndexedDB与Web SQL数据库，本地和会话存储，cookie，应用程序缓存，图像，字体和样式表。 点击一次按钮即可清除所有存储、数据库、缓存和服务工作线程。</p>
</blockquote>
<h2 id="HOW-TO-USE？-7"><a href="#HOW-TO-USE？-7" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/application.png" alt="image">  </p>
<ul>
<li>Local Storage : 如果你在开发过程中使用了local storage来存储键值对(KVPs)，那么你就可以通过Local Storage窗格来检查、新增、修改、删除这个键值对。</li>
<li>Application Cache : 你可以使用Application Cache窗格去查看通过Application Cache API创建的资源。</li>
<li>Frames : 将页面上的资源按frame类别进行组织显示。在资源上右击后在弹出菜单选择Reveal in Network Panel，就会跳转到Network面板并定位到该资源的位置。</li>
</ul>
<h1 id="安全面板"><a href="#安全面板" class="headerlink" title="安全面板"></a>安全面板</h1><p><strong>使用安全面板调试混合内容问题，证书问题等等。</strong></p>
<blockquote>
<p>使用 Security Overview 可以立即查看当前页面是否安全。 检查各个源以查看连接和证书详情（安全源）或找出具体哪些请求未受保护（非安全源）。</p>
</blockquote>
<h2 id="HOW-TO-USE？-8"><a href="#HOW-TO-USE？-8" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/security.png" alt="image">  </p>
<ul>
<li>如果网页是安全的，则会显示这样一条消息：This page is secure (valid HTTPS)。<ul>
<li>通过点击View certificate可以查看main origin的服务器证书信息。</li>
<li>点击左侧可以查看指定源的连接和证书详情。</li>
</ul>
</li>
<li>如果网页是不安全的，则会显示：This page is not secure。该面板可以区分两种类型的不安全的页面：<ul>
<li>如果被请求的页面通过HTTP提供服务，那么这个主源就会被标记为不安全。</li>
<li>如果被请求的页面是通过HTTPS获取的，但这个页面接着通过HTTP继续从其他来源检索内容， 那么这个页面仍然被标记为不安全。这就是所谓的混合内容页面,混合内容页面只是部分受到保护, 因为HTTP内容(非加密的内容)可以被嗅探者入侵,容易受到中间人攻击。</li>
</ul>
</li>
</ul>
<h1 id="检查面板"><a href="#检查面板" class="headerlink" title="检查面板"></a>检查面板</h1><p><strong>对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议</strong></p>
<blockquote>
<p>选中Performance, Best Practices, Accessibility, and Progressive Web App，点击Run按钮，将会对当前页面进行网络利用率和页面的性能优化作出诊断，并给出相应的优化建议。 这个对于优化前端页面、加速网页加载速度很有用（相当于Yslow）</p>
</blockquote>
<h2 id="HOW-TO-USE？-9"><a href="#HOW-TO-USE？-9" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/audits.png" alt="image"> </p>
<ul>
<li>Progressive Web App（在移动端利用提供的标准化框架，在网页应用中实现和原生应用相近的用户体验）: 检查网页是否符合PWA的标准。</li>
<li>Performance:检查网页加载时间</li>
<li>Best Practices : 检查页面是否遵循Google Web开发最佳实践</li>
<li>Accessibility : 检查网页能否给残障人士使用</li>
</ul>
<h1 id="开发者工具主菜单"><a href="#开发者工具主菜单" class="headerlink" title="开发者工具主菜单"></a>开发者工具主菜单</h1><p><strong>自定义并控制DevTools，也叫开发者工具主菜单</strong></p>
<blockquote>
<p>单击DevTools窗口右上角的“┇”按钮即可打开主菜单。</p>
</blockquote>
<h2 id="HOW-TO-USE？-10"><a href="#HOW-TO-USE？-10" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><img src="/image/devTool/more.png" width="300"/>
- Dock side: 调整DevTools的位置
- Show console drawer: 打开console的抽屉式选项卡
- Search all files : 在所有文件中搜索
- Open file : 打开指定文件
- More tools: 在抽屉式选项卡中打开更多工具
    - Animations:动画检查器
    - Coverage:使用动态分析（Dynamic Analysis）法来收集代码运行时的覆盖率
    - JavaScript Profiler:查看JavaScript函数的执行性能
    - Layers:看到页面中的复合层。（查找页面原因的时候非常有用）
    - Legacy Audits:旧版检查面板,面板的优化建议参照的是雅虎前端工程师的十四条黄金建议。
        - Network Utillzation(网络利用率)、Web Page Performance(界面性能)
        - Audit Present State(针对目前网页状态分析)、Reload Page and Audit on load(重新加载网页进行分析)
    - Network conditions:设置网络节流
    - Quick source:打开Source的抽屉式选项卡
    - Remote devices:连接远程设备
    - Rendering: 渲染设置
    - Request blocking:拦截请求
    - Search:在所有资源中搜索
    - Sensors:仿真面板,模拟移动设备的传感器
- Shortcuts:查看快捷键
- Settings:打开设置面板

<p><img src="/image/devTool/more2.png" alt="image"> </p>
<ul>
<li>Preferences :首选项<ul>
<li>Appearance:外观设置<ul>
<li>Show third party URL badges:显示第三方URL标记？？？</li>
<li>Theme:改变devtool主题(简洁白／炫酷黑)</li>
<li>Panel layout:改变面板布局(横版／竖版／自动)</li>
<li>Enable Ctrl + 1-9 shortcut to switch panels:用快捷键Ctrl + 1-9来切换面板</li>
<li>Don’t show Chrome Data Saver warning:不显示chrome的节省数据流量警告</li>
<li>Disable paused state overlay: 禁用暂停悬浮框状态？？？</li>
</ul>
</li>
<li>Sources:源代码面板设置<ul>
<li>Automatically reveal files in navigator:在导航栏自动显示文件</li>
<li>Enable JavaScript source maps:在调试时如果有JS报错，浏览器就会通过解析map文件来重新merge压缩后的JS,使开发者可以用未压缩前的代码来调试。只有Chrome浏览器支持这个功能😲</li>
<li>Detect indentation:自动检测缩进</li>
<li>Autocompletion:自动补全</li>
<li>Bracket matching:括号自动匹配</li>
<li>Show whitespace characters:空白（空格、TAB、回车）显示设置</li>
<li>Display variable values inline while debugging:当前调试点及时预览 JavaScript 变量的内联值</li>
<li>Enable CSS source maps:在调试时如果有CSS报错，浏览器就会通过解析map文件来重新merge压缩后的CSS,使开发者可以用未压缩前的代码来调试。</li>
<li>Default indentation: 自定义默认缩进</li>
<li>Search in anonymous and content scripts:在匿名和内容脚本中搜索</li>
</ul>
</li>
<li>Elements:元素面板设置<ul>
<li>Color format:设置颜色格式</li>
<li>Show user agent shadow DOM:在元素标签器中显示被隐藏的组件代码</li>
<li>Word wrap:自动换行</li>
<li>Show HTML comments:显示HTML注释</li>
<li>Reveal DOM node on hover:在悬停状态下显示DOM节点</li>
<li>Show rulers: 鼠标悬停在某个元素上或者选中一个元素的时候会显示</li>
</ul>
</li>
<li>Network:网络面板设置<ul>
<li>Preserve log:保留请求日志</li>
<li>Color-code resource types: 不同色彩作标记资源类型</li>
<li>Group network log by frame:逐帧分组网络日志</li>
<li>Disable cache (while DevTools is open):禁用缓存</li>
<li>Enable request blocking:使请求阻塞</li>
</ul>
</li>
<li>Performance:性能面板设置<ul>
<li>Flamechart mouse wheel action:查看火焰图时鼠标滚轮的作用(缩放&#x2F;滚动)</li>
<li>High resolution CPU profiling: 提高记录分析数据的准确性，能够以十分之一毫秒的度量来查看火焰图的数据</li>
<li>Record heap allocation stack traces:使用 Allocation 视图查看内存分配</li>
<li>Hide chrome frame in Layers view:Layers视图中隐藏谷歌浏览器内嵌框架(通过Internet Explorer的用户界面，以Chrome内核的渲染方式浏览网页)</li>
<li>Show native functions in JS Profile:使用 profiler 查看原生函数的执行性能</li>
</ul>
</li>
<li>Console:控制台面板设置<ul>
<li>Hide network messages:默认情况下，控制台将报告网络问题。启用此设置将指示控制台不显示这些错误的日志。例如，将不会记录 404 和 500 系列错误。</li>
<li>Selected context only:仅显示当前上下文的信息(top iframe worker extension)</li>
<li>User messages only: 仅显示console API方法的信息</li>
<li>Log XMLHttpRequests:确定控制台是否记录每一个 XMLHttpRequest。</li>
<li>Show timestamps:在调用时向显示的每条控制台消息追加一个时间戳。对于发生特定事件时的调试非常实用。这会停用消息堆叠。</li>
<li>Autocomplete from history:历史记录提示</li>
<li>Enable custom formatters:控制 JavaScript 对象的格式设置。</li>
<li>Preserve log upon navigation:在页面刷新或导航时保留控制台历史记录。</li>
</ul>
</li>
<li>Extensions:扩展<ul>
<li>Link handling:链接处理</li>
</ul>
</li>
<li>Debugger:断点设置<ul>
<li>Disable JavaScript:禁用JavaScript</li>
<li>Disable async stack traces:禁用异步堆栈跟踪</li>
</ul>
</li>
<li>DevTools<ul>
<li>Auto-open DevTools for popups:当新的标签&#x2F;新窗口打开时,自动打开浏览器开发工具</li>
</ul>
</li>
</ul>
</li>
<li>Workspace :把本地服务器的资源映射为硬盘上的文件，实现调试 JS 和 CSS 的同时自动保存文件</li>
<li>Blackbox:屏蔽JS文件<ul>
<li>库代码（被屏蔽的文件）里抛出异常时不会暂停（当设置为Pause on exceptions时）</li>
<li>调试时Stepping into&#x2F;out&#x2F;over都会忽略库代码</li>
<li>事件断点也会忽略库代码</li>
<li>库代码里设置的任何断点也不会起作用</li>
<li>最终的结果就是只会调试应用代码而忽略第三方代码（配置了Blackbox的代码）。</li>
</ul>
</li>
<li>Emulated Devices:管理模拟设备</li>
<li>Throttling:设置网络延迟与带宽</li>
<li>Shortcuts:查看快捷键</li>
</ul>
<h3 id="最后还有！"><a href="#最后还有！" class="headerlink" title="最后还有！"></a>最后还有！</h3><p><strong>小技能</strong></p>
<ul>
<li>在浏览器地址栏输入：chrome:&#x2F;&#x2F;about&#x2F;,你看到得这些地址几乎包含了所有谷歌浏览器的实用功能，下面来详解部分常用功能。</li>
<li>清除缓存、硬重载:如果你请求一个硬刷新，在开发者工具打开的情况下点击并按住 Chromes 的刷新按钮。你应该会看见一个下拉菜单，它允许你进行清除缓存和并进行硬重载。</li>
<li>任务管理器：在浏览器工具栏中点击 Chrome 菜单，选择更多工具，选择任务管理器。可以让你深入了解任何选项卡对应的 GPU，CPU 以及 JavaScript 内存使用状况，CSS 和脚本缓存使用状况。</li>
<li><a href="https://plus.google.com/+AddyOsmani/posts/ih85hKCyGve">JSRunTime</a>：开发者工具检索 JavaScript 对象的拓展,它可以在内存中检索可用的 JavaScript 对象并生成相应的图，还可以根据值或者名称来进行匹配。</li>
<li><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd">Vue.js devtools</a>：墙裂推荐，调试vue应用的神器</li>
</ul>
<blockquote>
<p>这些只是chrome Devtool的其中一部分功能，还有待补充。目前只能算入门篇。<br>so,欢迎来找我讨论补充～   </p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装</title>
    <url>/tool-docker/</url>
    <content><![CDATA[<p>现公司技术栈为<a href="https://learnku.com/docs/laravel/6.x">Laravel</a> + vue，前后端未分离，开发人员都需要使用docker。公司电脑大家都一样，安装起来还是挺顺利的，但最近由于疫情开始远程办公，自己装docker是着实费了老大的劲儿，发现自己对docker真的是一窍不通，那就趁现在有空学习下吧。</p>
<span id="more"></span>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>参考文章：<a href="https://github.com/yeasy/docker_practice">Docker — 从入门到实践</a>、<a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">Docker 入门教程-阮一峰</a></p>
<h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><ul>
<li><p>进入<a href="https://hub.docker.com/?overlay=onboarding">docker官网</a>下载安装 docker（<a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html"><strong>入门教程</strong></a>）</p>
</li>
<li><p>安装前提（mac可忽略）：</p>
<ul>
<li>系统用户名必须为英文，且安装路径也不允许有中文</li>
<li>windows中Docker目前仅有win10专业版&#x2F;企业版的安装包，其他版本系统需安装Docker Toolbox，建议升级系统不要折腾了（修改产品密钥即可升级）</li>
<li>在“启用或关闭Windows功能”中开启Hyper-V</li>
<li>在任务管理器 → 性能 → 选择CPU → 右侧“虚拟化”属性查看是否开启cpu虚拟化，若未开启，进入dios启用配置</li>
</ul>
</li>
<li><p>安装完成后设置docker的shared dives（勾选项目所在磁盘）和 memory（调大一些）</p>
</li>
<li><p>克隆local-dev-env（与代码父级文件夹平级）</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">目录样例：</span><br><span class="line">- workspace</span><br><span class="line">    - local-dev-env</span><br><span class="line">    - my-project</span><br><span class="line">        - docker-test</span><br><span class="line">        - 其他项目...</span><br></pre></td></tr></table></figure></li>
<li><p>增加local-dev-env\dpcker-compose.yml中的配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每个项目都需要添加services配置项</span></span><br><span class="line"><span class="attr">docker-test:</span> <span class="comment"># 根据项目修改容器名称</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/zlt/nginx-php-fpm-alpine</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">WEBROOT:</span> <span class="string">&#x27;/var/www/html/public&#x27;</span></span><br><span class="line">    <span class="attr">ERRORS:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">RUN_SCRIPTS:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">ENABLE_XDEBUG:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">XDEBUG_CONFIG:</span> <span class="string">&quot;remote_host=192.168.1.138&quot;</span></span><br><span class="line">    <span class="attr">XDEBUG_PORT:</span> <span class="number">9001</span></span><br><span class="line">    <span class="attr">PUID:</span> <span class="number">1000</span></span><br><span class="line">    <span class="attr">PGID:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">D:/workspace/my-project/docker-test:/var/www/html</span> <span class="comment"># 修改为本地项目地址</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;8001:80&quot;</span> <span class="comment"># 根据本机修改端口号</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>拉取镜像</strong>：</p>
<ul>
<li>第一次运行项目需要先拉取镜像，拉取镜像需要先登录docke镜像库：启动docker后，进入local-dev-env文件夹运行<code>docker login registry.cn-hangzhou.aliyuncs.com</code>，如果碰到windows版本问题（ 非TTY device）需要在命令前加上winpty</li>
<li>登录完之后执行：<code>docker-compose up -d</code>，会先拉取镜像并启动容器，镜像只需拉取一次，此后再执行不会再拉取镜像，直接启动容器。</li>
<li>如果拉取镜像频繁超时，将docker设置中的”registry-mirrors”字段更改为<code>[&quot;http://hub-mirror.c.163.com&quot;]</code>(修改了docker镜像源)，重启即可生效，也可梯子翻墙，命令行默认不走代理，记得设置<code>http_proxy</code></li>
</ul>
</li>
<li><p><strong>项目安装PHP依赖</strong>：</p>
<ul>
<li>进入local-dev-env文件夹下运行<code>docker-compose exec XXX bash</code>，进入到对应项目的容器中，再安装php依赖：<code>composer install</code></li>
<li>如果进入容器时出现<code>Interactive mode is not yet supported on Windows</code>错误，可先运行<code>docker ps</code>获取容器名，再运行<code>docker exec -it &lt;containername&gt; sh</code>即可（<a href="https://github.com/wodby/docker4drupal/issues/41"><strong>参考</strong></a>）</li>
<li>如果composer install拉取依赖频繁超时，可尝试以下方法之一：<ul>
<li>进入容器后执行<code>composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</code>，将composer镜像设为<a href="https://developer.aliyun.com/composer"><strong>阿里源</strong></a>；</li>
<li>梯子翻墙，命令行默认不走代理，记得设置<code>http_proxy</code></li>
</ul>
</li>
</ul>
</li>
<li><p>进入项目目录运行<code>yarn</code>或<code>npm install</code>安装依赖，若因网络问题导致node-sass安装失败，先删除依赖，再使用梯子或国内镜像cnpm重新安装</p>
</li>
<li><p>复制项目中的.env.example为.env</p>
</li>
<li><p>之后只需先进入local-dev-env在后台启动并运行所有的容器：<code>docker-compose up -d</code>，再进入项目<code>npm run watch</code>启动项目</p>
</li>
<li><p>最后，感谢同事的帮助~</p>
</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>常规eslint配置</title>
    <url>/tool-eslint/</url>
    <content><![CDATA[<h2 id="eslint配置过程"><a href="#eslint配置过程" class="headerlink" title="eslint配置过程"></a>eslint配置过程</h2><h3 id="安装需要依赖的npm包"><a href="#安装需要依赖的npm包" class="headerlink" title="安装需要依赖的npm包"></a>安装需要依赖的npm包</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;eslint&quot;</span>: <span class="string">&quot;^4.19.1&quot;</span>, <span class="comment">// 必须</span></span><br><span class="line"><span class="string">&quot;babel-eslint&quot;</span>: <span class="string">&quot;^8.2.4&quot;</span>, <span class="comment">// 支持babel</span></span><br><span class="line"><span class="string">&quot;eslint-loader&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>, <span class="comment">// 使webpack支持eslint</span></span><br><span class="line"><span class="string">&quot;eslint-config-google&quot;</span>: <span class="string">&quot;^0.9.1&quot;</span>, <span class="comment">// Google的ESLint可共享配置</span></span><br><span class="line"><span class="string">&quot;eslint-plugin-vue&quot;</span>: <span class="string">&quot;^4.5.0&quot;</span>, <span class="comment">// Vue.js的官方ESLint插件</span></span><br><span class="line"><span class="string">&quot;eslint-plugin-import&quot;</span>: <span class="string">&quot;^2.13.0&quot;</span>, <span class="comment">// 支持使用第三方的扩展</span></span><br></pre></td></tr></table></figure>
<p><strong>项目下运行命令行</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install --save-dev eslint@4.19.1 babel-eslint@8.2.4 eslint-loader@2.0.0 eslint-config-google@0.9.1 eslint-plugin-vue@4.5.0 eslint-plugin-import@2.13.0</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="在项目最外层新建并编辑-eslintrc-js文件"><a href="#在项目最外层新建并编辑-eslintrc-js文件" class="headerlink" title="在项目最外层新建并编辑.eslintrc.js文件"></a>在项目最外层新建并编辑.eslintrc.js文件</h3><p><strong>加入以下代码</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 默认情况下，ESLint会在所有父级组件中寻找配置文件，一直到根目录。ESLint一旦发现配置文件中有 &quot;root&quot;: true，它就会停止在父级目录中寻找。</span></span><br><span class="line">    <span class="string">&quot;root&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 扩展流行的风格指南</span></span><br><span class="line">    <span class="string">&quot;extends&quot;</span>: [<span class="string">&quot;plugin:vue/recommended&quot;</span>, <span class="string">&#x27;plugin:vue/essential&#x27;</span>, <span class="string">&quot;eslint:recommended&quot;</span>, <span class="string">&quot;google&quot;</span>],</span><br><span class="line">    <span class="comment">// 此插件用来识别.html 和 .vue文件中的js代码</span></span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: [<span class="string">&quot;import&quot;</span>, <span class="string">&quot;vue&quot;</span>],</span><br><span class="line">    <span class="comment">// 对Babel解析器的包装使其与 ESLint 兼容。</span></span><br><span class="line">    <span class="string">&quot;parserOptions&quot;</span>: &#123;<span class="string">&quot;parser&quot;</span>: <span class="string">&quot;babel-eslint&quot;</span>&#125;,</span><br><span class="line">    <span class="comment">// 自己的个性化规则</span></span><br><span class="line">    <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">// 禁用 switch 中冒号前后的空格规则</span></span><br><span class="line">        <span class="string">&quot;switch-colon-spacing&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁用 jsdoc 规则</span></span><br><span class="line">        <span class="string">&quot;require-jsdoc&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁用每行字数限制规则</span></span><br><span class="line">        <span class="string">&quot;max-len&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 允许打 console.log</span></span><br><span class="line">        <span class="string">&quot;no-console&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 允许使用debugger语句</span></span><br><span class="line">        <span class="string">&quot;no-debugger&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁用代码块首尾必须要空行的规则</span></span><br><span class="line">        <span class="string">&quot;padded-blocks&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 不检查行尾空格</span></span><br><span class="line">        <span class="string">&quot;no-trailing-spaces&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 使用 === 替代 ==</span></span><br><span class="line">        <span class="string">&quot;eqeqeq&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;vue/no-parsing-error&quot;</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">            <span class="comment">// 关闭标签闭合检查 </span></span><br><span class="line">            <span class="string">&quot;x-invalid-end-tag&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>“off” 或 0       &#x3D;&gt; 关闭规则<br>“warn” 或 1      &#x3D;&gt;开启规则，使用警告级别的错误：warn (不会导致程序退出)<br>“error” 或 2     &#x3D;&gt;开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</p>
</blockquote>
<p><strong>如果在webpack.config文件中设置了resolver配置，那么还需要:</strong></p>
<ul>
<li>安装<a href="https://www.npmjs.com/package/eslint-import-resolver-webpack">eslint-import-resolver-webpack</a>依赖。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i --save-dev eslint-import-resolver-webpack@0.10.1</span><br></pre></td></tr></table></figure></li>
<li>默认情况下，会从项目的compile&#x2F;webpack.base.config.js文件中寻找webpack的resolver配置，但是这并不一定准确，因此可以自己重新配置正确的位置。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="string">&quot;extends&quot;</span>: [<span class="string">&quot;plugin:vue/recommended&quot;</span>, <span class="string">&#x27;plugin:vue/essential&#x27;</span>, <span class="string">&quot;eslint:recommended&quot;</span>, <span class="string">&quot;google&quot;</span>],</span><br><span class="line">    <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;import/resolver&#x27;</span>: &#123;</span><br><span class="line">            <span class="attr">webpack</span>: &#123;</span><br><span class="line">                <span class="attr">config</span>: <span class="string">&#x27;compile/webpack.base.conf.js&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="在webpack-config-js文件中添加配置"><a href="#在webpack-config-js文件中添加配置" class="headerlink" title="在webpack.config.js文件中添加配置"></a>在webpack.config.js文件中添加配置</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">		&#123;</span><br><span class="line">        	<span class="attr">test</span>: <span class="regexp">/\.(js|jsx|vue)$/</span>,</span><br><span class="line">        	<span class="attr">loader</span>: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">        	<span class="attr">enforce</span>: <span class="string">&#x27;pre&#x27;</span>,</span><br><span class="line">      	&#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="visio-studio-code-配置eslint"><a href="#visio-studio-code-配置eslint" class="headerlink" title="visio studio code 配置eslint"></a>visio studio code 配置eslint</h3><p><strong>如果想在代码编写时 使编辑器将错误代码用红色波浪线标出 并提示错误，那么就可以做下面几步：</strong></p>
<ol>
<li>左侧菜单栏选择“扩展”，搜索“eslint”、“Vetur”安装并重新加载</li>
<li>配置vscode实现对.vue .html文件中的js代码段的检测： 顶部选项Code -&gt; 首选项 -&gt; 设置，搜索编辑“eslint.validate”添加 “html”,”vue”<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;eslint.validate&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">      <span class="string">&quot;javascriptreact&quot;</span>,</span><br><span class="line">      <span class="string">&quot;html&quot;</span>,</span><br><span class="line">      <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
<li>可以打开项目中.vue文件，不规范的语法就都已经被红色波浪线标记出来了。</li>
</ol>
<h2 id="eslint修改技巧"><a href="#eslint修改技巧" class="headerlink" title="eslint修改技巧"></a>eslint修改技巧</h2><h3 id="eslint-–-fix-修复指令"><a href="#eslint-–-fix-修复指令" class="headerlink" title="eslint – fix 修复指令"></a>eslint – fix 修复指令</h3><ul>
<li>检查并修复项目所有代码<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node_modules/.bin/eslint --fix *</span><br></pre></td></tr></table></figure></li>
<li>检查并修复指定文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node_modules/.bin/eslint --fix app.js</span><br></pre></td></tr></table></figure></li>
<li><strong>tips: 如果直接运行  eslint – fix  会报 Cannot find module ‘@u51&#x2F;eslint-config-web’ 的错误。</strong>  <blockquote>
<p>config文件是安装在当前项目，直接eslint –fix file调用的是全局的eslint，所以无法找到当前项目的config文件。故使用 node_modules&#x2F;.bin&#x2F;eslint –fix 。</p>
</blockquote>
</li>
</ul>
<h3 id="vscode-保存自动格式化eslint代码"><a href="#vscode-保存自动格式化eslint代码" class="headerlink" title="vscode 保存自动格式化eslint代码"></a>vscode 保存自动格式化eslint代码</h3><ul>
<li>进入【设置】加上以下配置：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;vetur.format.defaultFormatter.html&quot;</span>: <span class="string">&quot;js-beautify-html&quot;</span>, <span class="comment">// 格式化.vue中html</span></span><br><span class="line">    <span class="string">&quot;vetur.format.defaultFormatter.js&quot;</span>: <span class="string">&quot;vscode-typescript&quot;</span>, <span class="comment">// 让vue中的js按编辑器自带的ts格式进行格式化</span></span><br><span class="line">    <span class="string">&quot;eslint.enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;eslint.autoFixOnSave&quot;</span>:<span class="literal">true</span>, <span class="comment">// 保存时自动fix</span></span><br><span class="line">    <span class="string">&quot;eslint.run&quot;</span>: <span class="string">&quot;onType&quot;</span>,</span><br><span class="line">    <span class="string">&quot;eslint.options&quot;</span>: &#123;<span class="string">&quot;extensions&quot;</span>: [<span class="string">&quot;.js&quot;</span>,<span class="string">&quot;.vue&quot;</span>]&#125;,</span><br><span class="line">    <span class="string">&quot;eslint.validate&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">        <span class="string">&quot;javascriptreact&quot;</span>,</span><br><span class="line">        <span class="string">&quot;html&quot;</span>,</span><br><span class="line">        &#123;<span class="string">&quot;language&quot;</span>: <span class="string">&quot;vue&quot;</span>, <span class="string">&quot;autoFix&quot;</span>: <span class="literal">true</span>&#125; <span class="comment">//开启对.vue文件中错误的检查</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>重启后，右键“格式化文件”或者修改文件后点击“保存”，就可自动格式化代码了。</li>
</ul>
<h3 id="忽略ESLint检测"><a href="#忽略ESLint检测" class="headerlink" title="忽略ESLint检测"></a>忽略ESLint检测</h3><p>如果需要修改代码量太大，可以先将未修改的文件忽略掉，以后逐步修改。</p>
<ul>
<li>新建.eslintignore文件，放置需要ESLint忽略的文件。例如：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node_modules/</span><br><span class="line">src/components/input-tag.vue</span><br></pre></td></tr></table></figure></li>
<li>将 <mark class="label success">/* eslint-disable */</mark>块注释放在文件顶部，可以在整个文件范围内禁止规则出现警告。</li>
<li><mark class="label success">// eslint-disable-next-line</mark> 可关闭下一行校验。</li>
</ul>
<h3 id="命令行检测、修改文件"><a href="#命令行检测、修改文件" class="headerlink" title="命令行检测、修改文件"></a>命令行检测、修改文件</h3><ul>
<li>打开package.json，在script里加入:<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// -ext 后面写上指定检测文件的后缀，紧接着写上要检测的目录，即可用命令行来检测。</span></span><br><span class="line"><span class="string">&quot;lint&quot;</span>: <span class="string">&quot;eslint --ext .js,.jsx,.vue src/&quot;</span>,</span><br><span class="line"><span class="comment">// 加上--fix，即可在检测的同时将文件自动格式化。</span></span><br><span class="line"><span class="string">&quot;lint-fix&quot;</span>: <span class="string">&quot;eslint --fix --ext .js,.jsx,.vue src/&quot;</span>,</span><br></pre></td></tr></table></figure></li>
<li>终端运行 <mark class="label default">npm run lint</mark> 或者 <mark class="label default">npm run lint-fix</mark></li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/default.md">eslint规则说明</a><br><a href="http://eslint.cn/">ESLint官方文档</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>关于git大小写不敏感的坑</title>
    <url>/tool-git-caseSensitive/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><strong>场景：</strong></p>
<ul>
<li>新建a.js 文件并使用git提交到远程仓库，再将本地 a.js 更名为 A.js，git却无法识别也无法提交。</li>
<li><a href="http://www.chengpengfei.com/2018/01/23/">两人本地存储的是同名不同大小写的文件，导致代码拉取时出现各种问题。</a></li>
<li>在macOS&#x2F;windows上解压linux的程序时，同名但大小写不同的文件会互相覆盖。</li>
<li>一个全小写的文件名，将其引入时路径中的该文件名首字母写成了大写，本地编译时不会报错，但到线上部署时就会构建失败。</li>
</ul>
<p><strong>原因：</strong>一般开发使用的macOS&#x2F;windows系统都是默认不区分文件名大小写的，而用来部署的服务器通常都是使用文件名大小写不敏感的Linux系统。git为了兼容Windows和MacOS，也是默认不区分文件名大小写的。</p>
<span id="more"></span>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="修改系统配置"><a href="#修改系统配置" class="headerlink" title="修改系统配置"></a>修改系统配置</h3><p><a href="https://zhuanlan.zhihu.com/p/35908178">《在 macOS 中完美配置文件名大小写敏感》</a>这篇文章中提到了两种修改系统配置的方法：</p>
<ul>
<li>将macOS 默认『Mac OS 扩展（日志式）』格式的磁盘改成『 Mac OS 扩展（区分大小写，日志式）』。</li>
<li>添加新的大小写敏感的 APFS 卷宗。</li>
</ul>
<p>但这两种方法都不适用于团队，且会导致一些软件无法使用，所以这两种方法还是不要考虑了。</p>
<h3 id="关于git"><a href="#关于git" class="headerlink" title="关于git"></a>关于git</h3><p><strong>git配置方法：</strong></p>
<ul>
<li>全局设置大小写敏感：<code>git config --global core.ignorecase false</code></li>
<li>单个项目设置大小写敏感：<code>git config core.ignorecase false</code></li>
</ul>
<p><strong>但git config core.ignorecase false也有坑</strong>：</p>
<p>假设甲和乙都在有a.js文件的『分支1』下开发，而丙在更名为A.js的『分支2』下开发且设置了<code>git config core.ignorecase false</code>，当丙在『分支2』下merge『分支1』时，会提示文件将被重写。</p>
<p><strong>所以当多人协作开发时更推荐进行如下操作：</strong></p>
<blockquote>
<p>使用git mv 命令时，会自动执行git add。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">mv</span> -f [要删掉的文件名] [要留下的文件名]</span><br><span class="line">git commit -m <span class="string">&quot;改名&quot;</span> </span><br></pre></td></tr></table></figure>

<p>当已造成了本地一个文件、远程两个同名但大小写不同的文件时，使用此方法也可解决问题。</p>
<p>参考文章：<a href="https://blog.walterlv.com/post/case-insensitive-in-git-rename.html">解决 Git 重命名时遇到的大小写不敏感的问题</a></p>
<h3 id="webpack插件配置"><a href="#webpack插件配置" class="headerlink" title="webpack插件配置"></a>webpack插件配置</h3><p>通过Webpack插件<strong>case-sensitive-paths-webpack-plugin</strong>来强制区分引入文件的路径大小写，在本地编译时就能及时发现问题，杜绝第四个问题场景的出现。</p>
<p>npm地址：<a href="https://www.npmjs.com/package/case-sensitive-paths-webpack-plugin">https://www.npmjs.com/package/case-sensitive-paths-webpack-plugin</a></p>
<p><strong>第一步：安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev case-sensitive-paths-webpack-plugin</span><br></pre></td></tr></table></figure>

<p><strong>第二步：配置</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">CaseSensitivePathsPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;case-sensitive-paths-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> webpackConfig = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      	<span class="comment">// 若想调试可用new CaseSensitivePathsPlugin(&#123;debug: true&#125;)</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CaseSensitivePathsPlugin</span>()</span><br><span class="line">        <span class="comment">// 其他插件 ...</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">// 其他webpack配置项 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>为了避免大小写引来的各种问题，个人比较建议：</p>
<ul>
<li>制定文件命名规范，统一为小驼峰式。</li>
<li>统一安装case-sensitive-paths-webpack-plugin插件。</li>
<li>若想修改已提交的文件名称大小写，务必使用<code>git mv -f [要删掉的文件名] [要留下的文件名]</code>。</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git commit辅助工具</title>
    <url>/tool-git-commit/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><strong>工具推荐：</strong></p>
<ul>
<li><a href="https://github.com/commitizen/cz-cli">Commitizen</a>：是一个撰写合格 Commit message 的工具。</li>
<li><a href="https://github.com/commitizen/cz-conventional-changelog">cz-conventional-changelog</a>：是符合AngularJS规范的Commitizen标准配置插件。</li>
<li><a href="https://github.com/conventional-changelog/standard-version">standard-version</a>：根据符合规范的commit记录自动生成更改日志文件。</li>
<li><a href="https://github.com/conventional-changelog/commitlint">commitlint</a>：检查 commit 信息是否符合规范。</li>
<li><a href="https://github.com/carloscuesta/gitmoji">gitmoji</a>：私人项目可以用用这个比较俏皮有趣的插件。</li>
</ul>
<span id="more"></span>

<p><strong>commit格式规范：</strong></p>
<p>每条commit记录都由header、body、footer(标题行、详细内容、尾部标注)组成。header具有特殊格式，包括type、scope、subject(类型、修改范围、简短描述)，其中，Header 是必需的，Body 和 Footer 可以省略：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>(<span class="tag">&lt;<span class="name">scope</span>&gt;</span>): <span class="tag">&lt;<span class="name">subject</span>&gt;</span></span><br><span class="line">// 空行</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">// 空行</span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>header中的scope类型有以下几种：</strong></p>
<ul>
<li>feat: 新功能（feature）</li>
<li>fix: 修补bug </li>
<li>docs: 文档改动</li>
<li>style: 不影响代码运行的格式改动</li>
<li>refactor: 重构，不是新增功能或修补bug的代码变动</li>
<li>perf: 提高代码性能的代码变动</li>
<li>test: 新增或修改测试用例</li>
<li>build: 影响构建系统或外部依赖的更改（如webpack、broccoli、npm等）</li>
<li>ci: 对CI配置文件和脚本的变动（如travis、circle、browserstack、saucelabs等）</li>
<li>chore: 不涉及src或测试文件的代码变更 </li>
<li>revert: 代码回退</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li>团队项目安装个Commitizen差不多就可以了。</li>
<li>如果需要生成CHANGELOG文件，再单独安装下standard-version即可。</li>
<li>如果想要非常非常严格的规范，可以统一安装commitlint，并配上<a href="https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-conventional">@commitlint&#x2F;config-conventional</a>官方推荐配置。</li>
</ul>
<h3 id="Commitizen"><a href="#Commitizen" class="headerlink" title="Commitizen"></a>Commitizen</h3><p><strong>推荐项目级安装：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install commitizen --save-dev</span><br><span class="line">commitizen init cz-conventional-changelog --save-dev --save-exact</span><br></pre></td></tr></table></figure>

<p><strong>使用：</strong></p>
<p>1、执行<code>git add .</code>后使用<code>git cz</code>替代<code>git commit</code>命令。</p>
<p>2、按下回车后按提示输入commit信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">? Select the type of change that you&#x27;re committing:</span><br><span class="line">  docs:     Documentation only changes</span><br><span class="line"></span><br><span class="line">? What is the scope of this change (e.g. component or file name)? (press enter to skip)</span><br><span class="line">   更改范围headerScope</span><br><span class="line"></span><br><span class="line">? Write a short, imperative tense description of the change:</span><br><span class="line">   简单描述headerSubject</span><br><span class="line"></span><br><span class="line">? Provide a longer description of the change: (press enter to skip)</span><br><span class="line">   详细描述(body)</span><br><span class="line"></span><br><span class="line">? Are there any breaking changes?</span><br><span class="line">   Yes</span><br><span class="line"></span><br><span class="line">? Describe the breaking changes:</span><br><span class="line">  当前代码与上一版本不兼容，说明对变动的描述、理由和迁移方法(footer)</span><br><span class="line"></span><br><span class="line">? Does this change affect any open issues?</span><br><span class="line">   Yes</span><br><span class="line"></span><br><span class="line">? Add issue references (e.g. &quot;fix #123&quot;, &quot;re #123&quot;.):</span><br><span class="line">   fix #相关issue(footer)</span><br></pre></td></tr></table></figure>

<p>3、若提交失败，执行<code>git cz —retry</code>进行重试则不需要重新输入信息。</p>
<p>4、提交成功后，就能看到log记录格式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Author: zhaoluting &lt;zhaoluting@51dojo.com&gt;</span><br><span class="line">Date:   Thu Apr 18 19:49:31 2019 +0800</span><br><span class="line"></span><br><span class="line">    docs(更改范围headerScope): 简单描述headerSubject</span><br><span class="line">    </span><br><span class="line">    详细描述(body)</span><br><span class="line">    </span><br><span class="line">    BREAKING CHANGE: 当前代码与上一版本不兼容，说明对变动的描述、理由和迁移方法(footer)</span><br><span class="line">    </span><br><span class="line">    fix #相关issue(footer)</span><br></pre></td></tr></table></figure>



<h3 id="standard-version"><a href="#standard-version" class="headerlink" title="standard-version"></a>standard-version</h3><ol>
<li>推荐全局安装：<code>npm install standard-version -g</code></li>
<li>项目下运行<code>standard-version</code>，会自动生成CHANGELOG.md文件、变更版本号、提交commit、打tag。并出现以下提示:</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">✔ bumping version in package.json from 2.0.2 to 2.0.3</span><br><span class="line">✔ bumping version in package-lock.json from 2.0.2 to 2.0.3</span><br><span class="line">✔ outputting changes to CHANGELOG.md</span><br><span class="line">✔ committing package-lock.json and package.json and CHANGELOG.md</span><br><span class="line">✔ tagging release v2.0.3</span><br><span class="line">ℹ Run `git push --follow-tags origin master &amp;&amp; npm publish` to publish</span><br></pre></td></tr></table></figure>



<p><strong>常用命令：</strong></p>
<ul>
<li>standard-version –first-release &#x2F;&#x2F; 为第一个版本生成CHANGELOG</li>
<li>standard-version –release-as 1.1.0  &#x2F;&#x2F; 自定义版本号 &#x3D;&gt; 1.1.0 </li>
<li>standard-version –release-as major &#x2F;&#x2F; 强制大版本更新 1.1.0 &#x3D;&gt; 2.0.0</li>
<li>standard-version –release-as minor &#x2F;&#x2F; 强制小版本更新 1.1.0 &#x3D;&gt; 1.2.0</li>
</ul>
<p><strong>跳过步骤：</strong></p>
<p>通过package.json的配置可以跳过任意步骤：bump,changelog, commit, tag</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;standard-version&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;skip&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;commit&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>参考链接：</p>
<p><a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines">angular commit规范</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">Commit message 和 Change log 编写指南</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>githooks</title>
    <url>/tool-git-hooks/</url>
    <content><![CDATA[<p>最近发现了<a href="https://git-scm.com/docs/githooks">githooks</a>这个宝藏，前端对hook应该都不陌生，就是钩子。githooks就是在特定动作发生时触发自定义脚本。很多前端项目都会采用Husky在代码提交前进行Lint校验和commit提交校验。想起来曾经写过<a href="/tool-eslint/">《常规eslint配置》</a>和<a href="/tool-git-commit">《git commit辅助工具》</a>，文章提到的方案只能靠开发自觉遵守，但是有了这个githooks就能用一些相对比较强硬的手段。当然，想要更加强硬的话甚至可以把校验放在部署那块。</p>
<span id="more"></span>

<h2 id="githooks分类"><a href="#githooks分类" class="headerlink" title="githooks分类"></a>githooks分类</h2><p>githooks可分为客户端hooks和服务端hooks。hooks太多了，就挑一些常用的介绍下，其他的看<a href="https://git-scm.com/docs/githooks">官网</a>。</p>
<blockquote>
<p><code>pre-</code>前缀代表即将发生，通常用于检查；<code>post-</code>前缀代表已结束，通常用于通知。</p>
</blockquote>
<h3 id="客户端Hooks"><a href="#客户端Hooks" class="headerlink" title="客户端Hooks"></a>客户端Hooks</h3><p>客户端Hooks可分为提交工作流、E-mail工作流和其他工作流。E-mail工作流基本用不到，所以跳过。</p>
<h4 id="提交工作流"><a href="#提交工作流" class="headerlink" title="提交工作流"></a>提交工作流</h4><p>关于<code>git commit</code>的有四个挂钩，触发顺序为：pre-commit、prepare-commit-msg、commit-msg、post-commit。</p>
<ul>
<li><strong>pre-commit</strong>：在填写提交信息和生成提交对象之前执行。可以用来做初步的code review，检查代码是否符合规范、自动化测试等。</li>
<li><strong>prepare-commit-msg</strong>：提交信息显示之前，默认信息被创建之后调用。可以结合提交模板，为合并提交、压缩提交、修订提交等这类会自动产生默认信息的提交，动态地插入信息。</li>
<li><strong>commit-msg</strong>：在用户输入提交信息之后调用。可以用来检查提交信息是否符合规范。</li>
<li><strong>post-commit</strong>：在整个提交过程完成后调用。通常用来提示一些信息。</li>
</ul>
<h4 id="其他工作流"><a href="#其他工作流" class="headerlink" title="其他工作流"></a>其他工作流</h4><ul>
<li><strong>pre-rebase</strong>：在<code>git rebase</code>执行之前调用。可以用来规范rebase操作，建议阅读<code>.git/hooks/pre-rebase.sample</code>中的代码。</li>
<li><strong>post-checkout</strong>：<code>git checkout</code>执行完成后调用。可以用来清理一些不被git追踪的临时文件。</li>
<li><strong>post-merge</strong>：<code>git merge</code>执行完成后调用。可以用来恢复Git无法跟踪的工作区数据。</li>
<li><strong>pre-push</strong>：<code>git push</code>之前调用，可以在推送之前验证对引用的更新操作。</li>
</ul>
<h3 id="服务器端Hooks"><a href="#服务器端Hooks" class="headerlink" title="服务器端Hooks"></a>服务器端Hooks</h3><ul>
<li><strong>pre-receive</strong>：处理来自客户端的推送操作时最先被调用。可以用来阻止对引用进行非快进（non-fast-forward）的更新，或对该推送修改的所有引用和文件进行访问控制。</li>
<li><strong>update</strong>：在pre-receive之后调用，且与pre-receive类似，区别是它会为推送者更新的每一个分支运行一次。</li>
<li><strong>post-receive</strong>：在成功推送之后调用。可以用来发邮件、通知持续集成的服务器、更新issues等等。</li>
</ul>
<h2 id="简单尝试"><a href="#简单尝试" class="headerlink" title="简单尝试"></a>简单尝试</h2><p>每个git仓库下都有个很核心的<code>.git</code>文件夹，因为<code>.git</code>里的信息比较敏感，所以git不会将它上传到远程仓库，vscode默认也是隐藏的。<code>.git/hooks</code>目录下存储的就是各种hooks，文件名就对应着不同的钩子，在执行特定命令时就会调用这些脚本，其中<code>.sample</code>后缀的就是官网样例。</p>
<ol>
<li><p>可以在vscode的设置中修改工作区配置(<code>.vscode/settings.json</code>)，显示出<code>.git/hooks</code>文件夹。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;files.exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;**/.git&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;**/.git/&#123;objects,[!hooks]*&#125;&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>项目根目录新建一个<code>.githooks</code>文件夹，此文件夹下新建<code>post-checkout</code>文件，并写入以下内容：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">curBranch=`git branch | grep <span class="string">&quot;*&quot;</span>`</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;# 当前分支：<span class="variable">$&#123;curBranch:2&#125;</span> \n# 当前commit：<span class="variable">$&#123;2&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果git版本在2.9以上，可以手动配置githooks所在的目录，在项目根目录下执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config core.hooksPath .githooks</span><br></pre></td></tr></table></figure>
<p>  如果git版本在2.9以下，可以创建软链指向到<code>.git/hooks</code>：</p>
  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find .git/hooks -<span class="built_in">type</span> l -<span class="built_in">exec</span> <span class="built_in">rm</span> &#123;&#125; \; &amp;&amp; find .githooks -<span class="built_in">type</span> f -<span class="built_in">exec</span> <span class="built_in">ln</span> -sf ../../&#123;&#125; .git/hooks/ \;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后设置hook文件的可执行权限进行脚本激活：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x .githooks/post-checkout</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Husky"><a href="#Husky" class="headerlink" title="Husky"></a>Husky</h2><p>Husky（二哈.png）可以自动配置githooks，个人项目里使用Husky会变得更加便利，团队里也可以使用Husky来做hooks共享。webpack、babel、angular、antd等大型开源项目都使用了Husky，还是比较值得信赖的。不放心可以去看下源码，代码很短也不复杂。</p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>不同版本Husky工作原理略有不同，其中Husky 6可以作为一个分水岭。所谓用新不用旧嘛，如果老项目里用的还是旧版，可以使用<a href="https://typicode.github.io/husky/#/?id=migrate-from-v4-to-v7">husky-4-to-7</a>工具快速迁移到新版。</p>
<ul>
<li><strong>原理</strong>：旧版是直接修改<code>.git/hooks</code>中的脚本，Husky 6则开始采用git 2.9的特性<code>core.hooksPath</code>来指定githooks所在的目录，同时也解决了一些根本上的问题。</li>
<li><strong>使用方式</strong>：旧版支持在<code>package.json</code>中通过<code>husky: &#123;hooks: &#123;&quot;pre-commit&quot;: xxx&#125; &#125;</code>的方式来更新脚本，而新版仅支持修改<code>.husky/</code>目录下的脚本文件。</li>
</ul>
<p>新版Husky中有<code>npx husky-init</code>这个关键命令，通过它就能大致了解Husky的工作原理，下面以npm为例：</p>
<ul>
<li>利用npx临时下载并运行<a href="https://github.com/typicode/husky-init"><code>husky-init</code></a>这个依赖包。<ul>
<li>读取<code>package.json</code>文件，在<code>devDependencies</code>中添加<code>husky</code>包，在script中添加<code>&quot;prepare&quot;: &quot;husky install&quot;</code>指令。</li>
<li>在根目录生成<code>.husky</code>文件夹，也会生成一个<code>pre-commit</code>样例。</li>
</ul>
</li>
<li>再借助<code>husky</code>依赖包的<code>install</code>完成：<ul>
<li>在根目录的<code>.husky</code>中生成<code>_</code>文件夹，其中有关键的<code>husky.sh</code>文件。</li>
<li>执行<code>config core.hooksPath .husky</code>（需要git2.9以上），将githooks目录指向<code>.husky</code>。若git版本不够，建议升级，要是实在升不了，安装旧版husky。</li>
</ul>
</li>
</ul>
<h3 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h3><p>由于Husky的功能与编译无关，遵循<a href="https://docs.npmjs.com/cli/v7/using-npm/scripts#best-practices">“The only valid use of install or preinstall scripts is for compilation which must be done on the target architecture”</a>，Husky不再支持自动安装，所以还需要做<code>npm install husky</code>以外的事情。</p>
<p>完整教程请看<a href="https://typicode.github.io/husky/#/">官方文档</a>，例如关于Monorepo、环境变量、Git-flow等等文档里都写的很清楚。Yarn使用husky稍微有点复杂，不支持<code>prepare</code>，私有仓库公有仓库配置也不同，用Yarn的就直接看<a href="https://typicode.github.io/husky/#/?id=yarn-2">官网文档</a>吧。Npm使用起来就比较简单，所以下面就只从npm的角度介绍。</p>
<ol>
<li><p>首次安装直接运行以下对应的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx husky-init &amp;&amp; npm install</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果不想使用步骤一的自动安装，也可以选择手动安装，相当于是拆分了<code>husky-init</code>，只需分步执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install husky --save-dev</span><br><span class="line">npx husky install</span><br><span class="line">npm set-script prepare <span class="string">&quot;husky install&quot;</span></span><br></pre></td></tr></table></figure>
<p>  其中<code>npm set-script</code>需要npm7以上，如果版本过低，建议升级或自己手动向<code>package.json</code>添加。</p>
</li>
<li><p>添加hook：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx husky add .husky/commit-msg <span class="string">&#x27;npx --no-install commitlint --edit &quot;$1&quot;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果不想执行hook，可以利用HUSKY环境变量绕过hook：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HUSKY=0 git push</span><br></pre></td></tr></table></figure>
</li>
<li><p>卸载Husky：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall husky &amp;&amp; git config --<span class="built_in">unset</span> core.hooksPath</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="yorkie"><a href="#yorkie" class="headerlink" title="yorkie"></a>yorkie</h2><p><a href="https://github.com/yyx990803/yorkie">yorkie</a>是尤大fork自husky，并内置到了<a href="https://cli.vuejs.org/zh/guide/cli-service.html#git-hook">Vue CLI</a>，能在<code>package.json</code>的<code>gitHooks</code>字段中方便地指定Git hook。<br>yorkie对husky并不兼容，它对monorepo进行了改良，同时也修改了配置字段。但是yorkie最后一次更新是18年🤷🏻‍♀️基本上算是停止维护了。而且它fork的是旧版husky，即原理仍是直接修改<code>.git/hooks</code>中的脚本。这时候就会面临yorkie和husky二选一，因为同时使用会产生冲突，如果yorkie够用，则不需要再安装husky。如果想要新功能或者发现了一些无法解决的问题，可以选择husky。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;gitHooks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pre-commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lint-staged&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;*.&#123;js,vue&#125;&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service lint&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ul>
<li>githooks支持shell、Perl、Ruby、Python等脚本语言，可以选用任意你擅长的，甚至是NodeJs。</li>
<li>建议阅读<code>.sample</code>后缀的官网样例，里面有hook基本介绍、参数说明和实用代码，非常值得借鉴。</li>
<li>大多都是使用hooks来辅助团队内的编码规范和commit规范，此外hooks还能做流程规范、自动部署（不太好用）等等。</li>
<li>如果有使用sourcetree这类工具，hooks可能不会生效，主要是环境变量问题，此时需要在脚本中添加<code>export PATH=/usr/local/bin:$PATH</code>，来临时指定PATH环境变量。</li>
</ul>
<h3 id="辅助工程化"><a href="#辅助工程化" class="headerlink" title="辅助工程化"></a>辅助工程化</h3><p>网上教程很多，步骤也挺多，我就只写一下常见的组合吧😝</p>
<ul>
<li><strong>代码规范</strong>：<a href="https://typicode.github.io/husky/">husky</a> + <a href="https://github.com/okonet/lint-staged">lint-staged</a> + <a href="http://eslint.cn/">eslint</a> + <a href="https://prettier.io/">prettier</a></li>
<li><strong>git commit规范</strong>：<a href="https://typicode.github.io/husky/">husky</a> + <a href="https://commitlint.js.org/#/">commitlint</a></li>
</ul>
<h3 id="hook测试和禁用"><a href="#hook测试和禁用" class="headerlink" title="hook测试和禁用"></a>hook测试和禁用</h3><p>exit命令一般用于结束脚本，执行成功会返回0，非零退出则表示脚本执行失败。<br>所以，要测试hook可以在脚本末尾添加<code>exit 1</code>来中止git命令。禁用也一样，例如想要禁用rebase，就可以这样创建<code>pre-rebase</code>脚本：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disallow all rebasing</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;pre-rebase: Rebasing is dangerous. Don&#x27;t do it.&quot;</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure>

<h3 id="NodeJs脚本样例-——-Husky"><a href="#NodeJs脚本样例-——-Husky" class="headerlink" title="NodeJs脚本样例 —— Husky"></a>NodeJs脚本样例 —— Husky</h3><p>创建<code>.husky/post-checkout.js</code>文件，写入js代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">argv</span>)</span><br></pre></td></tr></table></figure>

<p>创建post-checkout脚本，调用js文件，同时传入参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">. <span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class="line"><span class="comment"># 支持 sourcetree</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/local/bin:<span class="variable">$PATH</span></span><br><span class="line">node ./.husky/post-checkout.js <span class="variable">$0</span> <span class="variable">$1</span> <span class="variable">$2</span> <span class="variable">$3</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git备忘录</title>
    <url>/tool-git-memo/</url>
    <content><![CDATA[<p><a href="/tags/git/">之前写了挺多篇关于git的文章</a>，也用了好几年了，这篇就来点更实用的吧。我是比较习惯使用git命令行，再配合vscode的一些小功能，sourcetree也尝试着用过，但习惯实在是改不过来，还是更喜欢用命令行。那就记录下一些我用的没那么频繁但又必须得知道的一些指令吧，不记下来我又得忘，害！</p>
<span id="more"></span>

<h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul>
<li><a href="https://git-scm.com/book/zh/v2">Pro Git</a></li>
<li><a href="https://backlog.com/git-tutorial/cn/">猴子都能懂的Git入门</a></li>
<li><a href="https://github.com/git-tips/tips">git-tips</a></li>
<li><a href="https://www.atlassian.com/git/tutorials/advanced-overview">Bitbucket-Advanced Tips</a></li>
<li><a href="https://github.com/geeeeeeeeek/git-recipes">git-recipes</a></li>
</ul>
<h2 id="易混淆的指令"><a href="#易混淆的指令" class="headerlink" title="易混淆的指令"></a>易混淆的指令</h2><ul>
<li><strong>pull VS fetch</strong>：一般情况下用pull就行。<ul>
<li><code>git fetch</code>：取得远端仓库的最新历史记录，不会自动merge。</li>
<li><code>git pull</code>：可简单理解为fetch + merge，即把远端仓库的内容fetch下来后再与本地分支合并。</li>
</ul>
</li>
<li><strong>revert VS reset</strong>：更建议使用revert。<ul>
<li><code>git revert</code>：以新增一个commit的方式还原某一个commit的修改，不会改变提交历史。</li>
<li><code>git reset</code>：回到某个commit的状态，并删除后面的commit。有风险，不建议使用。</li>
</ul>
</li>
<li><strong>merge VS rebase VS Cherry-Pick</strong>：慎用rebase，参考<a href="https://github.com/geeeeeeeeek/git-recipes/blob/master/sources/5.1-%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6Merge%E8%BF%98%E6%98%AFRebase.md">《代码合并：Merge、Rebase 的选择》</a>。<ul>
<li><code>git merge</code>：将两个分支合并到一起，并生成一个新的commit记录。</li>
<li><code>git cherry-pick</code>：“复制”一个commit并在当前分支做一次完全一样的新提交。</li>
<li><code>git rebase</code>：变基，在当前分支重演另一分支的commit，本质上是线性化、自动化的cherry-pick。绝不要在公共的分支上使用。</li>
</ul>
</li>
</ul>
<h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><h3 id="修改最新commit描述"><a href="#修改最新commit描述" class="headerlink" title="修改最新commit描述"></a>修改最新commit描述</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend -m <span class="string">&quot;new commit info&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改历史commit描述（非最新）"><a href="#修改历史commit描述（非最新）" class="headerlink" title="修改历史commit描述（非最新）"></a>修改历史commit描述（非最新）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># HEAD~n代表要修改前第n次提交，也可以改用&lt;commit_id&gt;</span></span><br><span class="line">git rebase -i HEAD~n</span><br><span class="line"><span class="comment"># 在出现的列表中，将需要修改的commit前的pick改为reword</span></span><br><span class="line"><span class="comment"># 提交新的commit描述</span></span><br><span class="line">git commit --amend -m <span class="string">&quot;new commit info&quot;</span></span><br><span class="line"><span class="comment"># 继续执行rebase</span></span><br><span class="line">git rebase --<span class="built_in">continue</span></span><br><span class="line"><span class="comment"># 会自动跳回原分支，再将修改的提交信息强制更新至远程</span></span><br><span class="line">git push origin -f</span><br></pre></td></tr></table></figure>

<h3 id="强制删除已提交的commit"><a href="#强制删除已提交的commit" class="headerlink" title="强制删除已提交的commit"></a>强制删除已提交的commit</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --soft HEAD~n</span><br><span class="line">git push origin &lt;branch_name&gt; -f</span><br></pre></td></tr></table></figure>

<h3 id="撤销commit，会新增一条“反转”的commit"><a href="#撤销commit，会新增一条“反转”的commit" class="headerlink" title="撤销commit，会新增一条“反转”的commit"></a>撤销commit，会新增一条“反转”的commit</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git revert &lt;commit_id&gt;</span><br></pre></td></tr></table></figure>

<h3 id="暂时不想提交本地代码，又需要在原先的代码上修改"><a href="#暂时不想提交本地代码，又需要在原先的代码上修改" class="headerlink" title="暂时不想提交本地代码，又需要在原先的代码上修改"></a>暂时不想提交本地代码，又需要在原先的代码上修改</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash save <span class="comment"># 暂时保存现状</span></span><br><span class="line">git stash list <span class="comment"># 显示暂存列表</span></span><br><span class="line">git stash pop <span class="comment"># 恢复暂存的操作</span></span><br><span class="line">git stash clear <span class="comment"># 删除所有暂存的操作</span></span><br></pre></td></tr></table></figure>

<h3 id="把多次提交中的某一次提交从一个分支迁移到另外一个分支"><a href="#把多次提交中的某一次提交从一个分支迁移到另外一个分支" class="headerlink" title="把多次提交中的某一次提交从一个分支迁移到另外一个分支"></a>把多次提交中的某一次提交从一个分支迁移到另外一个分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A-B  master</span><br><span class="line">   \</span><br><span class="line">    C-D-E-F-G develop</span><br></pre></td></tr></table></figure>

<p>如果想把develop分支中的D，F两次提交移动到master分支，就可以：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git cherry-pick D</span><br><span class="line">git cherry-pick F</span><br></pre></td></tr></table></figure>


<h3 id="bug分支合入master分支时想保持整洁的commit"><a href="#bug分支合入master分支时想保持整洁的commit" class="headerlink" title="bug分支合入master分支时想保持整洁的commit"></a>bug分支合入master分支时想保持整洁的commit</h3><p>Squash Merge可以在merge时把分支上所有commit合并为一个commit后再merge到目标分支，不会执行commit操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge --squash bugfix</span><br><span class="line">git commit -m <span class="string">&quot;bug fixed&quot;</span></span><br></pre></td></tr></table></figure>


<h3 id="找回被删除的分支"><a href="#找回被删除的分支" class="headerlink" title="找回被删除的分支"></a>找回被删除的分支</h3><p>Git branch是指向commit的引用，所以删除branch操作只会删引用，不会删除commit。但如果一个commit不在任何一个branch上，那么在一定时间后，它会被Git的回收机制删除掉。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># reflog可以查看本地更新过HEAD的git命令记录，找到被删除前的commit_id</span></span><br><span class="line">git reflog</span><br><span class="line">git checkout &lt;commit_id&gt;</span><br><span class="line">git checkout -b &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git tag使用指南</title>
    <url>/tool-git-tag/</url>
    <content><![CDATA[<p>如果一个频繁迭代的项目单纯靠分支来做版本控制，一个需求一个分支，那么分支就会越来越多，分不清主次，尤其情况比较复杂的项目，各种版本分支就会交杂在一起，分支图就是一团乱麻。</p>
<p>我比较推荐使用git中的tag来做版本控制，这也是主流的版本控制方式，很多WorkFlow模型、GitHub的release功能等等都是基于tag。功能发布完打上tag，再删除无用分支，分支图也会更加清晰，日后的回溯和复查会更加便利。</p>
<span id="more"></span>

<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>tag顾名思义就是标签，git可以为仓库历史中的某一个commit打上tag标记，相当于一个快照，一般作为发布节点使用。tag经常和branch一起出现，tag可以被打在branch上的任意一个节点，甚至还能给tag打tag。</p>
<p>Git支持轻量和附注两种标签：</p>
<ul>
<li>轻量标签（lightweight）：只是某个特定提交的引用，没有保存任何其他信息，不是一个对象。</li>
<li>附注标签（annotated）：存储在Git数据库中的一个完整对象，包含姓名、邮箱、日期、标签信息，可以使用GPG签名并验证。并且具有自己的hash ID，其他标签能直接指向此标签。</li>
<li>建议使用附注标签。通常附注标签意味着发布，轻量标签意味着私有或临时，因此一些git命令（如<code>git describe</code>）会默认忽略轻量标签。</li>
</ul>
<p>tag命名一般遵循GitHub语义化版本命名规范（Semantic Versioning）：<strong>主版本号.次版本号.修订号</strong></p>
<ul>
<li>主版本号：当做了不兼容的 API 修改</li>
<li>次版本号：当做了向下兼容的功能性新增</li>
<li>修订号：当做了向下兼容的问题修正</li>
</ul>
<p>可以使用以下几种方式来应用tag：</p>
<ul>
<li>采用git-flow、gitlab-flow这类模型来做版本控制，它们的版本控制也是基于tag，有很多辅助工具，如扩展集<a href="https://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html">git-flow-avh</a>，可视化工具<a href="https://www.sourcetreeapp.com/">Sourcetree</a>和<a href="https://www.git-tower.com/">Git Tower</a>也内置git-flow，都能帮我们自动完成打tag的工作。</li>
<li>如果有自动化部署工具，就可以在合并至线上分支后时加入自动打tag的命令。</li>
<li>当然也可以选择自己来打tag，依个人喜好借助可视化工具或者直接使用命令行。</li>
</ul>
<h2 id="git-tag命令"><a href="#git-tag命令" class="headerlink" title="git tag命令"></a>git tag命令</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p><strong>查看</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出已有的标签</span></span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出筛选过的标签</span></span><br><span class="line">git tag -l <span class="string">&quot;v1.0*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远程所有标签</span></span><br><span class="line">git ls-remote --tags origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地所有标签，会输出与ls-remote相同格式的列表，便于与远程对比</span></span><br><span class="line">git show-ref --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看标签信息和与之对应的提交信息</span></span><br><span class="line">git show v1.0.0</span><br></pre></td></tr></table></figure>

<p><strong>创建</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建附注标签</span></span><br><span class="line">git tag -a v1.0.0 -m <span class="string">&quot;附注信息&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建轻量标签</span></span><br><span class="line">git tag v1.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对过去的提交打标签，在命令末尾指定提交的校验和（或部分校验和）</span></span><br><span class="line"><span class="comment"># git tag -a &lt;tagName&gt; &lt;commitId&gt;</span></span><br><span class="line">git tag -a v1.1.0 9fceb02</span><br></pre></td></tr></table></figure>

<p><strong>同步</strong><br>默认情况下，<code>git push</code>不会将本地标签同步到远程，需要手动推送。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推送标签到远程</span></span><br><span class="line">git push origin v1.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有不在远程的标签</span></span><br><span class="line">git push origin --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取远程标签</span></span><br><span class="line">git fetch --tags</span><br></pre></td></tr></table></figure>

<p><strong>切换</strong><br>需要注意的副作用：当本地代码切至某个标签后，会处于“分离头指针”状态，如果有新提交，新提交将不属于任何分支且无法访问（除非通过hash ID），标签也不会发生变化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换至某个标签所指向的文件版本</span></span><br><span class="line">git checkout v1.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于某个标签创建新分支</span></span><br><span class="line"><span class="comment"># git checkout -b &lt;branchName&gt; &lt;tagName&gt;</span></span><br><span class="line">git checkout -b version2 v1.0.0</span><br></pre></td></tr></table></figure>

<p><strong>修改</strong><br>修改tag比较复杂，尤其涉及到已推送到远程的附注标签。如果还不能熟练使用tag，建议直接采用<strong>删除旧标签、新建正确标签</strong>的方式。照着网上乱七八糟的教程来反而容易出现各种奇奇怪的问题，比如破坏附注标签的签名、误建了指向另一标签的标签等等。</p>
<p>参考链接：<a href="https://git-scm.com/docs/git-tag#_on_re_tagging">On Re-tagging</a>、<a href="https://stackoverflow.com/questions/7813194/how-do-i-edit-an-existing-tag-message-in-git">how-do-i-edit-an-existing-tag-message-in-git</a>、<a href="https://stackoverflow.com/questions/49283734/why-isnt-my-tag-listed-when-i-checkout-with-git-gui">why-isnt-my-tag-listed-when-i-checkout-with-git-gui</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改本地已存在、还未推送到远程的tag注释</span></span><br><span class="line">git tag v1.0.0 -f -m <span class="string">&quot;new message&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名本地和远程的轻量标签</span></span><br><span class="line">git tag &lt;newTagName&gt; &lt;oldTagName&gt;</span><br><span class="line">git tag -d &lt;oldTagName&gt;</span><br><span class="line">git push origin :refs/tags/&lt;oldTagName&gt;</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure>

<p><strong>删除</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除本地标签</span></span><br><span class="line">git tag -d v1.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程标签</span></span><br><span class="line">git push origin -d v1.0.1</span><br></pre></td></tr></table></figure>



<h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><p>可查阅<a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE">Git-Basics-Tagging</a>、<a href="https://git-scm.com/docs/git-tag">git-tag</a>，或使用<code>git tag --help</code>命令。</p>
<ul>
<li><code>-a</code>、<code>--annotate</code>：创建一个未签名、带注释的标记对象。</li>
<li><code>-l</code>、<code>--list</code>：列出标签。</li>
<li><code>-i</code>、<code>--ignore-case</code>：排序和过滤标签时不区分大小写。</li>
<li><code>-m &lt;msg&gt;</code>、<code>--message=&lt;msg&gt;</code>：设置标签信息，如果存在多个<code>-m</code>选项，它们将作为单独的段落连接起来。</li>
<li><code>-d</code>、<code>--delete</code>：删除指定标签。</li>
<li><code>-f</code>、<code>--force</code>：使用指定名称替换现有标签（而不是失败）。</li>
<li><code>-F &lt;file&gt;</code>、<code>--file=&lt;file&gt;</code>：从指定文件中获取标签消息。</li>
<li><code>-n&lt;num&gt;</code>：指定使用<code>-l</code>时打印多少行。</li>
<li><code>--sort=&lt;key&gt;</code>：根据关键字排序。</li>
<li><code>--contains &lt;commit&gt;</code>：只列出包含指定提交的标签（如果未指定，则为HEAD）。</li>
<li><code>--no-contains &lt;commit&gt;</code>：只列出不包含指定提交的标签（如果未指定，则为HEAD）。</li>
<li><code>-s</code>、<code>--sign</code>：使用默认邮箱地址密钥创建一个GPG签名标签。</li>
<li><code>-u &lt;keyid&gt;</code>、<code>--local-user=&lt;keyid&gt;</code>：使用指定密钥创建GPG签名标签。</li>
<li><code>-v</code>、<code>--verify</code>：验证指定标签的GPG签名。</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>版本控制漫谈</title>
    <url>/tool-git-workflow/</url>
    <content><![CDATA[<p>上篇<a href="/tool-git-tag/">《git tag使用指南》</a>简单介绍了下如何利用tag来做简易的git版本控制，但我在查资料的时候发现了很多有意思的内容，我版本控制只用过git，三大工作流虽然都用过，但没去深究过，知之甚少啊。本来以为git应该一家独大了，和几位朋友聊了下发现还有很多很多公司在用svn，甚至还有在用vss的，我着实井底之蛙了。本🐸目前还是用git为主，其他工具学不动了，所以本篇还是以git为主展开。</p>
<span id="more"></span>

<h2 id="常见版本控制系统"><a href="#常见版本控制系统" class="headerlink" title="常见版本控制系统"></a>常见版本控制系统</h2><ul>
<li><strong>本地版本控制</strong>：大多都是采用某种简单的数据库来记录文件的历次更新差异，其中最流行的一种叫做 RCS，在硬盘上保存补丁集（补丁是指文件修订前后的变化）。</li>
<li><strong>集中式版本控制</strong>（Centralized Version Control Systems，CVCS）：必须联网使用、单一的集中管理服务器、学习成本低。<ul>
<li>CVS（Concurrent Versions System，1986）采用Copy-Modify-Merge（修改－冲突－合并）并发工作模式。它的网络化首次允许多个开发人员检出并同时处理相同的文件。</li>
<li>VSS（Visual Source Safe，1994）微软出品，主要采用Lock-Modify-Unlock（锁定－编辑－解锁）独占工作模式，一个文件一个时间点上只有一个人有权利修改并提交，版本号对应的是单个文件。</li>
<li>SVN（Subversion，2000）开源免费，采用了分支管理系统，设计目标就是取代CVS，采用Copy-Modify-Merge并发工作模式。</li>
</ul>
</li>
<li><strong>分布式版本控制</strong>（Distributed Version Control System，DVCS）：支持离线、分布式、完整备份、轻量、学习成本较高。<ul>
<li>Mercurial（HG，2005）是目前次于Git的分布式VCS，随着2019年BitBucket宣布停止对Mercurial的支持，代表着Mercurial逐渐没落。</li>
<li>Git（2005）是目前最主流的分布式开源版本控制系统，设计初衷完全是为了解决开发Linux内核所产生的实际问题。</li>
</ul>
</li>
</ul>
<p>目前最多被使用的还是Git和SVN，一直有很多人在争论哪个更好，此处借用一个<a href="https://stackoverflow.com/questions/871/why-is-git-better-than-subversion">高赞回答</a>：<strong>Git is not better than Subversion. But is also not worse. It’s different.</strong><br>Git非常适合开源社区，但并不适合所有企业。就像Google、Facebooke、华为、网易等这类大公司都因为Git的局限性而没有选择Git，比较典型的就是Google自研了非常🐂的单一代码仓库、主干开发模式的版本管理系统Piper。<a href="https://svnbucket.com/posts/svn-vs-git-difference/">主要是因为Git不适合超大型项目和没有文件级权限控制</a>。所以，根据实际情况选择适合的工具才是最明智的。</p>
<p>谈到Google的Piper想插一嘴，monorepo是现在很火的一种代码管理模式，也是在微前端领域经常被提到的词汇，指的是在一个项目仓库 (repo) 中管理多个模块&#x2F;包 (package)。Babel、Vue、React、Npm7等等许多开源项目也都采用了monorepo模式，Yarn和Npm也都支持使用Workspaces字段来管理monorepo。如果公司内部有大型项目的话，不妨尝试一下。有兴趣的可以参考<a href="https://mp.weixin.qq.com/s/mV6gvPy-N3NZPEYONV4A0A">《All in one：项目级 monorepo 策略最佳实践》</a>这篇文章。</p>
<h2 id="git三大工作流"><a href="#git三大工作流" class="headerlink" title="git三大工作流"></a>git三大工作流</h2><p>鉴于Git的灵活性，出现了各种各样的工作流。<a href="https://www.atlassian.com/git/tutorials/comparing-workflows#centralized-workflow">常见工作流</a>可大致分为集中式、功能分支、Forking三种，业界的三大知名工作流（Git flow、GitHub flow、GitLab flow）均属于功能分支工作流类型。</p>
<ul>
<li><strong>集中式工作流</strong>（Centralized Workflow）：类似svn，是只使用一个分支（master）的开发方式，缺点是不同开发的提交混杂在一起，难以定位问题。</li>
<li><strong>功能分支工作流</strong>（Feature Branch Workflow）：核心理念是所有功能开发都应该在专用分支而不是主分支中进行。通常是一个主干master分支 + 多个feature分支。</li>
<li><strong>Forking工作流</strong>（Forking Workflow）：以Github为代表的一种代码协作方式，开发者通过Fork源仓库进行编写代码，完成后发起pull request，源仓库作者可以选择是否接受该PR。</li>
</ul>
<h3 id="Git-flow"><a href="#Git-flow" class="headerlink" title="Git flow"></a>Git flow</h3><p><a href="https://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html">Git flow</a>是最早诞生、并得到广泛采用的一种工作流程。从2010年作者Vincent Driessen发表<a href="https://nvie.com/posts/a-successful-git-branching-model/">《A successful Git branching model》</a>开始，Git flow被大量团队视为规范，同时也饱受争议。2020年Vincent Driessen再次发声，称在持续交付的情况下更推荐使用GitHub flow这类简单工作流。虽然Git flow已跌落神坛，但还是很值得借鉴的。</p>
<p>Git flow相当严格，清晰可控，各方面都考虑的很周全，但也比较复杂，实施起来如果不依赖自动化工具，单纯靠项目成员自觉遵守的难度比较大。它基于版本发布，目标是一段时间以后产出一个新版本，但是现在web项目大多都是持续发布，这时master和develop差别不大，就没必要维护两个长期分支，这也是被众多团队诟病的地方。</p>
<ul>
<li><strong>主分支（master）</strong>：长期分支，一般用于管理对外发布版本，每个tag都对应一个发布版本。</li>
<li><strong>开发分支（develop）</strong>：长期分支，一般用于作为日常开发汇总，即开发版的代码。</li>
<li>**功能分支（feature&#x2F;*）**：短期分支，一般用于一个新功能的开发。从develop分支分出，开发完成后，再并入develop，最后删除该分支。</li>
<li>**预发布分支（release&#x2F;*）**：短期分支，发布正式版本之前用于测试的预发布版本。从develop拉出，预发布结束后，合并进develop和master，最后在master打个tag，并删除该预发布分支。</li>
<li>**修补分支（fixbug&#x2F;*）**：短期分支，从master拉出，修补结束后，合并进develop和master，最后在master打个tag，删除该修补分支。</li>
<li>**辅助分支（support&#x2F;*）**：长期分支，一般用于特殊功能支持的分支，不合并到主分支。属于实验性分支，所以一般不会提到，利用这个分支可以使工作流同时支持多版本。</li>
</ul>
<img src="../image/tool-git-workflow/git-flow.png" width="70%">


<h3 id="GitHub-flow"><a href="#GitHub-flow" class="headerlink" title="GitHub flow"></a>GitHub flow</h3><p><a href="https://docs.github.com/cn/get-started/quickstart/github-flow">GitHub flow</a>是GitHub<a href="http://scottchacon.com/2011/08/31/github-flow.html">在2011年发布的工作流模型</a>，是Git flow的简化版，专门配合”持续发布”。GitHub flow只有一个长期分支，就是master，因此用起来非常简单。<br>GitHub flow的最大优点就是简单，适合小团队、需求少和持续发布的项目，但是它不适用于以下场景：版本延迟发布（例如应用审核）、不同环境的部署（例如测试环境，预发环境，正式环境）、不同版本发布与修复。</p>
<img src="../image/tool-git-workflow/github-flow.png">

<ul>
<li>第一步：根据需求，从master拉出新分支，不区分功能分支或补丁分支。</li>
<li>第二步：新分支开发完成或需要讨论的时候，就向master发起一个pull request（简称PR）。</li>
<li>第三步：PR既是通知又是对话机制，可以一起评审和讨论代码，过程中还可以不断提交代码。</li>
<li>第四步：PR被接受，合并进master，部署到生产环境后，删除本次需求拉出的分支（也可先部署再合并）。</li>
</ul>
<h3 id="GitLab-flow"><a href="#GitLab-flow" class="headerlink" title="GitLab flow"></a>GitLab flow</h3><p><a href="https://docs.gitlab.com/ee/topics/gitlab_flow.html">GitLab flow</a>是Gitlab在2014年创建的工作流，吸取了Git flow与GitHub flow两者的优点，既有适应不同开发环境的弹性，又有单一主分支的简单和便利。GitLab flow分为持续发布与版本发布两种情况，以适应不同的发布类型。</p>
<ul>
<li><strong>持续发布</strong>：<ul>
<li>为不同的环境建立不同的分支：开发环境master、预发环境pre-production、生产环境production。</li>
<li>上游优先原则（upsteam first）：只存在一个主分支master，是所有其他分支的”上游”，代码合并的顺序要按环境依次推送，确保代码被充分测试过，才会从上游分支合并到下游分支。master &#x3D;&gt; pre-production &#x3D;&gt; production。</li>
</ul>
</li>
<li><strong>版本发布</strong>：每个稳定版本都从master拉出一个分支，比如2-3-stable、2-4-stable等等。只有修补bug，才允许将代码合并到这些分支，并且此时要更新小版本号。</li>
</ul>
<div><img src="../image/tool-git-workflow/gitlab-flow1.png" width="52%" style="margin: 0 1%;display:inline-block!important;"><img src="../image/tool-git-workflow/gitlab-flow2.png" width="44%" style="margin: 0 1%;display:inline-block!important;"></div>

<h3 id="其他flow"><a href="#其他flow" class="headerlink" title="其他flow"></a>其他flow</h3><ul>
<li><a href="https://trunkbaseddevelopment.com/">Trunk-based development</a>：是持续集成思想所崇尚的工作方式，由单个主干分支和多个发布分支组成，没有显性的特性分支，每个发布分支在特定版本的提交点上从主干创建，用来进行上线部署和Hotfix。</li>
<li><a href="https://www.endoflineblog.com/oneflow-a-git-branching-model-and-workflow">OneFlow</a>：Git flow简化版，只有一个长期主分支master。它的一个变体是双主分支，即develop和master。</li>
<li>AoneFlow：阿里研发效能事业部基于TrunkBased和GitFlow提出的新思路。只使用三种分支类型：主干分支、特性分支、发布分支。从主干创建特性分支，通过合并特性分支形成发布分支，发布到线上正式环境后，合并相应的发布分支到主干，在主干添加标签，同时删除该发布分支关联的特性分支。</li>
<li><a href="https://git-scm.com/book/zh/v2/%E5%88%86%E5%B8%83%E5%BC%8F-Git-%E5%88%86%E5%B8%83%E5%BC%8F%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B">Dictator and Lieutenant Workflow</a>：多仓库工作流程的变种，一般适用于拥有数百位协作开发者的超大型项目，例如Linux内核。项目总负责人（即主管）可以把大量分散的集成工作委托给不同的小组负责人分别处理，然后在不同时刻将大块的代码子集统筹起来，用于之后的整合。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SVN还是Git？Git flow有害？Monorepo还是Multirepo？网上很多程序员围绕这几个话题吵架吵得很凶，就像有人大喊了一句“PHP是世界上最好的语言”一样。引用下Vincent Driessen说的：“To conclude, always remember that panaceas don’t exist. Consider your own context. Don’t be hating. Decide for yourself.”<br>上文介绍的一些工作流已经基本上能覆盖到所有的开发场景，但这些工作流只作为指导原则，而不是具体规则。可以根据项目情况选用其中一套成熟的工作流，同时对于一些实际问题做一些调整，以提高工作效率为根本目的，做出一套最适合的工作流。</p>
<ul>
<li>集中式工作流适用于从SVN迁移到Git或较小规模的团队。</li>
<li>Fork工作流适用于公共开源项目。</li>
<li>Git flow适用于大团队多版本并存迭代的开发流程。</li>
<li>GitHub flow适用于中小型团队持续集成的开发流程。</li>
<li>GitLab flow适用范围则介于上面二者之间，支持持续发布与版本发布两种情况。</li>
</ul>
<h3 id="一些小技巧"><a href="#一些小技巧" class="headerlink" title="一些小技巧"></a>一些小技巧</h3><ul>
<li><strong>善用工具和插件</strong>：像Sourcetree和Git Tower这类可视化工具都有集成git flow，vscode也能搜到各类flow的插件，还有git-flow-avh这类的命令工具，如果公司有发布平台能自动管理流程的话那是更加不错了。</li>
<li><strong>保护长期分支</strong>：比较重要的项目建议将长期分支保护起来，只允许负责人修改和审批，开发人员必须通过Pull Request（Gitlab里面叫Merge Request）来将新代码合并至长期分支。</li>
<li><strong>短期分支存在时间不能过长</strong>：多人协作的项目，如果短期分支的需求开发周期较长，建议分割成多个分支定期合并，防止后期产生冲突，被合并后也要及时更新tag并删除，保持分支区域的整洁。</li>
<li><strong>学好英语🥲</strong>：查资料全是英文，<a href="https://githubflow.github.io/">《The best way to use Git and GitHub》</a>、<a href="https://about.gitlab.com/topics/version-control/what-are-gitlab-flow-best-practices/">《What are GitLab Flow best practices?》</a>这类优秀的最佳实践文章值得一看。</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>2022，新Hexo</title>
    <url>/tool-hexo-2022/</url>
    <content><![CDATA[<p>最近升级了本地的Node版本，然后年代久远的Hexo3出问题了得升级🤦🏻‍♀️，这就唤起了我18年升级NexT的记忆，可太麻烦了，那就索性删掉重建吧！这时候发现NexT终于能变成NPM包来引入了🥲，可太欣慰了，正好见证了<a href="https://theme-next.js.org/docs/getting-started/upgrade.html">NexT的三次大改版</a>。这篇就简单记录下怎么搭建的这个新版博客（虽然表面上看不出来改了版，嘻嘻）。</p>
<span id="more"></span>

<p>这个博客是我在2017年6月建立的，居然都已经快5个年头了。因为懒，版面设计啥的都没更新过，但是！我却从活力四射的小青年，变成了已被社会毒打多年的秃头老社畜🥲，岁月是杀猪刀也是剃头刀啊。我也算是Hexo和NexT的忠实粉丝了，从17年开始用的Hexo 3.2.0和NexT 5，中间只在18年底升过一次NexT 6，到现在的Hexo 6.0.0和NexT 8，不得不佩服这些开源项目的作者，比我勤快太多了。好了，牢骚发完了，进入正题。</p>
<h2 id="Hexo常用命令行"><a href="#Hexo常用命令行" class="headerlink" title="Hexo常用命令行"></a>Hexo常用命令行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo version <span class="comment"># 显示 Hexo 版本</span></span><br><span class="line">hexo new <span class="string">&quot;postName&quot;</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">&quot;pageName&quot;</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo new draft <span class="string">&quot;pageName&quot;</span> <span class="comment">#新建草稿</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class="line">hexo deploy <span class="comment">#将.deploy目录部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br><span class="line">hexo deploy -g  <span class="comment">#生成加部署</span></span><br><span class="line">hexo server -g  <span class="comment">#生成加预览</span></span><br><span class="line">hexo clean  <span class="comment">#把public静态文件清空再重新生成部署</span></span><br></pre></td></tr></table></figure>

<p>命令简写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n <span class="comment"># hexo new</span></span><br><span class="line">hexo s <span class="comment"># hexo server</span></span><br><span class="line">hexo g -d <span class="comment"># hexo generate &amp; hexo deploy</span></span><br></pre></td></tr></table></figure>

<h2 id="建站过程"><a href="#建站过程" class="headerlink" title="建站过程"></a>建站过程</h2><p>使用<a href="https://hexo.io/zh-cn/docs/">Hexo</a>搭建，配置了<a href="https://theme-next.js.org/">nexT</a>主题，将打包出来的静态资源部署到<a href="https://github.com/zhaoluting/zhaoluting.github.io">zhaoluting.github.io</a>仓库中。</p>
<h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli <span class="comment"># 安装hexo脚手架</span></span><br><span class="line">hexo init hexo-blog <span class="comment"># 初始化hexo项目</span></span><br><span class="line">npm install hexo-theme-next --save <span class="comment"># 安装nexT主题</span></span><br></pre></td></tr></table></figure>

<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><ul>
<li>安装各种插件，可查看本项目<a href="https://github.com/zhaoluting/hexo-blog/blob/v2.0.0/package.json"><code>package.json</code></a></li>
<li>修改<a href="https://github.com/zhaoluting/hexo-blog/blob/v2.0.0/_config.yml"><code>_config.yml</code></a>，对Hexo进行配置</li>
<li>新建<a href="https://github.com/zhaoluting/hexo-blog/blob/v2.0.0/_config.next.yml"><code>_config.next.yml</code></a>，对NexT主题进行配置</li>
<li>新建<a href="https://github.com/zhaoluting/hexo-blog/blob/v2.0.0/source/_data/styles.styl"><code>source/_data/styles.styl</code></a>，覆盖NexT主题样式</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/tool-hexo/</url>
    <content><![CDATA[<div class="note info">博客使用了NEXT主题，特此贴上我的配置代码。<a href="https://hexo.io/docs/">More info</a></div>

<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;postName&quot;</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">&quot;pageName&quot;</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class="line">hexo deploy <span class="comment">#将.deploy目录部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br><span class="line">hexo deploy -g  <span class="comment">#生成加部署</span></span><br><span class="line">hexo server -g  <span class="comment">#生成加预览</span></span><br><span class="line">hexo clean  <span class="comment">#把public静态文件清空再重新生成部署</span></span><br><span class="line">命令的简写</span><br><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br><span class="line">hexo g -d == hexo generate hexo deploy</span><br></pre></td></tr></table></figure>

<span id="more"></span>
<h2 id="需要修改的文件"><a href="#需要修改的文件" class="headerlink" title="需要修改的文件"></a>需要修改的文件</h2><h3 id="themes-x2F-next-x2F-source-x2F-css-x2F-common-x2F-components-x2F-tags-x2F-label-styl"><a href="#themes-x2F-next-x2F-source-x2F-css-x2F-common-x2F-components-x2F-tags-x2F-label-styl" class="headerlink" title="themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_common&#x2F;components&#x2F;tags&#x2F;label.styl"></a>themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_common&#x2F;components&#x2F;tags&#x2F;label.styl</h3><p>注释掉 white-space: nowrap;</p>
<h3 id="themes-x2F-next-x2F-source-x2F-images"><a href="#themes-x2F-next-x2F-source-x2F-images" class="headerlink" title="themes&#x2F;next&#x2F;source&#x2F;images"></a>themes&#x2F;next&#x2F;source&#x2F;images</h3><p>该目录下创建global目录，放入</p>
<ul>
<li><a href="/images/global/background.jpg">background.jpg</a></li>
<li><a href="/images/global/favicon-16x16-next.png">favicon-16x16-next.png</a></li>
<li><a href="/images/global/favicon-32x32-next.png">favicon-32x32-next.png</a></li>
</ul>
<h3 id="themes-x2F-next-x2F-source-x2F-lib"><a href="#themes-x2F-next-x2F-source-x2F-lib" class="headerlink" title="themes&#x2F;next&#x2F;source&#x2F;lib"></a>themes&#x2F;next&#x2F;source&#x2F;lib</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-fancybox3 <span class="built_in">source</span>/lib/fancybox</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace <span class="built_in">source</span>/lib/pace</span><br></pre></td></tr></table></figure>

<h3 id="themes-x2F-next-x2F-config-yml"><a href="#themes-x2F-next-x2F-config-yml" class="headerlink" title="themes&#x2F;next&#x2F;_config.yml"></a>themes&#x2F;next&#x2F;_config.yml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置图标 --&gt;</span></span><br><span class="line">favicon:</span><br><span class="line">  small: /images/global/favicon-16x16-next.png</span><br><span class="line">  medium: /images/global/favicon-32x32-next.png</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置页脚 --&gt;</span></span><br><span class="line">footer:</span><br><span class="line">  since: 2017</span><br><span class="line">  <span class="comment">&lt;!-- 设置页脚动效 --&gt;</span></span><br><span class="line">  icon:</span><br><span class="line">    name: heart</span><br><span class="line">    animated: true</span><br><span class="line">    color: &quot;#a88771&quot;</span><br><span class="line">  <span class="comment">&lt;!-- 隐藏自带版本信息 --&gt;</span></span><br><span class="line">  powered:</span><br><span class="line">    enable: false</span><br><span class="line">    version: false</span><br><span class="line">  theme:</span><br><span class="line">    enable: false</span><br><span class="line">    version: false</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置顶部菜单栏 --&gt;</span></span><br><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  schedule: /schedule/ || calendar</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 右侧展开显示的联系方式 --&gt;</span></span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/zhaoluting || github</span><br><span class="line">  E-Mail: mailto:839327424@qq.com || envelope</span><br><span class="line">  More: https://zhaoluting.github.io/about/ || vcard</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 右侧展开显示的更多信息 --&gt;</span></span><br><span class="line">links_icon: code</span><br><span class="line">links_title: 技术栈</span><br><span class="line">links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  React: https://react.docschina.org/</span><br><span class="line">  TypeScript: https://www.typescriptlang.org/</span><br><span class="line">  Vue: https://cn.vuejs.org/</span><br><span class="line">  mpvue: http://mpvue.com/</span><br><span class="line">  Node: https://nodejs.org/en/</span><br><span class="line">  Pupprteer: https://pptr.dev/</span><br><span class="line">  Webpack: https://webpack.js.org/</span><br><span class="line">  MySQL: https://www.mysql.com/</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置右侧展开头像 --&gt;</span></span><br><span class="line">avatar:</span><br><span class="line">  url: /images/global/favicon-32x32-next.png</span><br><span class="line">  rounded: true</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 页面右下角滚动显示百分比 --&gt;</span></span><br><span class="line">sidebar:</span><br><span class="line">  scrollpercent: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 文章信息显示设置 --&gt;</span></span><br><span class="line">post_meta:</span><br><span class="line">  updated_at:</span><br><span class="line">    <span class="comment">&lt;!-- 不显示修改日期 --&gt;</span></span><br><span class="line">    enabled: false</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 文章字数统计显示 https://github.com/theme-next/hexo-symbols-count-time --&gt;</span></span><br><span class="line">symbols_count_time:</span><br><span class="line">  <span class="comment">&lt;!-- 是否单独成一行  --&gt;</span></span><br><span class="line">  separated_meta: false</span><br><span class="line">  <span class="comment">&lt;!-- 文章中的显示是否显示文字（本文字数|阅读时长）  --&gt;</span></span><br><span class="line">  item_text_post: false</span><br><span class="line">  <span class="comment">&lt;!-- 网页底部的显示是否显示文字（站点总字数|站点阅读时长）  --&gt;</span></span><br><span class="line">  item_text_total: false</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 代码块具备复制功能 --&gt;</span></span><br><span class="line">codeblock:</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    show_result: true</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 安卓浏览器样式优化 --&gt;</span></span><br><span class="line">android_chrome_color: &quot;#a88773&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 打开本地搜索功能 --&gt;</span></span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 主题自带样式 note 标签配置，详见https://github.com/iissnan/hexo-theme-next/pull/1697 --&gt;</span></span><br><span class="line">note:</span><br><span class="line">  style: simple</span><br><span class="line">  icons: true</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 选项卡样式配置，详见https://almostover.ru/2016-01/hexo-theme-next-test/#Tab-tag-test --&gt;</span></span><br><span class="line">tabs:</span><br><span class="line">  transition:</span><br><span class="line">    tabs: true</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启图片预览功能 --&gt;</span></span><br><span class="line">fancybox: true</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 显示顶部阅读进度条 --&gt;</span></span><br><span class="line">pace: true</span><br><span class="line">pace_theme: pace-theme-flash</span><br><span class="line">pace: true</span><br></pre></td></tr></table></figure>
<h3 id="themes-x2F-next-x2F-source-x2F-css-x2F-custom-x2F-custom-styl"><a href="#themes-x2F-next-x2F-source-x2F-css-x2F-custom-x2F-custom-styl" class="headerlink" title="themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_custom&#x2F;custom.styl"></a>themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_custom&#x2F;custom.styl</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line">//首页文章阴影样式</span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">14px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">    -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">14px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line">//热评文章</span><br><span class="line"><span class="selector-class">.ds-top-threads</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: border-width <span class="number">0.2s</span> linear <span class="number">0s</span>, color <span class="number">0.2s</span> linear <span class="number">0s</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ds-top-threads</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">8px</span> solid <span class="number">#4d768c</span>;</span><br><span class="line">&#125;</span><br><span class="line">//首页头部样式</span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;../../images/global/background.jpg&quot;</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#A48777</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> auto;</span><br><span class="line">    <span class="attribute">background-position</span>: center;</span><br><span class="line">    <span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">767px</span>) &#123;</span><br><span class="line">        <span class="attribute">background-size</span>: auto <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.headband</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#926f5a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.brand</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#d08e65cc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: none;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ffffff59</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.logo-line-before</span>,</span><br><span class="line"><span class="selector-class">.logo-line-after</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-class">.menu-item</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">15</span>, <span class="number">46</span>, <span class="number">65</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.site-meta</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">float</span>: none;</span><br><span class="line">    <span class="selector-class">.site-title</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">35px</span>;</span><br><span class="line">        <span class="attribute">font-family</span>: <span class="string">&#x27;Comic Sans MS&#x27;</span>, sans-serif;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">padding-top</span>: <span class="number">5px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//首页尾部样式</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer-inner</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Comic Sans MS&#x27;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#a88772</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#a88773</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">2px</span> <span class="number">6px</span> <span class="number">#724d38</span>;</span><br><span class="line">    <span class="selector-class">.sidebar-inner</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#e6c5b2</span>;</span><br><span class="line">        // 侧栏头像</span><br><span class="line">        <span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">transition</span>: transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">            <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        //侧边栏信息样式修改</span><br><span class="line">        <span class="selector-class">.site-author-name</span> &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">font-family</span>: <span class="string">&#x27;Comic Sans MS&#x27;</span>, sans-serif;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.site-description</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#e6c5b2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">border-bottom-color</span>: <span class="number">#e6c5b2</span>;</span><br><span class="line">            <span class="attribute">border-bottom</span>: none;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.sidebar-nav</span> &#123;</span><br><span class="line">            <span class="selector-class">.sidebar-nav-active</span> &#123;</span><br><span class="line">                <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">                <span class="attribute">border-bottom-color</span>: <span class="number">#fff</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-tag">li</span> &#123;</span><br><span class="line">                <span class="attribute">color</span>: <span class="number">#e1c6b5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">                <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.sidebar-nav-active</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">                <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.site-state</span> &#123;</span><br><span class="line">            <span class="selector-class">.site-state-item</span> &#123;</span><br><span class="line">                <span class="attribute">display</span>: inline-block;</span><br><span class="line">                <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">28px</span>;</span><br><span class="line">                <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#e6c5b2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.links-of-blogroll</span> &#123;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">            <span class="attribute">margin-bottom</span>: <span class="number">42px</span>;</span><br><span class="line">            <span class="selector-class">.links-of-blogroll-title</span> &#123;</span><br><span class="line">                <span class="attribute">font-family</span>: <span class="string">&#x27;Comic Sans MS&#x27;</span>, sans-serif;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">                <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.links-of-blogroll-list</span> &#123;</span><br><span class="line">                <span class="attribute">border-top</span>: <span class="number">1px</span> dotted;</span><br><span class="line">                <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">                <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">                <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.links-of-author</span> &#123;</span><br><span class="line">            <span class="attribute">margin-bottom</span>: <span class="number">70px</span>;</span><br><span class="line">            <span class="selector-class">.links-of-author-item</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">                <span class="attribute">margin-right</span>: <span class="number">3px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //文章目录样式</span><br><span class="line">        <span class="selector-class">.post-toc</span> &#123;</span><br><span class="line">            <span class="selector-class">.nav</span> <span class="selector-class">.active</span>&gt;<span class="selector-tag">a</span> &#123;</span><br><span class="line">                <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-tag">ol</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">                <span class="attribute">color</span>: <span class="number">#e0c6b5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-tag">ol</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">                <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//侧栏按钮样式</span><br><span class="line"><span class="selector-class">.sidebar-toggle</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#a88772</span>;</span><br><span class="line">    <span class="selector-class">.sidebar-toggle-line</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.site-nav-toggle</span> &#123;</span><br><span class="line">    <span class="selector-class">.btn-bar</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#a88772</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.back-to-top</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#a88772</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//首页文章块样式</span><br><span class="line"><span class="selector-class">.post-type-normal</span> &#123;</span><br><span class="line">    //首页阅读全文样式</span><br><span class="line">    <span class="selector-class">.post-button</span> &#123;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">        <span class="selector-class">.btn</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#ae866f</span>;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">16px</span>;</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">2</span>;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="number">4px</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#926f5a</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span>&#123;</span><br><span class="line">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#926f5a</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#fff1ea</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.post-footer</span> &#123;</span><br><span class="line">        <span class="selector-class">.post-eof</span> &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">20px</span> auto <span class="number">10px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 代码块复制按钮样式</span><br><span class="line"><span class="selector-class">.highlight-wrap</span> <span class="selector-class">.copy-btn</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#8D908C</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.posts-expand</span> &#123;</span><br><span class="line">    <span class="selector-class">.post-body</span> &#123;</span><br><span class="line">        <span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">transform</span>: initial;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span> &#123;</span><br><span class="line">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> dashed <span class="number">#999</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel5.6 - 前端速览</title>
    <url>/tool-laravel/</url>
    <content><![CDATA[<p>查看项目的laravel版本号：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose <span class="built_in">exec</span> XXX bash <span class="comment"># 进入容器中</span></span><br><span class="line">php artisan --version        <span class="comment"># 查看版本号</span></span><br></pre></td></tr></table></figure>
<p>参考资料：<a href="https://learnku.com/docs/laravel/5.6">Laravel 5.6 中文文档</a></p>
<span id="more"></span>

<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="文件目录说明"><a href="#文件目录说明" class="headerlink" title="文件目录说明"></a>文件目录说明</h3><ul>
<li><strong>app</strong>：应用程序的核心代码<ul>
<li><strong>Broadcasting</strong>：应用程序的所有广播频道类，可以通过<code>make:channel</code>命令生成目录</li>
<li><strong>Console</strong>：所有自定义的Artisan命令，可以通过<code>make:command</code>命令生成目录</li>
<li><strong>Events</strong>：所有自定义的事件类，用来提醒应用其他部分发生了特定的操作，可以通过 <code>make:event</code>命令生成目录</li>
<li><strong>Exceptions</strong>：应用的异常处理器，如果想自定义记录或者渲染异常的方式，可以修改此目录下的Handler类</li>
<li><strong>Http</strong>：进入应用的请求处理逻辑，包括控制器、中间件和表单请求</li>
<li><strong>Jobs</strong>：应用中的队列任务，应用任务可以被推送到队列或者在当前请求的生命周期内同步运行，可以通过<code>make:job</code>命令生成目录</li>
<li><strong>Listeners</strong>：事件监听器，用于接收事件实例并执行响应该事件被触发的逻辑，可以通过<code>make:listener</code>命令生成目录</li>
<li><strong>Mail</strong>：应用所有的邮件发送类，邮件对象允许将构建邮件的逻辑封装在可以使用<code>Mail::send</code>方法的地方，可以通过<code>make:mail</code>命令生成目录</li>
<li><strong>Notifications</strong>：应用发送的所有「事务性」通知，可以通过各种驱动（例如邮件、Slack、短信）发送通知或是存储在数据库中。</li>
<li><strong>Policies</strong>：应用的授权策略类，用来决定一个用户是否有权限去操作指定资源，可以通过<code>make:policy</code>命令生成目录</li>
<li><strong>Providers</strong>：应用的所有服务提供器，通过在服务容器中绑定服务、注册事件以及执行其他任务来为即将到来的请求做准备来启动应用</li>
<li><strong>Rules</strong>：应用自定义验证规则对象，意在将复杂的验证逻辑封装在一个简单的对象中，可以通过<code>make:rule</code>命令生成目录</li>
</ul>
</li>
<li><strong>Bootstrap</strong>：引导框架并配置自动加载的文件，包括框架生成的用来提升性能文件的cache目录</li>
<li><strong>config</strong>：应用程序所有的配置文件</li>
<li><strong>database</strong>：数据填充和迁移文件</li>
<li><strong>public</strong>：入口文件index.php及一些资源文件（如图片、JavaScript 和 CSS）</li>
<li><strong>resource</strong>：视图和未编译的资源文件（如 LESS、SASS 或 JavaScript）<ul>
<li><strong>assets&#x2F;js&#x2F;app.js</strong>：引导和配置 Vue，Axios，jQuery 以及其他的 JavaScript 依赖</li>
<li><strong>assets&#x2F;sass&#x2F;app.scss</strong>：引入包含SASS变量的文件，并加载 Bootstrap</li>
<li><strong>lang</strong>：为支持国际化所需要的不同语言的文件夹</li>
</ul>
</li>
<li><strong>router</strong>：应用的所有路由定义<ul>
<li><strong>web.php</strong>：包含RouteServiceProvider放置在web中间件组中的路由，提供会话状态、CSRF防护和cookie加密</li>
<li><strong>api.php</strong>：包含RouteServiceProvider放置在api中间件组中的路由，它提供了频率限制</li>
<li><strong>console.php</strong>：定义所有基于闭包的控制台命令的文件</li>
<li><strong>channels.php</strong>：注册应用支持的所有事件广播渠道的文件</li>
</ul>
</li>
<li><strong>storage</strong>：编译的Blade模板、基于文件的会话和文件缓存以及框架生成的其他文件<ul>
<li><strong>app</strong>：应用生成的任何文件<ul>
<li><strong>public</strong>：存储用户生成的文件，比如需要公开访问的用户头像</li>
</ul>
</li>
<li><strong>framework</strong>：框架生成的文件和缓存</li>
<li><strong>logs</strong>：应用日志文件</li>
</ul>
</li>
<li><strong>tests</strong>：Laravel内置的<a href="https://phpunit.de/">PHPUnit</a>自动化测试文件</li>
<li><strong>vendor</strong>：Composer依赖包</li>
<li><strong>.env</strong>：本地的环境配置文件，不同服务器配置不同，不能提交到git，若没有可从根目录复制<code>.env.example</code>并修改</li>
<li><strong>package.json</strong>：指定 JavaScript 依赖</li>
<li><strong>composer.json</strong>：指定 PHP 依赖</li>
<li><strong>webpack.mix.js</strong>：文件是所有资源编译的入口点，Mix任务可以一起被链式调用，以精确定义资源的编译方式</li>
</ul>
<h3 id="Laravel请求周期"><a href="#Laravel请求周期" class="headerlink" title="Laravel请求周期"></a>Laravel请求周期</h3><ul>
<li><strong>开始</strong><ul>
<li><code>public/index.php</code>文件是所有对Laravel应用程序的请求的入口点,所有的请求都是经由Web服务器（Apache&#x2F;Nginx）通过配置引导到这个文件。</li>
<li><code>index.php</code>文件不包含太多的代码，却是加载框架的起点，该文件加载Composer生成定义的自动加载器，然后从<code>bootstrap/app.php</code>脚本中检索Laravel应用程序的实例。</li>
</ul>
</li>
<li><strong>HTTP &#x2F; 控制内核</strong><ul>
<li>根据进入应用程序的请求类型来将传入的请求发送到HTTP内核或控制台内核，这两个内核是用来作为所有请求都要通过的中心位置。</li>
<li>位于app&#x2F;Http&#x2F;Kernel.php中的HTTP内核定义了在执行请求之前运行的bootstrappers数组，这个数组负责在实际处理请求之前完成配置错误处理、配置日志记录、检测应用环境以及执行其他需要完成的任务</li>
<li>HTTP内核还定义了所有请求被应用程序处理之前必须经过的HTTP中间件的列表，这些中间件处理HTTP会话的读写、确定应用程序是否处于维护模式、验证CSRF令牌等</li>
</ul>
</li>
<li><strong>服务提供器</strong><ul>
<li>最重要的内核引导操作之一是加载应用程序的服务提供器</li>
<li>所有服务提供器都在config&#x2F;app.php配置文件的providers数组中配置</li>
<li>服务提供器负责引导所有框架的各种组件，如数据库、队列、验证和路由组件，框架提供的每个功能都由服务提供器来引导并配置</li>
</ul>
</li>
<li><strong>分配请求</strong><ul>
<li>一旦引导了应用程序且注册所有服务提供器，Request请求就会被转交给路由器来进行调度，路由器将请求发送到路由或控制器或任何运行于路由的特定中间件</li>
</ul>
</li>
<li><strong>聚焦服务提供器</strong><ul>
<li>创建应用程序实例、注册服务提供器，并将请求交给被引导的应用程序</li>
</ul>
</li>
</ul>
<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul>
<li><strong>Laravel预置</strong>：<a href="https://getbootstrap.com/">Bootstrap</a> + <a href="https://cn.vuejs.org/">Vue</a> + <a href="https://www.npmjs.com/">NPM</a></li>
<li><strong>移除前端脚手架</strong>：<code>php artisan preset none</code></li>
<li><strong>编译</strong>：<ul>
<li><code>npm run watch</code>和<code>npm run dev</code>会处理<code>webpack.mix.js</code>中的指令，编译<code>resources/assets/sass/app.scss</code>和<code>resources/assets/js/app.js</code>文件，编译后的文件放在public目录下</li>
<li><code>npm run watch</code>会监控资源文件并实时更改，<code>npm run dev</code>不会主动更新</li>
<li>在某些环境中，文件更改时Webpack不会更新，请考虑使用<code>npm run watch-poll</code>命令</li>
</ul>
</li>
<li><strong>使用react</strong>：<code>php artisan preset react</code>命令将移除 Vue 脚手架并替换为 React 脚手架，组件实例也会相应替换</li>
</ul>
<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>视图包含应用程序的 HTML，并且将控制器 &#x2F; 应用程序逻辑与演示逻辑分开。视图文件存放于 resources&#x2F;views 目录下。一个简单的视图如下所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此视图文件位置：resources/views/greeting.blade.php --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123; $name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在 routes&#x2F;web.php 文件中定义 web 界面的视图路由，view 函数的第一个参数对应着 resources&#x2F;views 目录中视图文件的名称，第二个参数可以使用数组将数据传递到视图：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&#x27;greeting&#x27;</span>, [<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;James&#x27;</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>视图文件也可以嵌套在 resources&#x2F;views 目录的子目录中。「点」符号可以用来引用嵌套视图。例如，如果你的视图存储在 resources&#x2F;views&#x2F;admin&#x2F;profile.blade.php，则可以这样引用它：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&#x27;admin.profile&#x27;</span>, <span class="variable">$data</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Laravel-Mix编辑资源"><a href="#Laravel-Mix编辑资源" class="headerlink" title="Laravel Mix编辑资源"></a>Laravel Mix编辑资源</h3><p>Laravel Mix用于使用几个常见的CSS和JavaScript预处理器为应用定义 Webpack构建步骤，可以通过简单链式调用来定义资源的编译。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">let mix = <span class="keyword">require</span>(<span class="string">&#x27;laravel-mix&#x27;</span>);</span><br><span class="line"></span><br><span class="line">mix.<span class="title function_ invoke__">js</span>(<span class="string">&#x27;resources/assets/js/app.js&#x27;</span>, <span class="string">&#x27;public/js&#x27;</span>)</span><br><span class="line">    .<span class="title function_ invoke__">less</span>(<span class="string">&#x27;resources/assets/less/app.less&#x27;</span>, <span class="string">&#x27;public/css&#x27;</span>)</span><br><span class="line">    .<span class="title function_ invoke__">extract</span>([<span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;vue-router&#x27;</span>, <span class="string">&#x27;vuex&#x27;</span>, <span class="string">&#x27;axios&#x27;</span>]) <span class="comment">// 提取依赖库，数组中的依赖或模块将会被提取到vendor.js文件中</span></span><br><span class="line">    .<span class="title function_ invoke__">version</span>(); <span class="comment">// 自动为所有编译文件名附加唯一哈希值，实现缓存清除功能</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// BrowserSync会自动监控文件修改并将修改注入浏览器而无需手动刷新，可通过调用mix.browserSync()方法启用</span></span><br><span class="line">mix.<span class="title function_ invoke__">browserSync</span>(&#123;</span><br><span class="line">    <span class="comment">// proxy: &#x27;http://192.168.31.233:8109&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!mix.<span class="title function_ invoke__">inProduction</span>()) &#123;</span><br><span class="line">    mix.<span class="title function_ invoke__">sourceMaps</span>();  <span class="comment">// 本地调试时开启资源映射</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加载js文件时使用<code>mix</code>函数能自动确定被哈希的文件名称，且务必按照以下文件顺序加载，以防JavaScript报错</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;&#123;&#123; mix(&#x27;/js/manifest.js&#x27;) &#125;&#125;&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;&#123;&#123; mix(&#x27;/js/vendor.js&#x27;) &#125;&#125;&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;&#123;&#123; mix(&#x27;/js/app.js&#x27;)  &#125;&#125;&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>如果需要修改插件配置项，可以将一个对象作为第三个参数传入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.<span class="title function_ invoke__">less</span>(<span class="string">&#x27;resources/assets/less/app.less&#x27;</span>, <span class="string">&#x27;public/css&#x27;</span>, &#123;</span><br><span class="line">    strictMath: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果想合并压缩任意数量的JavaScript或css文件，可以使用scripts或styles方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.<span class="title function_ invoke__">styles</span>([</span><br><span class="line">    <span class="string">&#x27;public/css/vendor/normalize.css&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;public/css/vendor/videojs.css&#x27;</span></span><br><span class="line">    ], <span class="string">&#x27;public/css/all.css&#x27;</span>)</span><br><span class="line">    .<span class="title function_ invoke__">scripts</span>([</span><br><span class="line">        <span class="string">&#x27;public/js/admin.js&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;public/js/dashboard.js&#x27;</span></span><br><span class="line">    ], <span class="string">&#x27;public/js/all.js&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>使用<code>copy</code>和<code>copyDirectory</code>方法将文件和目录复制到新位置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.<span class="title function_ invoke__">copy</span>(<span class="string">&#x27;node_modules/foo/bar.css&#x27;</span>, <span class="string">&#x27;public/css/bar.css&#x27;</span>);</span><br><span class="line">mix.<span class="title function_ invoke__">copyDirectory</span>(<span class="string">&#x27;assets/img&#x27;</span>, <span class="string">&#x27;public/img&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>默认情况下，Mix会自动显示是否编译成功的操作系统通知，但某些场景下（如生产环境）可能希望禁止通知，可通过<code>disableNotifications</code>方法停用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.<span class="title function_ invoke__">disableNotifications</span>();</span><br></pre></td></tr></table></figure>

<p>如果使用的是react，Mix会自动安装React必要的Babel插件，只需替换<code>mix.js()</code>为<code>mix.react()</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.<span class="title function_ invoke__">react</span>(<span class="string">&#x27;resources/assets/js/app.jsx&#x27;</span>, <span class="string">&#x27;public/js&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>Mix提供了一个webpackConfig方法来合并任何Webpack配置以覆盖默认配置。</p>
<blockquote>
<p>如果想完全自定义Webpack配置，可将node_modules&#x2F;laravel-mix&#x2F;setup&#x2F;webpack.config.js文件复制到项目根目录，在package.json文件中将所有<code>--config</code>的值指向新配置文件。如果后续Mix版本有更新时，还需要手动合并webpack.config.js到自定义文件中。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mix.<span class="title function_ invoke__">webpackConfig</span>(&#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        modules: [</span><br><span class="line">            path.<span class="title function_ invoke__">resolve</span>(__dirname, <span class="string">&#x27;vendor/laravel/spark/resources/assets/js&#x27;</span>)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="多语言国际化"><a href="#多语言国际化" class="headerlink" title="多语言国际化"></a>多语言国际化</h3><p>语言文件默认都放都在<code>resources/lang</code>文件夹中，相应的语言文件存在相应的文件夹下，所有的语言文件都返回一个键值对</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// resources/lang/en/messages.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">&#x27;welcome&#x27;</span> =&gt; <span class="string">&#x27;Welcome to our application&#x27;</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>Laravel 也提供支持使用字符串的『默认』翻译作为关键字来定义翻译字符串</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&lt;!--resources/lang/es.json--&gt;</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;I love programming.&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Me encanta programar.&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在<code>config/app.php</code>配置文件中可以根据需要修改当前语言设置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;locale&#x27;</span> =&gt; <span class="string">&#x27;en&#x27;</span>, <span class="comment">// 当前语言</span></span><br><span class="line"><span class="string">&#x27;fallback_locale&#x27;</span> =&gt; <span class="string">&#x27;en&#x27;</span>, <span class="comment">// 备用语言，在当前语言不包含给定翻译字符串时被使用</span></span><br></pre></td></tr></table></figure>

<p>可以灵活使用<code>App Facade</code>的<code>setLocale</code>、<code>getLocale</code>及<code>isLocale</code>方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;welcome/&#123;locale&#125;&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$locale</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 动态修改当前语言</span></span><br><span class="line">    <span class="title class_">App</span>::<span class="title function_ invoke__">setLocale</span>(<span class="variable">$locale</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取当前语言</span></span><br><span class="line"><span class="variable">$locale</span> = <span class="title class_">App</span>::<span class="title function_ invoke__">getLocale</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查语言环境是否为给定值</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">App</span>::<span class="title function_ invoke__">isLocale</span>(<span class="string">&#x27;en&#x27;</span>)) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以使用辅助函数<code>__</code>从语言文件中检索，<code>__</code>方法接受翻译字符串的文件名和键值作为其第一个参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">__</span>(<span class="string">&#x27;messages.welcome&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">__</span>(<span class="string">&#x27;I love programming.&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>可以在视图文件中打印翻译字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用&#123;&#123;  &#125;&#125;语法</span></span><br><span class="line">&#123;&#123; <span class="title function_ invoke__">__</span>(<span class="string">&#x27;messages.welcome&#x27;</span>) &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用@lang指令</span></span><br><span class="line">@<span class="title function_ invoke__">lang</span>(<span class="string">&#x27;messages.welcome&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>如果需要，也可以在翻译字符串中定义占位符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">__</span>(<span class="string">&#x27;messages.welcome&#x27;</span>, [<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;dayle&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;welcome&#x27;</span> =&gt; <span class="string">&#x27;Welcome, :name&#x27;</span>,</span><br><span class="line"><span class="comment">// 如果占位符中包含了首字母大写或者全体大写，翻译的内容也会做相应处理</span></span><br><span class="line"><span class="string">&#x27;welcome&#x27;</span> =&gt; <span class="string">&#x27;Welcome, :NAME&#x27;</span>, <span class="comment">// Welcome, DAYLE</span></span><br><span class="line"><span class="string">&#x27;goodbye&#x27;</span> =&gt; <span class="string">&#x27;Goodbye, :Name&#x27;</span>, <span class="comment">// Goodbye, Dayle</span></span><br></pre></td></tr></table></figure>

<p>不同语言对于复数有不同的规则。使用管道符<code>|</code>，可以区分字符串的单复数形式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本用法</span></span><br><span class="line"><span class="string">&#x27;apples&#x27;</span> =&gt; <span class="string">&#x27;There is one apple|There are many apples&#x27;</span>,</span><br><span class="line"><span class="comment">// 为多个数字范围指定翻译字符串</span></span><br><span class="line"><span class="string">&#x27;apples&#x27;</span> =&gt; <span class="string">&#x27;&#123;0&#125; There are none|[1,19] There are some|[20,*] There are many&#x27;</span>,</span><br><span class="line"><span class="comment">// 也可以在复数字符串中插入占位符，trans_choice方法第三个参数所传递数组将会替换占位符</span></span><br><span class="line"><span class="string">&#x27;minutes_ago&#x27;</span> =&gt; <span class="string">&#x27;&#123;1&#125; :value minute ago|[2,*] :value minutes ago&#x27;</span>,</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">trans_choice</span>(<span class="string">&#x27;messages.apples&#x27;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">trans_choice</span>(<span class="string">&#x27;time.minutes_ago&#x27;</span>, <span class="number">5</span>, [<span class="string">&#x27;value&#x27;</span> =&gt; <span class="number">5</span>]);</span><br></pre></td></tr></table></figure>

<p><strong>重写扩展包的语言文件</strong>：部分扩展包可能会附带自己的语言文件,可以通过在<code>resources/lang/vendor/&#123;package&#125;/&#123;locale&#125;</code>放置文件来重写它们，而不是直接修改扩展包的核心文件。</p>
<h2 id="Blade模板引擎"><a href="#Blade模板引擎" class="headerlink" title="Blade模板引擎"></a>Blade模板引擎</h2><p>Blade是Laravel提供的一个模板引擎，并且不限制使用原生PHP代码，所有Blade视图文件都将被编译成原生PHP代码并缓存起来。Blade视图文件使用<code>.blade.php</code>作为文件扩展名，被存放在<code>resources/views</code>目录中。</p>
<h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a><strong>模板继承</strong></h3><ul>
<li><code>@section</code>指令定义了视图的一部分内容，可以使用<code>@endsection</code>或<code>@show</code>收尾<ul>
<li><code>@endsection</code>指令只定义一个区块</li>
<li><code>@show</code>指令定义并立即生成该区块</li>
<li><code>@parent</code>指令会被替换为「主」布局@section间的内容</li>
</ul>
</li>
<li><code>@yield</code>指令用来显示指定部分的内容</li>
<li><code>@extends</code>指令为子视图指定应该「继承」的布局</li>
</ul>
<p><em><strong>实例：</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父布局文件保存于 resources/views/layouts/app.blade.php --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>应用程序名称 - @yield(&#x27;title&#x27;)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        @section(&#x27;sidebar&#x27;)</span><br><span class="line">            这是主布局的侧边栏。</span><br><span class="line">        @show</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">            @yield(&#x27;content&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子文件保存于 resources/views/layouts/child.blade.php --&gt;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">extends</span>(<span class="string">&#x27;layouts.app&#x27;</span>)</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">section</span>(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;Page Title&#x27;</span>)</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">section</span>(<span class="string">&#x27;sidebar&#x27;</span>)</span><br><span class="line">    @<span class="built_in">parent</span></span><br><span class="line"></span><br><span class="line">    &lt;p&gt;这将追加到主布局的侧边栏。&lt;/p&gt;</span><br><span class="line">@endsection</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">section</span>(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">    &lt;p&gt;这是主体内容。&lt;/p&gt;</span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure>

<h3 id="Components-amp-Slots"><a href="#Components-amp-Slots" class="headerlink" title="Components &amp; Slots"></a><strong>Components &amp; Slots</strong></h3><ul>
<li><code>&#123;&#123; $slot &#125;&#125;</code>变量将包含注入到组件的内容</li>
<li><code>@component</code>构建内容组件，使用<code>@endcomponent</code>收尾</li>
<li>需要向组件传递数据时，可以给<code>@component</code>指令的第二个参数传入一个数组，数组里的数据将在组件模板以变量的形式生效</li>
</ul>
<p><em><strong>实例：</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件文件存放于 /resources/views/alert.blade.php --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert alert-danger&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert-title&quot;</span>&gt;</span>&#123;&#123; $title &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123; $slot &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引用组件的文件 --&gt;</span><br><span class="line">@<span class="title function_ invoke__">component</span>(<span class="string">&#x27;alert&#x27;</span>)</span><br><span class="line">    @<span class="title function_ invoke__">slot</span>(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">        Forbidden</span><br><span class="line">    @endslot</span><br><span class="line">    你没有权限访问这个资源！</span><br><span class="line">@endcomponent</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">component</span>(<span class="string">&#x27;alert&#x27;</span>, [<span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;Forbidden&#x27;</span>])</span><br><span class="line">@endcomponent</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可自定义创建@alert别名的组件，详见本文“自定义组件别名”部分</p>
</blockquote>
<h3 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a><strong>显示数据</strong></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由定义</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;greeting&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&#x27;welcome&#x27;</span>, [<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Samantha&#x27;</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 默认情况下，Blade的&#123;&#123;&#125;&#125;会自动调用PHP的htmlspecialchars函数防止 XSS 攻击 --&gt;</span></span><br><span class="line">Hello, &#123;&#123; $name &#125;&#125;.</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不想调用PHP的htmlspecialchars函数转义的话，可以使用以下语法 --&gt;</span></span><br><span class="line">Hello, &#123;!! $name !!&#125;.</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 渲染json，可以使用@json指令替代PHP的手动json_encode --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app = @<span class="title function_">json</span>($array);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用@符告诉Blade渲染引擎保持这个表达式不变。渲染后，引擎会把@符移除，但&#123;&#123; name &#125;&#125;表达式保留 --&gt;</span></span><br><span class="line">Hello, @&#123;&#123; name &#125;&#125;.</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果模板中一大部分需要显示JS变量，可用@verbatim指令包住 HTML，就不用在每个Blade echo语句前加@符 --&gt;</span></span><br><span class="line">@verbatim</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        Hello, &#123;&#123; name &#125;&#125;.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">@endverbatim</span><br></pre></td></tr></table></figure>



<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a><strong>流程控制</strong></h3><p><strong>条件指令</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$records</span>) === <span class="number">1</span>)</span><br><span class="line">    我有一条记录！</span><br><span class="line">@<span class="keyword">elseif</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$records</span>) &gt; <span class="number">1</span>)</span><br><span class="line">    我有好几条记录！</span><br><span class="line">@<span class="keyword">else</span></span><br><span class="line">   我没有记录！</span><br><span class="line">@<span class="keyword">endif</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="title function_ invoke__">unless</span> (<span class="title class_">Auth</span>::<span class="title function_ invoke__">check</span>())</span><br><span class="line">    未登陆 <span class="comment">// 当Auth::check()为false </span></span><br><span class="line">@endunless</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">isset</span>(<span class="variable">$records</span>)</span><br><span class="line">    <span class="comment">// $records 已定义且不为 null</span></span><br><span class="line">@endisset</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">empty</span>(<span class="variable">$records</span>)</span><br><span class="line">    <span class="comment">// $records 为空</span></span><br><span class="line">@endempty</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用`@auth`和`@guest`快速认证当前用户</span></span><br><span class="line">@auth</span><br><span class="line">   <span class="comment">// 通过认证</span></span><br><span class="line">@endauth</span><br><span class="line"></span><br><span class="line">@guest</span><br><span class="line">    <span class="comment">// 未通过认证</span></span><br><span class="line">@endguest</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以在指令中指定认证看守器（Guard）</span></span><br><span class="line">@<span class="title function_ invoke__">auth</span>(<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">    <span class="comment">// 通过认证</span></span><br><span class="line">@endauth</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">guest</span>(<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">    <span class="comment">// 未通过认证</span></span><br><span class="line">@endguest</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指令检查 section 是否有内容</span></span><br><span class="line">@<span class="title function_ invoke__">hasSection</span>(<span class="string">&#x27;navigation&#x27;</span>)</span><br><span class="line">    @<span class="keyword">yield</span>(<span class="string">&#x27;navigation&#x27;</span>)</span><br><span class="line">@<span class="keyword">endif</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">switch</span>(<span class="variable">$i</span>)</span><br><span class="line">    @<span class="keyword">case</span>(<span class="number">1</span>)</span><br><span class="line">        First <span class="keyword">case</span>...</span><br><span class="line">        @<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    @<span class="keyword">case</span>(<span class="number">2</span>)</span><br><span class="line">        Second <span class="keyword">case</span>...</span><br><span class="line">        @<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    @<span class="keyword">default</span></span><br><span class="line">        Default <span class="keyword">case</span>...</span><br><span class="line">@<span class="keyword">endswitch</span></span><br></pre></td></tr></table></figure>

<p><strong>循环指令</strong></p>
<p>支持for、foreach、forelse、while，与PHP中对应的函数相同。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++)</span><br><span class="line">    目前的值为 &#123;&#123; <span class="variable">$i</span> &#125;&#125;</span><br><span class="line">@<span class="keyword">endfor</span></span><br><span class="line"></span><br><span class="line">@<span class="keyword">foreach</span> (<span class="variable">$users</span> <span class="keyword">as</span> <span class="variable">$user</span>)</span><br><span class="line">    &lt;p&gt;此用户为 &#123;&#123; <span class="variable">$user</span>-&gt;id &#125;&#125;&lt;/p&gt;</span><br><span class="line">@<span class="keyword">endforeach</span></span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">forelse</span> (<span class="variable">$users</span> <span class="keyword">as</span> <span class="variable">$user</span>)</span><br><span class="line">    &lt;li&gt;&#123;&#123; <span class="variable">$user</span>-&gt;name &#125;&#125;&lt;/li&gt;</span><br><span class="line">@<span class="keyword">empty</span></span><br><span class="line">    &lt;p&gt;没有用户&lt;/p&gt;</span><br><span class="line">@endforelse</span><br><span class="line"></span><br><span class="line">@<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &lt;p&gt;死循环了&lt;/p&gt;</span><br><span class="line">@<span class="keyword">endwhile</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以使用@break结束循环或@continue跳过当前迭代</span></span><br><span class="line">@<span class="keyword">foreach</span> (<span class="variable">$users</span> <span class="keyword">as</span> <span class="variable">$user</span>)</span><br><span class="line">    @<span class="keyword">if</span> (<span class="variable">$user</span>-&gt;type == <span class="number">1</span>)</span><br><span class="line">        @<span class="keyword">continue</span></span><br><span class="line">    @<span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    &lt;li&gt;&#123;&#123; <span class="variable">$user</span>-&gt;name &#125;&#125;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">if</span> (<span class="variable">$user</span>-&gt;number == <span class="number">5</span>)</span><br><span class="line">        @<span class="keyword">break</span></span><br><span class="line">    @<span class="keyword">endif</span></span><br><span class="line">@<span class="keyword">endforeach</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以使用一行代码包含指令声明的条件</span></span><br><span class="line">@<span class="keyword">foreach</span> (<span class="variable">$users</span> <span class="keyword">as</span> <span class="variable">$user</span>)</span><br><span class="line">    @<span class="keyword">continue</span>(<span class="variable">$user</span>-&gt;type == <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    &lt;li&gt;&#123;&#123; <span class="variable">$user</span>-&gt;name &#125;&#125;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">break</span>(<span class="variable">$user</span>-&gt;number == <span class="number">5</span>)</span><br><span class="line">@<span class="keyword">endforeach</span></span><br></pre></td></tr></table></figure>

<p>循环时，可以在循环内使用 $loop 变量获取一些有用的信息。</p>
<ul>
<li><code>$loop-&gt;index</code>: 当前循环迭代的索引（从 0 开始）。</li>
<li><code>$loop-&gt;iteration</code>: 当前循环迭代 （从 1 开始）。</li>
<li><code>$loop-&gt;remaining</code>: 循环中剩余迭代数量。</li>
<li><code>$loop-&gt;count</code>: 迭代中的数组项目总数。</li>
<li><code>$loop-&gt;first</code>: 当前迭代是否是循环中的首次迭代。</li>
<li><code>$loop-&gt;last</code>: 当前迭代是否是循环中的最后一次迭代。</li>
<li><code>$loop-&gt;depth</code>: 当前循环的嵌套级别。</li>
<li><code>$loop-&gt;parent</code>: 在嵌套循环中，父循环的变量。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">foreach</span> (<span class="variable">$users</span> <span class="keyword">as</span> <span class="variable">$user</span>)</span><br><span class="line">    @<span class="keyword">if</span> (<span class="variable">$loop</span>-&gt;first)</span><br><span class="line">        这是第一个迭代。</span><br><span class="line">    @<span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    @<span class="keyword">if</span> (<span class="variable">$loop</span>-&gt;last)</span><br><span class="line">        这是最后一个迭代。</span><br><span class="line">    @<span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    &lt;p&gt;This is user &#123;&#123; <span class="variable">$user</span>-&gt;id &#125;&#125;&lt;/p&gt;</span><br><span class="line">@<span class="keyword">endforeach</span></span><br></pre></td></tr></table></figure>


<h3 id="引入子视图"><a href="#引入子视图" class="headerlink" title="引入子视图"></a>引入子视图</h3><p>可以使用Blade的<code>@include</code>引入一个已存在的视图，所有在父视图的可用变量在被引入的视图中都是可用的。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    @<span class="keyword">include</span>(<span class="string">&#x27;shared.errors&#x27;</span>)</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;!-- 表单内容 --&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--也可以向引入的视图传递额外的数组数据--&gt;</span><br><span class="line">    @<span class="keyword">include</span>(<span class="string">&#x27;view.name&#x27;</span>, [<span class="string">&#x27;some&#x27;</span> =&gt; <span class="string">&#x27;data&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">    &lt;!--如果想引入一个可能存在或可能不存在的视图，可使用@includeIf指令--&gt;</span><br><span class="line">    @<span class="title function_ invoke__">includeIf</span>(<span class="string">&#x27;view.name&#x27;</span>, [<span class="string">&#x27;some&#x27;</span> =&gt; <span class="string">&#x27;data&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">    &lt;!--如果要根据给定的布尔条件 @<span class="keyword">include</span> 视图，可以使用 @includeWhen 指令--&gt;</span><br><span class="line">    @<span class="title function_ invoke__">includeWhen</span>(<span class="variable">$boolean</span>, <span class="string">&#x27;view.name&#x27;</span>, [<span class="string">&#x27;some&#x27;</span> =&gt; <span class="string">&#x27;data&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    &lt;!--要包含来自给定数组视图的第一个视图，可以使用 includeFirst 指令：--&gt;</span><br><span class="line">    @<span class="title function_ invoke__">includeFirst</span>([<span class="string">&#x27;custom.admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>], [<span class="string">&#x27;some&#x27;</span> =&gt; <span class="string">&#x27;data&#x27;</span>])</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="为集合渲染视图"><a href="#为集合渲染视图" class="headerlink" title="为集合渲染视图"></a>为集合渲染视图</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="title function_ invoke__">each</span>(<span class="string">&#x27;view.name&#x27;</span>, <span class="variable">$jobs</span>, <span class="string">&#x27;job&#x27;</span>, <span class="string">&#x27;view.empty&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>第一个参数</strong>：对数组或集合中的每个元素进行渲染的部分视图</li>
<li><strong>第二个参数</strong>：要迭代的数组或集合</li>
<li><strong>第三个参数</strong>：将被分配给视图中当前迭代的变量名称</li>
<li><strong>第四个参数</strong>：选填，当需要迭代的数组为空时，将会使用这个参数提供的视图来渲染</li>
</ul>
<blockquote>
<p>通过@each渲染的视图不会从父视图继承变量。如果子视图需要这些变量，则应该使用 @foreach 和 @include</p>
</blockquote>
<p><strong>堆栈</strong></p>
<p>Blade 可以被推送到在其他视图或布局中的其他位置渲染的命名堆栈。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="title function_ invoke__">push</span>(<span class="string">&#x27;scripts&#x27;</span>)</span><br><span class="line">    &lt;script src=<span class="string">&quot;/example.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">@endpush</span><br></pre></td></tr></table></figure>

<p>可以根据需要多次压入堆栈，通过@stack命令中传递堆栈的名称来渲染完整的堆栈内容。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;!-- Head Contents --&gt;</span><br><span class="line">    @<span class="title function_ invoke__">stack</span>(<span class="string">&#x27;scripts&#x27;</span>)</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>



<h3 id="服务注入"><a href="#服务注入" class="headerlink" title="服务注入"></a>服务注入</h3><ul>
<li><code>@inject</code>命令可用于从Laravel服务容器中检索服务</li>
<li>传递给<code>@inject</code>的第一个参数为置放该服务的变量名称，而第二个参数是要解析的服务的类或是接口的名称<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="title function_ invoke__">inject</span>(<span class="string">&#x27;metrics&#x27;</span>, <span class="string">&#x27;App\Services\MetricsService&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    Monthly Revenue: &#123;&#123; <span class="variable">$metrics</span>-&gt;<span class="title function_ invoke__">monthlyRevenue</span>() &#125;&#125;.</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="拓展Blade"><a href="#拓展Blade" class="headerlink" title="拓展Blade"></a>拓展Blade</h3><p><strong>自定义组件别名</strong></p>
<ul>
<li>在<code>app\Providers\AppServiceProvider.php</code>中的<code>boot</code>函数中追加注册别名<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Blade</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="title class_">Blade</span>::<span class="title function_ invoke__">component</span>(<span class="string">&#x27;components.alert&#x27;</span>, <span class="string">&#x27;alert&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在页面中使用指令渲染<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!-- 数组里的数据将在组件模板以变量的形式生效 --&gt;</span><br><span class="line">@<span class="title function_ invoke__">alert</span>([<span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;Forbidden&#x27;</span>])</span><br><span class="line">    你无权访问！</span><br><span class="line">@endalert</span><br><span class="line"></span><br><span class="line">&lt;!-- 可不传参数 --&gt;</span><br><span class="line">@alert</span><br><span class="line">    你无权访问！</span><br><span class="line">@endalert</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>自定义指令</strong></p>
<ul>
<li><p>在<code>app\Providers\AppServiceProvider.php</code>中的<code>boot</code>函数中追加注册指令</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Blade</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title class_">Blade</span>::<span class="title function_ invoke__">directive</span>(<span class="string">&#x27;datetime&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$expression</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;?php echo (<span class="subst">$expression</span>)-&gt;format(&#x27;m/d/Y H:i&#x27;); ?&gt;&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新Blade指令的逻辑后，需要使用Artisan命令<code>view:clear</code>删除所有已缓存的Blade视图。</p>
</li>
<li><p>在页面中使用指令<code>@datetime($var)</code></p>
</li>
</ul>
<p><strong>自定义If语句</strong></p>
<ol>
<li>在<code>app\Providers\AppServiceProvider.php</code>中的<code>boot</code>函数中追加注册指令<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Blade</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title class_">Blade</span>::<span class="keyword">if</span>(<span class="string">&#x27;env&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$environment</span></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">app</span>()-&gt;<span class="title function_ invoke__">environment</span>(<span class="variable">$environment</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在模板中使用<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="title function_ invoke__">env</span>(<span class="string">&#x27;local&#x27;</span>)</span><br><span class="line">    <span class="comment">// 该应用在本地环境中...</span></span><br><span class="line">@<span class="title function_ invoke__">elseenv</span>(<span class="string">&#x27;testing&#x27;</span>)</span><br><span class="line">    <span class="comment">// 该应用在测试环境中...</span></span><br><span class="line">@<span class="keyword">else</span></span><br><span class="line">    <span class="comment">// 该应用不在本地或测试环境中...</span></span><br><span class="line">@endenv</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>其他</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;&#123;-- 此注释将不会出现在渲染后的 HTML --&#125;&#125;</span><br><span class="line"></span><br><span class="line">@php</span><br><span class="line">    <span class="comment">// 在模板中执行一段纯 PHP 代码</span></span><br><span class="line">@endphp</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>js地图开发</title>
    <url>/tool-lbs-baidu/</url>
    <content><![CDATA[<p>LBS（Location Based Services，围绕地理位置数据而展开的服务）现在是越来越火，用到这技术的项目也是越来越多，就稍微做了下小调研，并简单记录下。由于技术发展过快，本篇仅供参考，可能明年就不适用了，以各大官网为准。</p>
<span id="more"></span>

<h2 id="热门LBS"><a href="#热门LBS" class="headerlink" title="热门LBS"></a>热门LBS</h2><p>互联网发展就是快，就这十年不到的功夫，搜狗地图被腾讯收购，高德地图被阿里收购，国内谷歌地图也被封，所以下面我只简单介绍几个目前比较稳定，不容易凉凉的热门地图API。简单总结下就是，重性能用高德、重功能用百度、面向海外用谷歌、政府特殊项目用天地图。</p>
<ul>
<li><a href="https://lbs.amap.com/">高德地图</a>：阿里系，对开发者很友好，性能也好，更注重导航能力，在国内商业地图里是算最精细的一款。有官方vue版本。</li>
<li><a href="https://lbsyun.baidu.com/">百度地图</a>：虽然在很多方面比不上高德，但POI（某个地理位置周边的信息）是强项，更注重生活，业务功能也更加丰富。无官方vue版本。</li>
<li><a href="https://lbs.qq.com/">腾讯地图</a>：🤔emmmm，对比高德百度没太大优势，但也还行，腾讯背书，比较稳。无官方vue版本。</li>
<li><a href="https://www.tianditu.gov.cn/">天地图</a>：国家队选手！国家测绘地理信息局的产品，主要为政府服务，国内数据资源的完整性、权威性、准确性是其他商业地图无法企及的，缺点就是性能差和颜值低。无官方vue版本。</li>
<li><a href="https://developers.google.com/maps/">谷歌地图</a>：虽然非常优秀，但国内的数据比较滞后，并且很容易受国际局势影响，适合国外人用。无官方vue版本。</li>
</ul>
<h2 id="vue引入百度地图"><a href="#vue引入百度地图" class="headerlink" title="vue引入百度地图"></a>vue引入百度地图</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// utils.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fileTool = &#123;</span><br><span class="line">  <span class="comment">// 异步加载百度地图</span></span><br><span class="line">  <span class="attr">loadBMap</span>: <span class="keyword">function</span> (<span class="params">ak</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;BMap is defined:&#x27;</span>, <span class="title class_">BMapGL</span> === <span class="literal">undefined</span> || <span class="title class_">BMapGL</span>)</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="title class_">BMapGL</span>)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">initBMapGL</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="title class_">BMapGL</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="title class_">BMapUrl</span> = <span class="string">`http://api.map.baidu.com/api?v=1.0&amp;type=webgl&amp;ak=<span class="subst">$&#123;ak&#125;</span>&amp;callback=initBMapGL`</span>;</span><br><span class="line">        fileTool.<span class="title function_">loadScript</span>(<span class="title class_">BMapUrl</span>, <span class="literal">null</span>, reject)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 异步加载百度地图及BMapGLLib</span></span><br><span class="line">  <span class="attr">loadBMapGLLib</span>: <span class="keyword">function</span> (<span class="params">ak</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">      fileTool.<span class="title function_">loadBMap</span>(ak).<span class="title function_">then</span>(<span class="function"><span class="params">BMapGL</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> loaded = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          loaded = (<span class="title class_">BMapGLLib</span> &amp;&amp; <span class="title class_">BMapGLLib</span>.<span class="property">DrawingManager</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          loaded = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!loaded) &#123;</span><br><span class="line">          <span class="keyword">const</span> <span class="title class_">GLLibFile</span> = &#123;</span><br><span class="line">            <span class="attr">js</span>: <span class="string">&#x27;https://mapopen.bj.bcebos.com/github/BMapGLLib/DrawingManager/src/DrawingManager.min.js&#x27;</span>,</span><br><span class="line">            <span class="attr">css</span>: <span class="string">&#x27;https://mapopen.bj.bcebos.com/github/BMapGLLib/DrawingManager/src/DrawingManager.min.css&#x27;</span>,</span><br><span class="line">          &#125;</span><br><span class="line">          fileTool.<span class="title function_">loadCSS</span>(<span class="title class_">GLLibFile</span>.<span class="property">css</span>);</span><br><span class="line">          fileTool.<span class="title function_">loadScript</span>(<span class="title class_">GLLibFile</span>.<span class="property">js</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">resolve</span>(&#123;<span class="title class_">BMapGL</span>, <span class="title class_">BMapGLLib</span>&#125;)</span><br><span class="line">          &#125;, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">resolve</span>(&#123;<span class="title class_">BMapGL</span>&#125;)</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 加载js文件</span></span><br><span class="line">  <span class="attr">loadScript</span>: <span class="keyword">function</span> (<span class="params">src, callback, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    script.<span class="property">type</span> = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line">    script.<span class="property">src</span> = src;</span><br><span class="line">    <span class="keyword">if</span> (script.<span class="property">addEventListener</span>) &#123;</span><br><span class="line">      script.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        callback &amp;&amp; <span class="title function_">callback</span>();</span><br><span class="line">      &#125;, <span class="literal">false</span>);</span><br><span class="line">      script.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        reject &amp;&amp; <span class="title function_">reject</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (script.<span class="property">attachEvent</span>) &#123;</span><br><span class="line">      script.<span class="title function_">attachEvent</span>(<span class="string">&#x27;onreadystatechange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> target = <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">srcElement</span>;</span><br><span class="line">        <span class="keyword">if</span> (target.<span class="property">readyState</span> == <span class="string">&#x27;loaded&#x27;</span>) &#123;</span><br><span class="line">          callback &amp;&amp; <span class="title function_">callback</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(script);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 动态加载外部CSS文件</span></span><br><span class="line">  <span class="attr">loadCSS</span>: <span class="keyword">function</span> (<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;link&#x27;</span>);</span><br><span class="line">    link.<span class="property">rel</span> = <span class="string">&#x27;stylesheet&#x27;</span>;</span><br><span class="line">    link.<span class="property">type</span> = <span class="string">&#x27;text/css&#x27;</span>;</span><br><span class="line">    link.<span class="property">url</span> = url;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(link);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;service-location&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;baiduMapContainer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; fileTool &#125; <span class="keyword">from</span> <span class="string">&quot;@/js/utils&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">BMapObj</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建地图</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">initMap</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        fileTool.<span class="title function_">loadBMapGLLib</span>().<span class="title function_">then</span>(<span class="function"><span class="params">BMapGL</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 创建地图实例 </span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">BMapObj</span> = <span class="keyword">new</span> <span class="title class_">BMapGL</span>.<span class="title class_">Map</span>(<span class="string">&quot;baiduMapContainer&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 初始化地图，设置中心点坐标和地图级别</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">BMapObj</span>.<span class="title function_">centerAndZoom</span>(<span class="keyword">new</span> <span class="title class_">BMapGL</span>.<span class="title class_">Point</span>(<span class="number">116.404</span>, <span class="number">39.915</span>), <span class="number">19</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//开启鼠标滚轮缩放</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">BMapObj</span>.<span class="title function_">enableScrollWheelZoom</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 添加比例尺控件</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">BMapObj</span>.<span class="title function_">addControl</span>(<span class="keyword">new</span> <span class="title class_">BMapGL</span>.<span class="title class_">ScaleControl</span>()); </span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 添加缩放控件</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">BMapObj</span>.<span class="title function_">addControl</span>(<span class="keyword">new</span> <span class="title class_">BMapGL</span>.<span class="title class_">ZoomControl</span>());</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 添加城市列表控件</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">BMapObj</span>.<span class="title function_">addControl</span>(<span class="keyword">new</span> <span class="title class_">BMapGL</span>.<span class="title class_">CityListControl</span>());</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">initMap</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.service-location</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#baiduMapContainer</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> - <span class="number">125px</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>logLevel</title>
    <url>/tool-logLevel/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>相关链接：<ul>
<li><a href="https://www.npmjs.com/package/loglevel">https://www.npmjs.com/package/loglevel</a></li>
<li><a href="https://github.com/pimterry/loglevel">https://github.com/pimterry/loglevel</a></li>
</ul>
</li>
<li>推荐理由：<ul>
<li>使用本插件的项目众多，包括webpack-dev-server等。</li>
<li>轻量、跨平台、兼容性强，基本功能都有，也比较干净。</li>
<li>2013年创建的，一直有在维护，issue中也看出来作者比较靠谱。</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install loglevel --save</span><br></pre></td></tr></table></figure>



<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 module</span></span><br><span class="line"><span class="keyword">import</span> log <span class="keyword">from</span> <span class="string">&#x27;loglevel&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// CommonsJS (e.g. Node)</span></span><br><span class="line"><span class="keyword">var</span> log = <span class="built_in">require</span>(<span class="string">&#x27;loglevel&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// AMD (e.g. RequireJS)</span></span><br><span class="line"><span class="title function_">define</span>([<span class="string">&#x27;loglevel&#x27;</span>], <span class="keyword">function</span>(<span class="params">log</span>) &#123;</span><br><span class="line">   log.<span class="title function_">warn</span>(<span class="string">&quot;dangerously convenient&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接引入</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;loglevel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="level"><a href="#level" class="headerlink" title="level"></a>level</h3><p>5种常规log，级别从低到高</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">log.<span class="title function_">trace</span>(msg) <span class="comment">// 跟踪记录信息，和debug类似，级别最低</span></span><br><span class="line">log.<span class="title function_">debug</span>(msg) <span class="comment">// debug调试信息，同log.log(msg)</span></span><br><span class="line">log.<span class="title function_">info</span>(msg)  <span class="comment">// 提示说明性信息</span></span><br><span class="line">log.<span class="title function_">warn</span>(msg)  <span class="comment">// 警告，潜在错误信息</span></span><br><span class="line">log.<span class="title function_">error</span>(msg) <span class="comment">// 错误事件信息</span></span><br></pre></td></tr></table></figure>

<p>相关函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	- 禁用所有低于给定级别的日志，默认为warn</span></span><br><span class="line"><span class="comment">	- 第一个参数为级别(level):</span></span><br><span class="line"><span class="comment">      - 可为字符串：trace、debug、info、warn、error、silent（不区分大小写）；</span></span><br><span class="line"><span class="comment">      - 可为数字：0到5(trace到silent)；</span></span><br><span class="line"><span class="comment">      - 亦可为内置变量(例如log.levels.DEBUG)</span></span><br><span class="line"><span class="comment">	- 第二个参数为持久化选项:</span></span><br><span class="line"><span class="comment">      - loglevel会尽可能使用LocalStorage和cookies来实现持久化</span></span><br><span class="line"><span class="comment">      - 若两者都无法使用或persist设为false，将不会使用存储。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">log.<span class="title function_">setLevel</span>(level, [persist])</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置默认级别，参数同setLevel */</span></span><br><span class="line">log.<span class="title function_">setDefaultLevel</span>(level)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 启用所有日志消息,等同于log.setLevel(&quot;trace&quot;) */</span></span><br><span class="line">log.<span class="title function_">enableAll</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 禁用所有日志消息,等同于log.setLevel(&quot;silent&quot;) */</span></span><br><span class="line">log.<span class="title function_">disableAll</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回当前日志级别，从0到5(trace到silent) 的数字 */</span></span><br><span class="line">log.<span class="title function_">getLevel</span>()</span><br></pre></td></tr></table></figure>



<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建新的logger对象，可以单独为其设置级别和方法 */</span></span><br><span class="line">log.<span class="title function_">getLogger</span>(loggerName)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回所有使用getLogger创建的Logger对象 */</span></span><br><span class="line">log.<span class="title function_">getLoggers</span>()</span><br></pre></td></tr></table></figure>



<h3 id="methodFactory"><a href="#methodFactory" class="headerlink" title="methodFactory"></a>methodFactory</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">	- 每次设置级别（包括初始化）时，都会运行methodFactory方法进行重置</span></span><br><span class="line"><span class="comment">	- 可在此函数中，对输出日志进行格式化或异步处理</span></span><br><span class="line"><span class="comment">	- 最后务必调用setLevel方法以使其生效</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> originalFactory = log.<span class="property">methodFactory</span>;</span><br><span class="line">log.<span class="property">methodFactory</span> = <span class="keyword">function</span> (<span class="params">methodName, logLevel, loggerName</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> rawMethod = <span class="title function_">originalFactory</span>(methodName, logLevel, loggerName);</span><br><span class="line">	<span class="comment">// 在每条输出的日志前加上&quot;Newsflash: &quot;前缀</span></span><br><span class="line">	<span class="comment">// 要注意传多个参数的情况 https://github.com/pimterry/loglevel/issues/86</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">var</span> argsArray = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">		argsArray.<span class="title function_">unshift</span>(<span class="string">&quot;Newsflash: &quot;</span>);</span><br><span class="line">		rawMethod.<span class="title function_">apply</span>(<span class="variable language_">this</span>, argsArray);</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">log.<span class="title function_">setLevel</span>(log.<span class="title function_">getLevel</span>());</span><br></pre></td></tr></table></figure>



<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 若与其他库冲突，可使用noConflict函数，并使用其他名字命名</span></span><br><span class="line"><span class="keyword">var</span> logging = log.<span class="title function_">noConflict</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个对象：&#123; TRACE: 0, DE<span class="doctag">BUG:</span> 1, INFO: 2, WARN: 3, ERROR: 4, SILENT: 5 &#125;</span></span><br><span class="line">log.<span class="property">levels</span></span><br></pre></td></tr></table></figure>



<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><strong>模块的使用</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 module-one.js 文件中:</span></span><br><span class="line"><span class="keyword">var</span> log = <span class="built_in">require</span>(<span class="string">&quot;loglevel&quot;</span>).<span class="title function_">getLogger</span>(<span class="string">&quot;module-one&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doSomethingAmazing</span>(<span class="params"></span>) &#123;</span><br><span class="line">  	log.<span class="title function_">debug</span>(<span class="string">&quot;Amazing message from module one.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 module-two.js 文件中:</span></span><br><span class="line"><span class="keyword">var</span> log = <span class="built_in">require</span>(<span class="string">&quot;loglevel&quot;</span>).<span class="title function_">getLogger</span>(<span class="string">&quot;module-two&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doSomethingSpecial</span>(<span class="params"></span>) &#123;</span><br><span class="line">  	log.<span class="title function_">debug</span>(<span class="string">&quot;Special message from module two.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 main.js 文件中:</span></span><br><span class="line"><span class="keyword">var</span> log = <span class="built_in">require</span>(<span class="string">&quot;loglevel&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> moduleOne = <span class="built_in">require</span>(<span class="string">&quot;module-one&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> moduleTwo = <span class="built_in">require</span>(<span class="string">&quot;module-two&quot;</span>);</span><br><span class="line">log.<span class="title function_">getLogger</span>(<span class="string">&quot;module-two&quot;</span>).<span class="title function_">setLevel</span>(<span class="string">&quot;TRACE&quot;</span>);</span><br><span class="line"></span><br><span class="line">moduleOne.<span class="title function_">doSomethingAmazing</span>(); </span><br><span class="line">moduleTwo.<span class="title function_">doSomethingSpecial</span>(); </span><br><span class="line"><span class="comment">// 控制台中只输出了 &quot;Special message from module two.&quot;，因为moduleOne设置的级别为默认的‘warn’</span></span><br></pre></td></tr></table></figure>



<p><strong>在浏览器环境下，为日志添加样式及执行异步操作</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// ES6 module</span></span><br><span class="line"><span class="keyword">import</span> log <span class="keyword">from</span> <span class="string">&#x27;loglevel&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 美化样式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setColor</span>(<span class="params">message, methodName, loggerName</span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> mapping = &#123; <span class="attr">trace</span>: <span class="string">&#x27;#389e0d&#x27;</span>, <span class="attr">debug</span>: <span class="string">&#x27;#f70&#x27;</span>, <span class="attr">info</span>: <span class="string">&#x27;#1890FF&#x27;</span> &#125;;</span><br><span class="line">	<span class="comment">// 仅适用于浏览器环境</span></span><br><span class="line">	<span class="keyword">if</span> (mapping[methodName] &amp;&amp; <span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> [</span><br><span class="line">		<span class="string">`%c<span class="subst">$&#123;methodName&#125;</span>-<span class="subst">$&#123;loggerName || <span class="string">&#x27;Global&#x27;</span>&#125;</span>`</span>,</span><br><span class="line">		<span class="string">`background: <span class="subst">$&#123;mapping[methodName]&#125;</span>;color: #fff;padding: 3px 5px;margin-right: 5px`</span>,</span><br><span class="line">		].<span class="title function_">concat</span>(message);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> message;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 模拟异步请求</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendLogMsg</span>(<span class="params">message, methodName, loggerName</span>) &#123;</span><br><span class="line">	<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;已发送&#x27;</span>, message, methodName, loggerName);</span><br><span class="line">	&#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 自定义logger函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initLogger</span>(<span class="params"></span>) &#123;</span><br><span class="line"> 	<span class="keyword">const</span> originalFactory = log.<span class="property">methodFactory</span>;</span><br><span class="line">	log.<span class="property">methodFactory</span> = <span class="function">(<span class="params">methodName, logLevel, loggerName</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">const</span> rawMethod = <span class="title function_">originalFactory</span>(methodName, logLevel, loggerName);</span><br><span class="line">		<span class="keyword">const</span> that = <span class="variable language_">this</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">			<span class="comment">// 在箭头函数中call和apply会忽略第一个参数，故不用箭头函数</span></span><br><span class="line">			<span class="keyword">let</span> logMsg = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">			<span class="comment">// 模拟上报日志</span></span><br><span class="line">			that.<span class="title function_">sendLogMsg</span>(logMsg, methodName, loggerName);</span><br><span class="line">			<span class="comment">// 输出</span></span><br><span class="line">			rawMethod.<span class="title function_">apply</span>(<span class="variable language_">this</span>, that.<span class="title function_">setColor</span>(logMsg, methodName, loggerName));</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">// 应用自定义methodFactory函数</span></span><br><span class="line">	log.<span class="title function_">setLevel</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span> ? <span class="number">0</span> : <span class="string">&#x27;warn&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>在node环境下，为日志添加样式</strong></p>
<p>着色插件：<a href="https://github.com/chalk/chalk">https://github.com/chalk/chalk</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> log = <span class="built_in">require</span>(<span class="string">&#x27;loglevel&#x27;</span>); </span><br><span class="line"><span class="keyword">var</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">writeLog</span>(<span class="params"></span>) &#123;</span><br><span class="line">	log.<span class="title function_">setLevel</span>(<span class="number">0</span>);</span><br><span class="line">	log.<span class="title function_">info</span>(chalk.<span class="property">white</span>.<span class="property">bgGreen</span>.<span class="title function_">bold</span>(<span class="string">&#x27;Hello world!&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>SFTP入门</title>
    <url>/tool-sftp/</url>
    <content><![CDATA[<p>公司架构原因，前端部署还没有实现CI&#x2F;CD，仍需要本地打包再上传到服务器。这种部署方式以前工作上没用过，只有早前自己玩服务器的时候学过，但只停留在会用的阶段。正好借这个机会把知识补一补，顺带安利下自用的一些工具。</p>
<span id="more"></span>

<h2 id="技术概述"><a href="#技术概述" class="headerlink" title="技术概述"></a>技术概述</h2><h3 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h3><ul>
<li>FTP即<strong>文件传输协议</strong>（File Transfer Protocol），TCP&#x2F;IP协议组中的协议之一，是用于计算机网络上在客户端和服务器之间进行文件传输的应用层协议。通俗讲就是可以通过网络将数据文件从一台计算机传输到另一台计算机。FTP包括客户端和服务器两部分，使用命令通道（默认端口21）和数据通道（默认端口20）两个独立的通道来传输信息。</li>
<li><strong>两种传输模式</strong>：<ul>
<li>主动模式（PORT，默认）下，建立命令通道后，服务器将启动与客户端的数据连接。主动模式更利于管理服务端，因为只需打开21端口“准入”、20端口“准出”即可。</li>
<li>被动模式下（PASV），建立命令通道后，由客户端启动与服务器的数据连接。被动模式更利于管理客户端，因为如果由服务器发送连接请求可能会触发客户端防火墙。</li>
</ul>
</li>
<li><strong>FTP缺点</strong>：安全隐患（明文传输，无法保证安全性）、缺乏可见性（无法维护对系统操作的审核跟踪）、存储开销大（不允许发件人自动过期或删除文件）、工作流程繁琐。</li>
</ul>
<h3 id="FTPS"><a href="#FTPS" class="headerlink" title="FTPS"></a>FTPS</h3><ul>
<li>FTPS也称作“FTP-SSL”和“FTP-over-SSL”，是一种对FTP添加SSL&#x2F;TLS加密协议支持的扩展协议，即<strong>加密版FTP</strong>。 <ul>
<li><strong>SSL</strong>（Secure Socket Layer，安全套接字层）通过互相认证、使用数字签名确保完整性、使用加密确保私密性，是为HTTP&#x2F;SMTP等加密设计的（HTTPS &#x3D; HTTP + SSL&#x2F;TLS）。</li>
<li><strong>TLS</strong>（Transport Layer Security，传输层安全协议）用于两个应用程序之间提供保密性和数据完整性。</li>
</ul>
</li>
<li>FPTS有<strong>隐式SSL</strong>和<strong>显式SSL</strong>两种模式：<ul>
<li>当启用隐式模式时，FTP的默认端口就被改为TCP&#x2F;990，服务器自动建立安全连接，并且要求客户端也必须支持安全连接模式也就是使用SSL进行连接。</li>
<li>当启用显式模式时，与FTP连接方式和默认端口一样，但是需要以命令AUTH SSL&#x2F;TLS类型的命令进行激活安全连接后才能正常传输数据。</li>
</ul>
</li>
</ul>
<h3 id="SFTP"><a href="#SFTP" class="headerlink" title="SFTP"></a>SFTP</h3><ul>
<li>SFTP即<strong>安全文件传输协议</strong>（Secure File Transfer Protocol），语法与FTP一样，在客户端和服务器之间通过SSH协议（默认端口22）建立的安全连接来传输文件。<ul>
<li><strong>SSH</strong>（Secure Shell，安全外壳协议）是专为远程登录会话和其他网络服务提供安全性的协议。</li>
<li>SSH软件包中包含SFTP安全文件传输子系统，SSH最初又是Unix中的一个程序，所以Unix、Linux系统中都是自带SSH和SFTP。</li>
</ul>
</li>
<li>SFTP仅使用单个通道，允许使用用户名&#x2F;密码或SSH加密密钥对客户端进行身份验证，并且在客户端和服务器之间移动的数据是加密的，虽然传输速率比FTP低，但是非常安全。</li>
<li>SFTP和FTPS很容易混淆，但它们俩是完全不同的，SFTP主体是SSH，而FTPS主体是FTP。</li>
<li>像使用“丢包”的方式部署网站时，更建议使用SFTP。用网上很形象的一个说法解释就是，SSH像铺管子，SSL像打包裹，它们都能保证数据的安全，但SSH是管子所以更适合FTP的安全传输。</li>
</ul>
<h2 id="sftp工具推荐"><a href="#sftp工具推荐" class="headerlink" title="sftp工具推荐"></a>sftp工具推荐</h2><h3 id="热门工具"><a href="#热门工具" class="headerlink" title="热门工具"></a>热门工具</h3><p>以下是网上推荐的最多的几款工具，都很好用</p>
<ul>
<li><a href="https://www.filezilla.cn/">FileZilla</a>：老牌，免费，支持macOS、Windows，客户端工具中算是榜首老大哥了。</li>
<li><a href="https://winscp.net/eng/index.php">WinScp</a>：老牌，免费，只支持Windows。</li>
<li><a href="https://www.termius.com/">termius</a>：全平台应用，支持macOS、Windows甚至手机端，<a href="https://www.termius.com/pricing">部分功能收费</a>。</li>
<li><a href="https://panic.com/transmit/">transmit</a>：收费，只支持macOS。</li>
</ul>
<h3 id="termius"><a href="#termius" class="headerlink" title="termius"></a>termius</h3><p><a href="https://www.termius.com/">termius</a>是我个人最喜欢的一款，支持Windows &#x2F; macOS &#x2F; iOS &#x2F; Android &#x2F; Linux，全平台软件，颜值也高，可惜sftp功能要付费。但使用学生认证的GitHub账号登录可以免费用哦😏弟弟妹妹们的用处到了，<a href="https://education.github.com/pack">github大礼包</a>薅起来！</p>
<blockquote>
<p>但在Mac上通过appstore下载的termius无法访问本地文件，官方解决办法是：在本地开一个ssh服务或者去官方网站下载软件。</p>
</blockquote>
<div style="width:74%;display:inline-block">
    <img src="../image/tool-sftp/2_1.jpg" width="48%" style="margin: 0;display:inline-block!important;"><img src="../image/tool-sftp/2_4.jpg" width="48%" style="margin: 0;display:inline-block!important;"><img src="../image/tool-sftp/2_2.jpg" width="48%" style="margin: 0;display:inline-block!important;"><img src="../image/tool-sftp/2_3.jpg" width="48%" style="margin: 0;display:inline-block!important;">
</div><img src="../image/tool-sftp/2_5.jpg" width="25%" style="margin: 0;display:inline-block!important;">

<h3 id="vscode插件"><a href="#vscode插件" class="headerlink" title="vscode插件"></a>vscode插件</h3><p><a href="https://marketplace.visualstudio.com/items?itemName=liximomo.sftp">vscode-sftp</a>是ftp工具中我使用频率最高的一个插件，使用很简单，又很直观，对于前端来说很实用。详细使用说明和配置可以在<a href="https://github.com/liximomo/vscode-sftp/wiki/Setting">这里</a>查看。<br><img src="../image/tool-sftp/3_1.jpg" width="70%"></p>
<h4 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h4><ul>
<li>同步本地与远程服务器上的文件</li>
<li>本地与远程的同文件对比（diff）</li>
<li>可视化远程目录及远程文件的删除</li>
<li>快捷打开已登录远程服务器的终端</li>
<li>支持映射多台远程服务器：<a href="https://github.com/liximomo/vscode-sftp#example-configs">配置范例</a></li>
</ul>
<h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul>
<li><strong>初始化</strong>：VSCode中打开本地项目，Windows&#x2F;Linux系统按下<code>Ctrl+Shift+P</code>或者macOS系统按下<code>Cmd+Shift+P</code>，运行<code>SFTP:Config</code>命令后，项目根目录<code>.vscode</code>文件夹下就会出现<code>sftp.json</code>配置文件，同时VSCode左侧视图会出现sftp项。</li>
<li><strong>配置</strong>：在<code>sftp.json</code>中填写配置信息，正确填写后才能正常使用sftp功能。</li>
<li><strong>对比</strong>：左侧资源管理器中或在打开的文件中右键，点击“Diff with Remote”，即可对比该文件在本地和远程中的区别。</li>
<li><strong>上传和下载</strong>：左侧资源管理器中右键点击“Sync Local -&gt; Remote”，即可上传本地文件至远程服务器；点击“Sync Remote -&gt; Local”则可下载远程文件至本地。可在View &gt; Output &gt; sftp（查看 &gt; 输出 &gt; sftp）中查看sftp日志。</li>
<li><strong>删除远程文件</strong>：在左侧sftp管理器中右键对应文件，点击“Delete”就可直接删除远程上的对应文件。</li>
<li><strong>打开终端</strong>：在左侧sftp管理器中右键根目录，点击“Open SSH in Terminal”就能在VSCode中打开终端并自动登录到远程服务器。</li>
</ul>
<h4 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h4><ul>
<li><strong>SFTP: Set Profile</strong>：设置当前配置文件</li>
<li><strong>SFTP: Config</strong>：为项目创建新的配置文件</li>
<li><strong>Cancel All Transfers</strong>：停止当前传输（上传和下载）</li>
<li><strong>SFTP: Download Active File</strong>：下载当前文件的远程版本并覆盖本地副本</li>
<li><strong>SFTP: Download Active Folder</strong>：下载当前文件所在的整个文件夹</li>
<li><strong>SFTP: List Active Folder</strong>：列出当前文件所在的文件夹</li>
<li><strong>Open SSH in Terminal</strong>：VSCode中打开终端并自动登录到远程服务器</li>
<li><strong>SFTP: Sync Local -&gt; Remote</strong>：同步本地代码至远程，可以通过syncOption更改配置。</li>
<li><strong>SFTP: Sync Remote -&gt; Local</strong>：同步远程代码至本地</li>
<li><strong>SFTP: Sync Both Directions</strong>：比较文件修改时间，并始终执行能使最新文件出现在两端的操作。（skipCreate和ignoreExisting配置对次命令有效）</li>
<li><strong>SFTP: Upload Active File</strong>：上传当前文件</li>
<li><strong>SFTP: Upload Active Folder</strong>：上传当前文件所在的整个文件夹</li>
</ul>
<h4 id="配置列表"><a href="#配置列表" class="headerlink" title="配置列表"></a>配置列表</h4><p>我常用的配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demo_platform&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;context&quot;</span><span class="punctuation">:</span> <span class="string">&quot;demo_platform&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;remotePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/opt/front_code/demo_platform&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.20.45&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sftp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;uploadOnSave&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 如果没配置ssh</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 如果用了配置了ssh</span></span><br><span class="line">    <span class="attr">&quot;privateKeyPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Users/zhaoluting/.ssh/id_rsa&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>通用配置说明</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;标识名称，会在左侧视图中显示&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;context&quot;</span><span class="punctuation">:</span> <span class="string">&quot;映射到remotePath的本地文件路径，默认值为工作区根目录&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;协议，sftp还是ftp，默认值sftp&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务主机名或IP地址&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;端口号，默认值22&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;用于身份验证的用户名&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;remotePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;需要连接的远程文件路径，默认‘/’&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;uploadOnSave&quot;</span><span class="punctuation">:</span> <span class="string">&quot;每次保存代码时上传，默认false&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;downloadOnOpen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;只要打开文件，就从远程服务器下载，默认false&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;syncOption&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;delete&quot;</span><span class="punctuation">:</span> <span class="string">&quot;从目标路径目录中删除无关的文件&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipCreate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;跳过在目标路径上创建新文件&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ignoreExisting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;忽视更新目标路径上存在的文件&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;update&quot;</span><span class="punctuation">:</span> <span class="string">&quot;仅当远程文件上有更新时才更新目标路径&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ignore&quot;</span><span class="punctuation">:</span> <span class="string">&quot;忽略文件，数组&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ignoreFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;忽略文件的绝对路径或相对于工作区根文件夹的相对路径&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;watcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="string">&quot;监听文件&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;autoUpload&quot;</span><span class="punctuation">:</span> <span class="string">&quot;文件更改时上传&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;autoDelete&quot;</span><span class="punctuation">:</span> <span class="string">&quot;删除文件时移除&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;remoteTimeOffsetInHours&quot;</span><span class="punctuation">:</span> <span class="string">&quot;远程和本地间的时间差，默认0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;remoteExplorer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;filesExclude&quot;</span><span class="punctuation">:</span> <span class="string">&quot;配置排除文件，远程资源管理器根据此设置决定显示或隐藏哪些文件&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;concurrency&quot;</span><span class="punctuation">:</span> <span class="string">&quot;并发数，默认4&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;connectTimeout&quot;</span><span class="punctuation">:</span> <span class="string">&quot;连接超时时间，默认10000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;limitOpenFilesOnRemote&quot;</span><span class="punctuation">:</span> <span class="string">&quot;限制远程打开的file descriptors数量，非必须不要设置此项，默认false&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>SFTP配置说明</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;agent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;代理&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;privateKeyPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;本地ssh私钥的绝对路径&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;passphrase&quot;</span><span class="punctuation">:</span> <span class="string">&quot;配置ssh时的passphrase&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;interactiveAuth&quot;</span><span class="punctuation">:</span> <span class="string">&quot;键盘交互认证模式，默认false&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;algorithms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;覆盖连接的默认传输层算法配置&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sshConfigPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SSH配置文件的绝对路径，默认~/.ssh/config&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sshCustomParams&quot;</span><span class="punctuation">:</span> <span class="string">&quot;在终端中打开SSH附加的额外参数&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>FTPS配置说明</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;secure&quot;</span><span class="punctuation">:</span> <span class="string">&quot;是否加密，默认false&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;secureOptions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;加密配置，详见https://nodejs.org/api/tls.html#tls_tls_connect_options_callback&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h3><p>Mac是Unix系统，所以自带sftp，可以使用终端建立连接<br><img src="../image/tool-sftp/4_1.jpg" width="70%"></p>
<p>以下是ftp常用终端命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立 SFTP 连接</span></span><br><span class="line">sftp username@hostname </span><br><span class="line"></span><br><span class="line"><span class="comment"># SFTP 到 22 以外的端口</span></span><br><span class="line">sftp -P 2222 root@192.168.20.45</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳转远程主机上的目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt/front_code</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出远程主机上当前目录的内容</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在远程主机上创建一个目录</span></span><br><span class="line"><span class="built_in">mkdir</span> demo_platform</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程主机上的目录，但该目录必须为空</span></span><br><span class="line"><span class="built_in">rmdir</span> demo_platform</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件从远程主机复制到本地计算机</span></span><br><span class="line">get website-logo.jpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从远程主机复制文件夹，使用-r （递归）选项</span></span><br><span class="line">get -r images/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件从本地计算机复制到远程主机</span></span><br><span class="line">put website-logo.jpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件夹从本地计算机复制到远程主机</span></span><br><span class="line">put -r images/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭与远程主机的连接，并退出 SFTP</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="built_in">bye</span></span><br><span class="line">quit</span><br><span class="line">!</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>swagger文档规范</title>
    <url>/tool-swagger/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://swagger.io/">Swagger</a>是一个简单又强大的文档生成工具。在项目中集成这个工具，能够根据配置信息自动为我们生成一个api文档展示页，可以在浏览器中直接访问查看项目中的接口信息，同时也可以测试每个api接口，同时也是前后端开发人员联系的重要纽带。一份功能完整、结构清晰、描述合理的API文档能大大提高前后端的合作开发效率。</p>
<span id="more"></span>
<br/>

<h2 id="合格的swagger文档"><a href="#合格的swagger文档" class="headerlink" title="合格的swagger文档"></a>合格的swagger文档</h2><p>在前后端分离的项目中常常会用到swagger，它既是测试工具，又是前后端沟通的桥梁，在项目中发挥着非常重要的作用。在项目初期，前后端一般都会有个磨合的过程，对swagger文档约定是不可少的。<br>那么，在前端眼中，怎么样算一份<strong>合格易懂</strong>的swagger文档。下面三张图为优秀范例：</p>
<p><img src="/image/swagger-sandard/swagger1.png" alt="优秀范例"><br><img src="/image/swagger-sandard/swagger2.png" alt="优秀范例"><br><img src="/image/swagger-sandard/swagger3.png" alt="优秀范例"></p>
<p><strong>以下是我们前端人员常关注的地方：</strong></p>
<ol>
<li>一般对应的是 注解中的 @ApiOperation，用在方法上，说明方法的作用。<br>   - 合格点：用中文简单描述。</li>
<li>一般对应的是 注解中的 @ApiModelProperty，用于描述一个model的属性。<br>   - 合格点：<br> - 有枚举类的属性加上枚举类说明，属性多的情况下尽量多加点中文注释。<br>        - response格式写完整，不能{ “code”: 0, “data”: {} }  了事。</li>
<li>一般对应的是 注解中的 @ApiParam 或者 @ApiImplicitParam， 用于对每个参数的描述。<br>   - 合格点：<br> - params格式完整。<br>        - 参数多的情况下尽量用中文注释。</li>
</ol>
<br/>
一般只要**以下三点达成共识**，那么对接的效率就会事半功倍，也不容易引起不愉快的争吵：
- 后端写swagger文档时在以上关注点上下点功夫（一般是从代码中提取注释即可自动生成文档，所以对后端代码可读性也是有好处的）；
- 有接口字段改动时第一时间通知前端；
- 相同意义字段统一定义；
  

  <br/>

<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/u014231523/article/details/76522486">swagger2常用注解说明</a><br><a href="https://www.jianshu.com/p/12f4394462d5">swagger常用注解说明</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac terminal入门篇</title>
    <url>/tool-zsh/</url>
    <content><![CDATA[<h2 id="了解mac-terminal（终端）"><a href="#了解mac-terminal（终端）" class="headerlink" title="了解mac terminal（终端）"></a>了解mac terminal（终端）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">system_profiler    <span class="comment">#显示Mac的硬件和软件信息</span></span><br><span class="line">sw_vers            <span class="comment">#显示OSX系统版本</span></span><br><span class="line"><span class="built_in">uname</span> -av          <span class="comment">#显示OS X Darwin内核版本</span></span><br></pre></td></tr></table></figure>
<p>简单来说：  </p>
<ul>
<li>unix是最早的出来的多任务、多用户系统，是对源代码实行知识产权保护的传统商业软件，是收费的。 </li>
<li>linux是一个牛人为了让人们用到免费的类unix系统，开发出了linux的内核，是开放源代码的自由软件。</li>
<li>mac os x是由Unix的一个分支(BSD)发展过来的，核心叫darwin(达尔文)。</li>
</ul>
<p>在unix 内核的操作系统中,包括衍生出来的分支linux、OS X等，所有文件都挂在跟目录 &#x2F; 下面，没有Windows下的盘符概念。</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th>位置</th>
<th>路径</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>根目录</td>
<td>&#x2F;mach_kernel</td>
<td>内核就在这</td>
</tr>
<tr>
<td>驱动所在</td>
<td>&#x2F;Systme&#x2F;Library&#x2F;Extensions</td>
<td></td>
</tr>
<tr>
<td>用户文件夹(home folder)</td>
<td>&#x2F;User&#x2F;用户名</td>
<td>简写：~</td>
</tr>
<tr>
<td>桌面</td>
<td>&#x2F;User&#x2F;用户名&#x2F;Desktop</td>
<td></td>
</tr>
<tr>
<td>当前目录</td>
<td>.</td>
<td></td>
</tr>
<tr>
<td>父目录</td>
<td>..</td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>注意：在 Unix系统中是区别大小写字符的，并且对于文件名，必须包括扩展名。</p>
</blockquote>
<h2 id="快速打开终端"><a href="#快速打开终端" class="headerlink" title="快速打开终端"></a>快速打开终端</h2><ol>
<li>spotlight方法：首先用快捷键打开spotlight（command+空格），输入ter，自动显示出终端全称，按enter即可打开终端。  </li>
<li>Finder打开：Finder——应用程序——实用工具——终端  </li>
<li>快捷键完成当前文件夹打开终端：打开“系统偏好设置”——键盘——快捷键——服务，找到“新建位于文件夹位置的终端窗口”打钩。之后，只要在文件夹上 右键——服务——“新建位于文件夹位置的终端窗口” 即可。</li>
</ol>
<h2 id="终级Shell–zsh"><a href="#终级Shell–zsh" class="headerlink" title="终级Shell–zsh"></a>终级Shell–zsh</h2><p>shell 是我们和系统内核指令打交道的一座桥梁,我们通过键盘输入一种自己容易记忆识别的符号标识(shell 命令)，然后 shell 解析这种命令再反馈给内核去执行一系列操作。</p>
<p><strong>可以通过以下命令查看安装了哪些shell（OS X 系统预装了zsh）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/shells</span><br></pre></td></tr></table></figure>

<p><strong>查看系统默认的shell</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure>

<p><strong>将默认shell改成zsh</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>
<blockquote>
<p>zsh是shell的一种，由于配置过于复杂，以至于很多人并不常用他。所以大多数Linux产品默认使用的都是bash shell。直到一个开源项目的出现<a href="http://ohmyz.sh/">oh my zsh</a>，github来管理zsh的配置和支持更多插件，使得zsh配置变得更容易，使用起来更加强大。以至于他有了个外号—<strong>终极shell</strong>。</p>
</blockquote>
<p><strong>安装oh my zsh</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>配置文件路径：</strong> ~&#x2F;.zshrc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">大部分配置都可以在配置文件中进行设置，这里大概翻译一下。</span><br><span class="line"></span><br><span class="line"><span class="comment"># ZSH的环境变量</span></span><br><span class="line"><span class="built_in">export</span> ZSH=/Users/dawang/.oh-my-zsh</span><br><span class="line"><span class="comment"># 主题设置</span></span><br><span class="line"><span class="comment"># 主题列表在 ~/.oh-my-zsh/themes/</span></span><br><span class="line"><span class="comment"># [主题列表](https://github.com/robbyrussell/oh-my-zsh/wiki/themes)</span></span><br><span class="line"><span class="comment"># 如果设置为 &quot;random&quot;, 每次开启都会是不同的主题</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;robbyrussell&quot;</span></span><br><span class="line"><span class="comment"># 如果想要大小写敏感，可以取消注释下面的一行</span></span><br><span class="line"><span class="comment"># CASE_SENSITIVE=&quot;true&quot;</span></span><br><span class="line"><span class="comment"># 如果想要连接符不敏感，可以取消注释下面的一行。_ 和 - 将可以互换</span></span><br><span class="line"><span class="comment"># HYPHEN_INSENSITIVE=&quot;true&quot;</span></span><br><span class="line"><span class="comment"># 如果不想要自动更新，可以取消注释下面的一行</span></span><br><span class="line"><span class="comment"># DISABLE_AUTO_UPDATE=&quot;true&quot;</span></span><br><span class="line"><span class="comment"># 自动更新的时间间隔，单位是天，这里设置 30 天更新一次</span></span><br><span class="line"><span class="built_in">export</span> UPDATE_ZSH_DAYS=30</span><br><span class="line"><span class="comment"># 如果不想要 ls 命令输出带颜色，可以取消注释下面的一行</span></span><br><span class="line"><span class="comment"># DISABLE_LS_COLORS=&quot;true&quot;</span></span><br><span class="line"><span class="comment"># 是否禁止更改终端标题,不要禁止,不然所有终端tab只显示zsh了,而不随着目录的改变而改变显示</span></span><br><span class="line"><span class="comment"># DISABLE_AUTO_TITLE=&quot;true&quot;</span></span><br><span class="line"><span class="comment"># 自动纠正命令,不启用,不怎么好用</span></span><br><span class="line"><span class="comment"># ENABLE_CORRECTION=&quot;true&quot;</span></span><br><span class="line"><span class="comment"># 按tab键补全命令的时候,如果没什么可补全的就会出现三个红点</span></span><br><span class="line"><span class="comment"># COMPLETION_WAITING_DOTS=&quot;true&quot;</span></span><br><span class="line"><span class="comment"># Uncomment the following line if you want to disable marking untracked files</span></span><br><span class="line"><span class="comment"># under VCS as dirty. This makes repository status check for large repositories</span></span><br><span class="line"><span class="comment"># much, much faster.</span></span><br><span class="line"><span class="comment"># 不要在意这些细节，不需要改动</span></span><br><span class="line"><span class="comment"># DISABLE_UNTRACKED_FILES_DIRTY=&quot;true&quot;</span></span><br><span class="line"><span class="comment"># 历史命令日期显示格式</span></span><br><span class="line"><span class="comment"># 有三种方式: &quot;mm/dd/yyyy&quot;|&quot;dd.mm.yyyy&quot;|&quot;yyyy-mm-dd&quot;</span></span><br><span class="line"><span class="comment"># HIST_STAMPS=&quot;yyyy-mm-dd&quot;</span></span><br><span class="line"><span class="comment"># Would you like to use another custom folder than $ZSH/custom?</span></span><br><span class="line"><span class="comment"># ZSH_CUSTOM=/path/to/new-custom-folder</span></span><br><span class="line"><span class="comment"># Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)</span></span><br><span class="line"><span class="comment"># Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</span></span><br><span class="line"><span class="comment"># Example format: plugins=(rails git textmate ruby lighthouse)</span></span><br><span class="line"><span class="comment"># 插件设置，如果添加太多启动速度会比较慢</span></span><br><span class="line">plugins=(git autojump)</span><br><span class="line">[[ -s ~/.autojump/etc/profile.d/autojump.zsh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.zsh</span><br><span class="line"><span class="comment"># 剩下部分比较不常改动 </span></span><br><span class="line"><span class="comment"># User configuration</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/TeX/texbin&quot;</span></span><br><span class="line"><span class="comment"># export MANPATH=&quot;/usr/local/man:$MANPATH&quot;</span></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$ZSH</span>/oh-my-zsh.sh</span><br><span class="line"><span class="comment"># You may need to manually set your language environment</span></span><br><span class="line"><span class="comment"># export LANG=en_US.UTF-8</span></span><br><span class="line"><span class="comment"># Preferred editor for local and remote sessions</span></span><br><span class="line"><span class="comment"># if [[ -n $SSH_CONNECTION ]]; then</span></span><br><span class="line"><span class="comment">#   export EDITOR=&#x27;vim&#x27;</span></span><br><span class="line"><span class="comment"># else</span></span><br><span class="line"><span class="comment">#   export EDITOR=&#x27;mvim&#x27;</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line"><span class="comment"># Compilation flags</span></span><br><span class="line"><span class="comment"># export ARCHFLAGS=&quot;-arch x86_64&quot;</span></span><br><span class="line"><span class="comment"># ssh</span></span><br><span class="line"><span class="comment"># export SSH_KEY_PATH=&quot;~/.ssh/dsa_id&quot;</span></span><br><span class="line"><span class="comment"># Set personal aliases, overriding those provided by oh-my-zsh libs,</span></span><br><span class="line"><span class="comment"># plugins, and themes. Aliases can be placed here, though oh-my-zsh</span></span><br><span class="line"><span class="comment"># users are encouraged to define aliases within the ZSH_CUSTOM folder.</span></span><br><span class="line"><span class="comment"># For a full list of active aliases, run `alias`.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example aliases</span></span><br><span class="line"><span class="comment"># alias zshconfig=&quot;mate ~/.zshrc&quot;</span></span><br><span class="line"><span class="comment"># alias ohmyzsh=&quot;mate ~/.oh-my-zsh&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><ol>
<li>插件相关的文件在~&#x2F;.oh-my-zsh&#x2F;plugins目录下，默认提供了100多种。插件也是在.zshrc里配置，找到plugins关键字，系统默认加载git与autojump，可以在后面追加启用插件。</li>
</ol>
<ul>
<li><p>git：当你处于一个 git 受控的目录下时，Shell 会明确显示 「git」和 branch。另外对git 很多命令进行了简化，例如 gco&#x3D;’git checkout’、gst&#x3D;’git status’、g&#x3D;’git’等等，熟练使用可以大大减少 git 的命令长度，命令内容可以参考~&#x2F;.oh-my-zsh&#x2F;plugins&#x2F;git&#x2F;git.plugin.zsh</p>
</li>
<li><p>安装了autojump之后，zsh 会自动记录你访问过的目录，通过 j + 目录名 可以直接进行目录跳转，而且目录名支持模糊匹配和自动补全。</p>
</li>
</ul>
<ol start="2">
<li><p>配置文件底部可以设置 alias（通用别名），还能针对文件类型设置对应的打开程序。</p>
</li>
<li><p>连按两次Tab会列出所有的补全列表并直接开始选择，补全项可以使用 ctrl+n&#x2F;p&#x2F;f&#x2F;b 或 方向键上下左右切换。</p>
</li>
<li><p>在zsh中只需要键入 ls -<tab> 就会列出所有的选项和帮助说明。  </p>
</li>
<li><p>命令参数补全。键入 kill <tab> 就会列出所有的进程名和对应的进程号。</p>
</li>
<li><p>更智能的历史命令。在用或者方向上键查找历史命令时，zsh支持限制查找。比如，输入ls,然后再按方向上键，则只会查找用过的ls命令。</p>
</li>
<li><p>多个终端会话共享历史记录。</p>
</li>
<li><p>目录浏览和跳转：输入 d，即可列出你在这个会话里访问的目录列表，输入列表前的序号，即可直接跳转。</p>
</li>
<li><p>在当前目录下输入 .. 或 … ，或直接输入当前目录名都可以跳转，你甚至不再需要输入 cd 命令了。在你知道路径的情况下，比如 &#x2F;usr&#x2F;local&#x2F;bin 你可以输入 cd &#x2F;u&#x2F;l&#x2F;b 然后按进行补全快速输入。</p>
</li>
<li><p>通配符搜索：例如“ls -l **&#x2F;*.sh”，可以递归显示当前目录下的 shell 文件，文件少时可以代替 find。使用 **&#x2F; 来递归搜索。</p>
</li>
<li><p>如何在命令里面打回车： \ 后面接回车</p>
</li>
<li><p>一句话执行两个命令： xxx; yyy</p>
</li>
<li><p>一句话执行两个命令： xxx&amp;&amp; yyy</p>
</li>
</ol>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul>
<li>光标左移：Ctrl + B</li>
<li>光标右移：Ctrl + F</li>
<li>光标至行首：Ctrl + A</li>
<li>光标至行尾：Ctrl + E</li>
<li>删除至行首：Ctrl + U</li>
<li>删除至行尾：Ctrl + K</li>
<li>删除至单词开始：Ctrl + W</li>
<li>清屏：Ctrl + L</li>
<li>插入最近删除：Ctrl + Y</li>
<li>历史命令：↑ 或 ↓箭头，或 ⌃ + P、Ctrl + N</li>
<li>搜索历史命令：Ctrl + R</li>
<li>中止执行：Ctrl + C</li>
<li>按住 ⌘，单击路径可以在 Finder 中打开</li>
</ul>
<h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><table>
<thead>
<tr>
<th>命令</th>
<th>全写</th>
<th>缩写</th>
</tr>
</thead>
<tbody><tr>
<td>创建目录</td>
<td>make directory</td>
<td>mkdir</td>
</tr>
<tr>
<td>删除</td>
<td>remove</td>
<td>rm</td>
</tr>
<tr>
<td>移动&#x2F;重命名</td>
<td>move</td>
<td>mv</td>
</tr>
<tr>
<td>复制</td>
<td>copy</td>
<td>cp</td>
</tr>
<tr>
<td>罗列</td>
<td>list</td>
<td>ls</td>
</tr>
<tr>
<td>链接</td>
<td>link</td>
<td>ln *</td>
</tr>
</tbody></table>
<h3 id="常用的通配符"><a href="#常用的通配符" class="headerlink" title="常用的通配符"></a>常用的通配符</h3><ul>
<li>星号（＊，Asterisk）——代表任何长度的任何字符。例如*.tiff代表所有格式为tiff的文件。</li>
<li>问号（?，Question mark）——代表任何单个字符。例如b?ok匹配 book 但是不匹配 brook。</li>
<li>方括号（[]，Square brackets）——定义一定范围的字符，例如[Dd]ocument匹配 Document 以及 document；doc[1-9]匹配doc1, doc2, …, doc9。</li>
</ul>
<h3 id="处理特殊字符"><a href="#处理特殊字符" class="headerlink" title="处理特殊字符"></a>处理特殊字符</h3><ul>
<li><p>如果目录中有特殊字符（空格，括号，引号，[]，!，$，&amp;，*，;，|，\），那么直接输入空格会造成系统识别困难，必须使用特殊的语法来表示这些字符。例如上例中，空格前添加反斜杠“\”（back slash）即可：cd Punlic&#x2F;Drop\ Box&#x2F;。除了反斜杠，也可以用引号的方法：cd “Public&#x2F;Drop Box”。</p>
</li>
<li><p>如果不想手动输入，也可以把文件从 Finder 拖到 Terminal 窗口来创建绝对路径，这会方便一些，因为上面提到的所有特殊字符在拖动后都会自动变成系统可识别的表示方法。</p>
</li>
<li><p>更有效率的解决方案是使用 Tab Complete 功能。连按两次Tab进行选择。Tab complete 同样会处理那些特殊字符。</p>
</li>
</ul>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="列出文件"><a href="#列出文件" class="headerlink" title="列出文件"></a>列出文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> 参数 目录名        </span><br></pre></td></tr></table></figure>
<p>以下为常用参数，可组合使用。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>显示所有档案及目录（ls内定将档案名或目录名称为“.”的视为影藏，不会列出）。</td>
</tr>
<tr>
<td>-A</td>
<td>显示除影藏文件“.”和“..”以外的所有文件列表。</td>
</tr>
<tr>
<td>-d</td>
<td>仅显示目录名，而不显示目录下的内容列表。显示符号链接文件本身，而不显示其所指向的目录列表。</td>
</tr>
<tr>
<td>-l</td>
<td>以长格式显示目录下的内容列表。输出的信息从左到右依次包括文件名，文件类型、权限模式、硬连接数、所有者、组、文件大小和文件的最后修改时间等。</td>
</tr>
<tr>
<td>-R</td>
<td>递归处理，将指定目录下的所有文件及子目录一并处理； –full-time：列出完整的日期与时间； –color[&#x3D;WHEN]：使用不同的颜色高亮显示不同类型的。</td>
</tr>
</tbody></table>
<h3 id="转换目录"><a href="#转换目录" class="headerlink" title="转换目录"></a>转换目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span>     <span class="comment">#含义是“print working directory”，会显示当前目录的绝对路径。</span></span><br><span class="line"><span class="built_in">cd</span> 路径  <span class="comment">#改变当前目录到你指定的目录。不指定则会返回 home folder</span></span><br></pre></td></tr></table></figure>


<h3 id="打开文件目录或程序"><a href="#打开文件目录或程序" class="headerlink" title="打开文件目录或程序"></a>打开文件目录或程序</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open /Applications/Safari.app/  <span class="comment">#打开应用</span></span><br><span class="line">open .  <span class="comment">#打开当前目录。</span></span><br></pre></td></tr></table></figure>


<h3 id="建立新目录"><a href="#建立新目录" class="headerlink" title="建立新目录"></a>建立新目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> 目录名</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-p</td>
<td>递归创建目录，如果文件不存在，则逐层创建目录。</td>
</tr>
<tr>
<td>-v</td>
<td>显示目录创建的信息。</td>
</tr>
</tbody></table>
<h3 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> 文件名   <span class="comment">#主要功能与时间戳有关，用来更新文件的访问和修改时间。如果文件不存在，会创建相应的空文件</span></span><br></pre></td></tr></table></figure>

<h3 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> 参数 源文件 目标文件</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> file /usr/men/tmp/file1  <span class="comment">#将文件file复制到目录/usr/men/tmp下，并改名为file1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r /usr/men /usr/zh      <span class="comment">#将目录/usr/men下的所有文件及其子目录复制到目录/usr/zh中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -i /usr/men m*.c /usr/zh <span class="comment">#交互式地将目录/usr/men中的以m打头的所有.c文件复制到目录/usr/zh中（覆盖之前询问用户）</span></span><br></pre></td></tr></table></figure>

<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span>  foo.txt        <span class="comment">#删除一般文件  </span></span><br><span class="line"><span class="built_in">rm</span>  -r  foofolder  <span class="comment">#删除目录</span></span><br><span class="line"><span class="built_in">rm</span>  -r  *          <span class="comment">#删除当前目录下的所有文件及目录</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-r</td>
<td>删除目录时必需参数；</td>
</tr>
<tr>
<td>-i</td>
<td>删除前逐一询问确认；</td>
</tr>
<tr>
<td>－rf</td>
<td>表示递归和强制，千万要小心使用，如果执行了 rm -rf &#x2F; 就全没了</td>
</tr>
</tbody></table>
<h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> file1 file2      <span class="comment">#（若目标是文件名，则相当于文件改名）将文件 file1 改名为 file2。</span></span><br><span class="line"><span class="built_in">mv</span> file1 file2 /tmp <span class="comment">#将文件 file1 和文件 file2 移动到目录 /tmp 下</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
</table>
<ul>
<li>i  | 在覆盖已存在文件时作提示，若回答 y 则覆盖，其他则中止</li>
<li>f  |覆盖前不作任何提示</li>
</ul>
<h3 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h3><table>
<thead>
<tr>
<th>编辑器</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>vi</td>
<td>老式的简单文本编辑器</td>
</tr>
<tr>
<td>vim</td>
<td>复杂的文本编辑器，相当于vi的升级版</td>
</tr>
<tr>
<td>nano</td>
<td>小巧自由的舒适型编辑器</td>
</tr>
</tbody></table>
<h4 id="nano"><a href="#nano" class="headerlink" title="nano"></a><a href="http://man.linuxde.net/nano">nano</a></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano 路径+文件名 <span class="comment">#若文件存在将打开这个文件；不存在则会创建新文件并打开。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>复制一整行：Alt+6</li>
<li>剪贴一整行：Ctrl+K</li>
<li>粘贴：Ctrl+U</li>
<li>搜索: Ctrl+W，然后输入你要搜索的关键字，回车确定，定位到第一个匹配的文本，接着可用Alt+W来定位到下一个匹配的文本。</li>
<li>翻页到上一页：Ctrl+Y</li>
<li>翻页到下一页：Ctrl+V</li>
<li>保存：Ctrl+O 保存所做的修改</li>
<li>退出：Ctrl+X。如果你修改了文件，下面会询问你是否需要保存修改。输入Y确认保存，输入N不保存，按Ctrl+C取消返回。如果输入了Y，下一步会让你输入想要保存的文件名。如果不需要修改文件名直接回车就行；若想要保存成别的名字（也就是另存为）则输入新名称然后确 定。这个时候也可用Ctrl+C来取消返回。</li>
</ul>
<h4 id="vi"><a href="#vi" class="headerlink" title="vi"></a><a href="http://man.linuxde.net/vi">vi</a></h4><blockquote>
<p>vi命令是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi Improved），与vi编辑器完全兼容，而且实现了很多增强功能。</p>
</blockquote>
<p>vi编辑器提供了丰富的内置命令，有些内置命令使用键盘组合键即可完成，有些内置命令则需要以冒号“：”开头输入。常用内置命令如下：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl+u</td>
<td>向文件首翻半屏；</td>
</tr>
<tr>
<td>Ctrl+d</td>
<td>向文件尾翻半屏；</td>
</tr>
<tr>
<td>Ctrl+f</td>
<td>向文件尾翻一屏；</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>向文件首翻一屏；</td>
</tr>
<tr>
<td>Esc</td>
<td>从编辑模式切换到命令模式；</td>
</tr>
<tr>
<td>ZZ</td>
<td>命令模式下保存当前文件所做的修改后退出vi；</td>
</tr>
<tr>
<td>:行号</td>
<td>光标跳转到指定行的行首；</td>
</tr>
<tr>
<td>:wq</td>
<td>在命令模式下，执行存盘退出操作；</td>
</tr>
<tr>
<td>:w</td>
<td>在命令模式下，执行存盘操作；</td>
</tr>
<tr>
<td>:w!</td>
<td>在命令模式下，执行强制存盘操作；</td>
</tr>
<tr>
<td>:q</td>
<td>在命令模式下，执行退出vi操作；</td>
</tr>
<tr>
<td>:q!</td>
<td>在命令模式下，执行强制退出vi操作；</td>
</tr>
<tr>
<td>:set number</td>
<td>在命令模式下用于在最左端显示行号；</td>
</tr>
<tr>
<td>:set nonumber</td>
<td>在命令模式下用于在最左端不显示行号；</td>
</tr>
</tbody></table>
<h3 id="读取文件并输出到-Terminal-窗口"><a href="#读取文件并输出到-Terminal-窗口" class="headerlink" title="读取文件并输出到 Terminal 窗口"></a>读取文件并输出到 Terminal 窗口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> foo.txt                        <span class="comment">#显示文件全部内容</span></span><br><span class="line"><span class="built_in">cat</span> &gt; filename                     <span class="comment">#创建文件并进入编辑模式</span></span><br><span class="line"><span class="built_in">cat</span> foo.txt bar.txt &gt; foobar.txt   <span class="comment">#合并文件内容</span></span><br></pre></td></tr></table></figure>

<h3 id="查看命令的详细帮助"><a href="#查看命令的详细帮助" class="headerlink" title="查看命令的详细帮助"></a>查看命令的详细帮助</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man 命令名</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>空格键</td>
<td>向文件尾部翻一屏</td>
</tr>
<tr>
<td>b</td>
<td>向文件首部翻一屏</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>后跟一个字符串和[Enter]来查找字符串</td>
</tr>
<tr>
<td>n</td>
<td>发现本次查找的下一个匹配</td>
</tr>
<tr>
<td>N</td>
<td>发现本次查找的上一个匹配</td>
</tr>
<tr>
<td>q</td>
<td>退出</td>
</tr>
</tbody></table>
<h3 id="定位某个命令的文件路径"><a href="#定位某个命令的文件路径" class="headerlink" title="定位某个命令的文件路径"></a>定位某个命令的文件路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> 命令</span><br></pre></td></tr></table></figure>
<p>这个命令会定位某个命令的文件路径。换言之，它会告诉你你执行某个具体命令的时候，在使用哪个文件。</p>
<h3 id="根据文件的内容输出文件类型"><a href="#根据文件的内容输出文件类型" class="headerlink" title="根据文件的内容输出文件类型"></a>根据文件的内容输出文件类型</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file 文件路径</span><br></pre></td></tr></table></figure>
<p>如果一个文件缺失了扩展名，那么这个命令可能会非常有用。</p>
<h3 id="利用-URL-语法在命令行下工作的文件传输工具"><a href="#利用-URL-语法在命令行下工作的文件传输工具" class="headerlink" title="利用 URL 语法在命令行下工作的文件传输工具"></a>利用 URL 语法在命令行下工作的文件传输工具</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl www.baidu.com              <span class="comment">#查看网站源码</span></span><br><span class="line">curl -o 文件名 www.sina.com      <span class="comment">#下载</span></span><br></pre></td></tr></table></figure>

<h3 id="运行脚本命令"><a href="#运行脚本命令" class="headerlink" title="运行脚本命令"></a>运行脚本命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh 脚本文件名</span><br></pre></td></tr></table></figure>
<p>例: 所有需要的操作存成一个脚本，以后只要运行一次这个脚本就可以了。</p>
<ol>
<li>终端中运行nano &#x2F;clean；</li>
<li>把下列代码粘贴到 nano 中；<br>rm -rf &#x2F;System&#x2F;Library&#x2F;Extensions.kextcache<br>rm -rf &#x2F;System&#x2F;Library&#x2F;Extensions.mkext<br>chown -R root:wheel &#x2F;System&#x2F;Library&#x2F;Extensions<br>chmod -R 755 &#x2F;System&#x2F;Library&#x2F;Extensions<br>diskutil repairpermissions &#x2F;<br>kextcache -k &#x2F;System&#x2F;Library&#x2F;Extensions&#x2F;  </li>
<li>Ctrl ＋O 存盘，Ctrl＋X 退出；  </li>
<li>以后只要在终端中运行一次 sh &#x2F;clean即可；</li>
</ol>
<h3 id="常用解压和压缩命令"><a href="#常用解压和压缩命令" class="headerlink" title="常用解压和压缩命令"></a>常用解压和压缩命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .tar（注：tar是打包，不是压缩）</span></span><br><span class="line">tar xvf FileName.tar             <span class="comment">#解压</span></span><br><span class="line">tar cvf FileName.tar DirName     <span class="comment">#打包</span></span><br><span class="line">tar tvf FileName.tar             <span class="comment">#查看包内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .zip</span></span><br><span class="line">unzip FileName.zip               <span class="comment">#解压</span></span><br><span class="line">zip FileName.zip DirName         <span class="comment">#打包</span></span><br></pre></td></tr></table></figure>


<h3 id="say"><a href="#say" class="headerlink" title="say"></a>say</h3><p>say 是一个文本转语音（TTS）的有趣工具，引擎和OS X使用的一样也是VoiceOver。可以用于在脚本中播放警告或提示。例如你可以设置Automator或Hazel脚本处理文件，并在任务完成时用  say 命令语音提示。 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用 -f 选项朗读特定文本文件，-o 选项将朗读结果存为音频文件而不是播放</span></span><br><span class="line">say -f mynovel.txt -o myaudiobook.aiff </span><br></pre></td></tr></table></figure>

<h3 id="显示当前日历，或者指定日期的日历"><a href="#显示当前日历，或者指定日期的日历" class="headerlink" title="显示当前日历，或者指定日期的日历"></a>显示当前日历，或者指定日期的日历</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cal      <span class="comment">#输出当前月日历</span></span><br><span class="line">cal 2018 <span class="comment">#输出2018年日历</span></span><br></pre></td></tr></table></figure>

<h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p>通过安全的方式使用特殊的权限运行程序（通常为系统的超级用户）<br>默认情况下，任何管理员账户都可以使用sudo来获取 root 权限，甚至当 root 账户在图形界面被禁用的情况下，sudo依然有效。这个命令是很多情况下我们不得不使用 Terminal 的原因，——同样也是给每个用户管理员身份的危险所在。不过，你可以调整sudo的配置文件，来限制它的使用。</p>
<h2 id="彩蛋时刻"><a href="#彩蛋时刻" class="headerlink" title="彩蛋时刻"></a>彩蛋时刻</h2><ul>
<li><p>telnet towel.blinkenlights.nl ：星球大战电影  </p>
</li>
<li><p>输入emacs，按空格键，再按“esc＋x”键，左下角会出现“M-x”，输入游戏代码，如tetris（俄罗斯方块）、gomoku（五子棋）就能玩玩游戏，open &#x2F;usr&#x2F;share&#x2F;emacs&#x2F;*&#x2F;lisp&#x2F;play 可查看游戏列表。</p>
</li>
</ul>
<blockquote>
<p>ps: mac自带神的编辑器-Emacs,选择emacs就有来生的，因为一生刚够入门。</p>
</blockquote>
<p>参考网址：<br><a href="http://man.linuxde.net/">Linux命令大全</a><br><a href="http://www.cnblogs.com/peida/tag/linux%E5%91%BD%E4%BB%A4/">每天一个linux命令</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>vue文件预览</title>
    <url>/tool-file-preview/</url>
    <content><![CDATA[<ul>
<li>一般外网可访问且内容不敏感的话，可以直接使用微软的在线预览，体验也比较好；如果是本地、内网文件或者内容比较敏感的，还是比较建议使用插件来转换显示；</li>
<li>PDF可以直接新窗口打开，用浏览器自带的预览功能；如果需要自定义样式，则可以使用<a href="https://www.npmjs.com/package/vue-pdf">vue-pdf</a>；</li>
<li>excel推荐使用<a href="https://www.npmjs.com/package/xlsx">xlsx</a>，目前使用起来没什么大问题；</li>
<li>word使用最多的是<a href="https://www.npmjs.com/package/mammoth">mammoth.js</a>，原理是将源文档转换为HTML，但是只支持.docx，样式也没法完全还原，注重还原度的话可以先转成PDF再预览；</li>
</ul>
<span id="more"></span>

<blockquote>
<p>下面是示例代码，挖个坑，以后填</p>
</blockquote>
<h2 id="在线office"><a href="#在线office" class="headerlink" title="在线office"></a>在线office</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">filePreview</span>(<span class="params">fileUrl</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/\.(ppt|pptx|doc|docx|xls|xlsx)$/</span>.<span class="title function_">test</span>(fileUrl)) &#123;</span><br><span class="line">    <span class="keyword">const</span> officePath = <span class="string">&#x27;https://view.officeapps.live.com/op/view.aspx?src=&#x27;</span>;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">open</span>(officePath + fileUrl, <span class="string">&#x27;_blank&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="pdf"><a href="#pdf" class="headerlink" title="pdf"></a>pdf</h2><p>文档：<a href="https://www.npmjs.com/package/vue-pdf">vue-pdf</a><br>遗留问题：多页模式下，页数过多渲染会很慢，所以设置了分页；目录的锚点，在小屏下会偏移，issues上也有人碰到了同样的问题，等作者解决；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:ref</span>=<span class="string">&quot;refname&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pdf-preview&quot;</span> <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">element-loading-text</span>=<span class="string">&quot;加载中&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- pdf预览 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-radio-group</span> <span class="attr">:disabled</span>=<span class="string">&quot;pdfData.pageCount &lt;= 1&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pdfData.type&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pagination-radio&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">change</span>=<span class="string">&quot;changePdfType&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-radio-button</span> <span class="attr">:label</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SvgIcon</span> <span class="attr">className</span>=<span class="string">&quot;radio-icon&quot;</span> <span class="attr">iconClass</span>=<span class="string">&quot;icon-fenye&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">SvgIcon</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-radio-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-radio-button</span> <span class="attr">:label</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SvgIcon</span> <span class="attr">className</span>=<span class="string">&quot;radio-icon&quot;</span> <span class="attr">iconClass</span>=<span class="string">&quot;icon-chaifenyemian&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">SvgIcon</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-radio-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-radio-group</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 可滚动 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;pdfData.type == 1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-pagination</span> <span class="attr">class</span>=<span class="string">&quot;pdf-pagination&quot;</span> @<span class="attr">current-change</span>=<span class="string">&quot;changeRollingPdfPage&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:current-page.sync</span>=<span class="string">&quot;rollingPdf.currentPage&quot;</span> <span class="attr">:total</span>=<span class="string">&quot;pdfData.pageCount&quot;</span> <span class="attr">:page-size</span>=<span class="string">&quot;rollingPdf.size&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:pager-count</span>=<span class="string">&quot;5&quot;</span> <span class="attr">hide-on-single-page</span> <span class="attr">background</span> <span class="attr">layout</span>=<span class="string">&quot;jumper, prev, pager, next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;preview-content preview-pdf-rolling&quot;</span> <span class="attr">v-loading</span>=<span class="string">&quot;rollingPdf.loading&quot;</span> <span class="attr">element-loading-text</span>=<span class="string">&quot;加载中&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">pdf</span> <span class="attr">class</span>=<span class="string">&quot;pdf-rolling-item&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#x27;pdf-rolling-item-&#x27; + item.page&quot;</span> @<span class="attr">page-loaded</span>=<span class="string">&quot;rollingPdfLoad&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          @<span class="attr">link-clicked</span>=<span class="string">&quot;clickPdfLink&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in rollingPdf.nowList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.page&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;pdfData.src&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:page</span>=<span class="string">&quot;item.page&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">pdf</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 分页 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;pdfData.type != 1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-pagination</span> <span class="attr">class</span>=<span class="string">&quot;pdf-pagination&quot;</span> @<span class="attr">current-change</span>=<span class="string">&quot;changePdfPage&quot;</span> <span class="attr">:current-page.sync</span>=<span class="string">&quot;pdfData.currentPage&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:total</span>=<span class="string">&quot;pdfData.pageCount&quot;</span> <span class="attr">:page-size</span>=<span class="string">&quot;1&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;jumper, prev, pager, next&quot;</span> <span class="attr">:pager-count</span>=<span class="string">&quot;5&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">hide-on-single-page</span> <span class="attr">background</span>&gt;</span><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;preview-content preview-pdf-paged&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">pdf</span> <span class="attr">:src</span>=<span class="string">&quot;pdfData.src&quot;</span> <span class="attr">:page</span>=<span class="string">&quot;pdfData.currentPage&quot;</span> @<span class="attr">num-pages</span>=<span class="string">&quot;pdfData.pageCount=$event&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          @<span class="attr">link-clicked</span>=<span class="string">&quot;clickPdfLink&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">pdf</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> <span class="title class_">SvgIcon</span> <span class="keyword">from</span> <span class="string">&quot;@_c/SvgIcon&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> pdf <span class="keyword">from</span> <span class="string">&quot;vue-pdf&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123; handelTool &#125; <span class="keyword">from</span> <span class="string">&quot;@/js/utils&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&quot;officePdfPreview&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      pdf,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">SvgIcon</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">refname</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="string">&#x27;officePreview&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">file</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">Object</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 基础链接</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">baseURL</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">loading</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// pdf数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">pdfData</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 当前页</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">currentPage</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// pdf文件总页数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">pageCount</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">src</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">type</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">rollingPdf</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">src</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">size</span>: <span class="number">5</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">currentPage</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">fullList</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">nowList</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">loadingItem</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">loading</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">file</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">handler</span>(<span class="params">newValue</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="title function_">initPdf</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">initPdf</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">setPdfCount</span>(<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">pdfData</span>.<span class="property">pageCount</span> = value;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="title function_">changePdfType</span>(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 切换PDF查看类型为分页、滚动</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">changePdfType</span>(<span class="params">type</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">pdfData</span>.<span class="property">type</span> = type;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">pdfData</span>.<span class="property">type</span> == <span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">rollingPdf</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="title function_">data</span>().<span class="property">rollingPdf</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">1</span>; index &lt;= <span class="variable language_">this</span>.<span class="property">pdfData</span>.<span class="property">pageCount</span>; index++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">rollingPdf</span>.<span class="property">fullList</span>.<span class="title function_">push</span>(&#123; <span class="attr">page</span>: index &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="title function_">changeRollingPdfPage</span>(<span class="number">1</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="title function_">changePdfPage</span>(<span class="number">1</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 切换pdf显示页</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">changeRollingPdfPage</span>(<span class="params">page</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">rollingPdf</span>.<span class="property">loadingItem</span> = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">rollingPdf</span>.<span class="property">loading</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (<span class="keyword">typeof</span> page == <span class="string">&#x27;number&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">rollingPdf</span>.<span class="property">currentPage</span> = page;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (page &gt;= <span class="number">1</span> &amp;&amp; page &lt;= <span class="variable language_">this</span>.<span class="property">pdfData</span>.<span class="property">pageCount</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="variable language_">this</span>.<span class="property">refname</span>].<span class="title function_">querySelector</span>(<span class="string">&quot;.preview-pdf-rolling&quot;</span>).<span class="property">scrollTop</span> = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">rollingPdf</span>.<span class="property">nowList</span> = <span class="variable language_">this</span>.<span class="property">rollingPdf</span>.<span class="property">fullList</span>.<span class="title function_">slice</span>((page - <span class="number">1</span>) * <span class="variable language_">this</span>.<span class="property">rollingPdf</span>.<span class="property">size</span>, page * <span class="variable language_">this</span>.<span class="property">rollingPdf</span>.<span class="property">size</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 点击PDF内部的目录</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">clickPdfLink</span>(<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value == <span class="string">&#x27;number&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">pdfData</span>.<span class="property">type</span> == <span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">rollingPdf</span>.<span class="property">scrollTo</span> = value;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> toPage = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(value / <span class="variable language_">this</span>.<span class="property">rollingPdf</span>.<span class="property">size</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (toPage == <span class="variable language_">this</span>.<span class="property">rollingPdf</span>.<span class="property">currentPage</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> rollingItem = <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="variable language_">this</span>.<span class="property">refname</span>].<span class="title function_">querySelector</span>(<span class="string">&#x27;.pdf-rolling-item-&#x27;</span> + value);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              rollingItem &amp;&amp; handelTool.<span class="title function_">scrollInto</span>(rollingItem);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="title function_">changeRollingPdfPage</span>(toPage);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="title function_">changePdfPage</span>(value)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 滚动类型pdf加载</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">rollingPdfLoad</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">rollingPdf</span>.<span class="property">loadingItem</span>++;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">rollingPdf</span>.<span class="property">loading</span> = <span class="variable language_">this</span>.<span class="property">rollingPdf</span>.<span class="property">loadingItem</span> &lt; <span class="variable language_">this</span>.<span class="property">rollingPdf</span>.<span class="property">nowList</span>.<span class="property">length</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">rollingPdf</span>.<span class="property">scrollTo</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">rollingPdf</span>.<span class="property">loading</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> rollingItem = <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="variable language_">this</span>.<span class="property">refname</span>].<span class="title function_">querySelector</span>(<span class="string">&#x27;.pdf-rolling-item-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">rollingPdf</span>.<span class="property">scrollTo</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (rollingItem) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">rollingPdf</span>.<span class="property">scrollTo</span> = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              handelTool.<span class="title function_">scrollInto</span>(rollingItem);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;, <span class="number">800</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">/**</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">       * 切换pdf显示页</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">       * <span class="doctag">@param</span> <span class="variable">command</span></span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">       */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">changePdfPage</span>(<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value == <span class="string">&#x27;number&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">pdfData</span>.<span class="property">currentPage</span> = value;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">let</span> pdfWarpDom = <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="variable language_">this</span>.<span class="property">refname</span>].<span class="title function_">querySelector</span>(<span class="string">&quot;.preview-pdf-paged&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            pdfWarpDom &amp;&amp; (pdfWarpDom.<span class="property">scrollTop</span> = <span class="number">0</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">/**</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">       * pdf预览</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">       */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">initPdf</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">loading</span> || !<span class="variable language_">this</span>.<span class="property">file</span>.<span class="property">url</span>) <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">pdfData</span>.<span class="property">type</span> = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// this.getNumPages();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 加载</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">let</span> _this = <span class="variable language_">this</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="variable language_">this</span>.<span class="property">baseURL</span> + <span class="variable language_">this</span>.<span class="property">file</span>.<span class="property">url</span>, <span class="literal">true</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="property">responseType</span> = <span class="string">&#x27;blob&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              _this.<span class="property">pdfData</span>.<span class="property">src</span> = _this.<span class="title function_">getObjectURL</span>(xhr.<span class="property">response</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">404</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              _this.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;文件不存在&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              _this.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;读取服务器文档异常&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            _this.<span class="property">loading</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            _this.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;访问服务器异常，请检查访问链接是否正常&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            _this.<span class="property">loading</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="title function_">send</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125; <span class="keyword">catch</span> (e) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">/**</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">       * 将返回的流数据转换为url</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">       * <span class="doctag">@param</span> file 文件流</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">       */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">getObjectURL</span>(<span class="params">file</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> url = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">createObjectURL</span> !== <span class="literal">undefined</span>) &#123; <span class="comment">// basic</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          url = <span class="variable language_">window</span>.<span class="title function_">createObjectURL</span>(file);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">webkitURL</span> !== <span class="literal">undefined</span>) &#123; <span class="comment">// webkit or chrome</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            url = <span class="variable language_">window</span>.<span class="property">webkitURL</span>.<span class="title function_">createObjectURL</span>(file);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125; <span class="keyword">catch</span> (error) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">URL</span> !== <span class="literal">undefined</span>) &#123; <span class="comment">// mozilla(firefox)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(file);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125; <span class="keyword">catch</span> (error) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> url;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.pdf-preview</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.preview-content</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">overflow</span>: auto;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="selector-class">.pdf-rolling-item</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">border-bottom</span>: <span class="number">7px</span> solid <span class="number">#eee</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.preview-pdf-paged</span>&gt;<span class="selector-tag">span</span>,</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.preview-pdf-rolling</span>&gt;<span class="selector-tag">span</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="selector-class">.annotationLayer</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">display</span>: none <span class="meta">!important</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.pagination-radio</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">vertical-align</span>: baseline;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="selector-class">.el-radio-button__inner</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">15px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="selector-class">.radio-icon</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.pdf-pagination</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">display</span>: inline-block;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="excel"><a href="#excel" class="headerlink" title="excel"></a>excel</h2><p>文档：<a href="https://www.npmjs.com/package/xlsx">xlsx</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;excel-preview&quot;</span> <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">element-loading-text</span>=<span class="string">&quot;加载中&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-radio-group</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;excel.sheetNameActive&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;getSheetNameTable&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-radio-button</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in excel.sheetNames&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-radio-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-radio-group</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;preview-content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;excel.SheetActiveTable&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding: 10px 15px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import * as XLSX from &#x27;xlsx&#x27;;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;officeExcelPreview&quot;,</span><br><span class="line">    components: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      file: &#123;</span><br><span class="line">        type: Object,</span><br><span class="line">        default: () =&gt; &#123;</span><br><span class="line">          return &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      baseURL: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &#x27;&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        loading: false,</span><br><span class="line">        // Excel文档数据</span><br><span class="line">        excel: &#123;</span><br><span class="line">          // 数据</span><br><span class="line">          workbook: &#123;&#125;,</span><br><span class="line">          // 表名称集合</span><br><span class="line">          sheetNames: [],</span><br><span class="line">          // 激活项</span><br><span class="line">          sheetNameActive: &quot;&quot;,</span><br><span class="line">          // 当前激活表格</span><br><span class="line">          SheetActiveTable: &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      file: &#123;</span><br><span class="line">        handler(newValue) &#123;</span><br><span class="line">          this.$nextTick(() =&gt; &#123;</span><br><span class="line">            this.initExcelPreview()</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      this.initExcelPreview()</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      /**</span><br><span class="line">       * 根据工作表名称获取数据</span><br><span class="line">       * @param sheetName</span><br><span class="line">       */</span><br><span class="line">       getSheetNameTable(sheetName) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">          // 获取当前工作表的数据</span><br><span class="line">          const worksheet = this.excel.workbook.Sheets[sheetName]</span><br><span class="line">          // 转换为数据  1.json数据有些问题，2.如果是html那么样式需修改</span><br><span class="line">          let htmlData = XLSX.utils.sheet_to_html(worksheet, &#123; header: &#x27;&#x27;, footer: &#x27;&#x27; &#125;)</span><br><span class="line">          htmlData = htmlData === &#x27;&#x27; ? htmlData : htmlData.replace(/&lt;table/, &#x27;&lt;table class=&quot;default-table&quot; border=&quot;1px solid #ccc&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&#x27;)</span><br><span class="line">          // 第一行进行改颜色</span><br><span class="line">          htmlData = htmlData === &#x27;&#x27; ? htmlData : htmlData.replace(/&lt;tr/, &#x27;&lt;tr style=&quot;background:#b4c9e8&quot;&#x27;)</span><br><span class="line">          this.excel.SheetActiveTable = htmlData</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">          // 如果工作表没有数据则到这里来处理</span><br><span class="line">          this.excel.SheetActiveTable = &#x27;&lt;h4 style=&quot;text-align: center&quot;&gt;&#x27; + this.emptyTips + &#x27;&lt;/h4&gt;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      /**</span><br><span class="line">       * 表格数据预览</span><br><span class="line">       */</span><br><span class="line">       initExcelPreview() &#123;</span><br><span class="line">        if (this.loading || !this.file.url) return;</span><br><span class="line">        this.loading = true;</span><br><span class="line">        try &#123;</span><br><span class="line">          let xhr = new XMLHttpRequest()</span><br><span class="line">          xhr.open(&#x27;get&#x27;, this.baseURL + this.file.url, true)</span><br><span class="line">          xhr.responseType = &#x27;arraybuffer&#x27;</span><br><span class="line">          const _this = this</span><br><span class="line">          xhr.onload = function (e) &#123;</span><br><span class="line">            if (xhr.status === 200) &#123;</span><br><span class="line">              const data = new Uint8Array(xhr.response)</span><br><span class="line">              const workbook = XLSX.read(data, &#123; type: &#x27;array&#x27; &#125;)</span><br><span class="line">              const sheetNames = workbook.SheetNames // 工作表名称集合</span><br><span class="line">              _this.excel.workbook = workbook</span><br><span class="line">              _this.excel.sheetNames = sheetNames</span><br><span class="line">              _this.excel.sheetNameActive = sheetNames[0]</span><br><span class="line">              _this.getSheetNameTable(sheetNames[0])</span><br><span class="line">            &#125; else if (xhr.status === 404) &#123;</span><br><span class="line">              _this.$message.error(&quot;文件不存在&quot;)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              _this.$message.error(&quot;读取服务器文档异常&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">            _this.loading = false;</span><br><span class="line">          &#125;</span><br><span class="line">          xhr.onerror = function () &#123;</span><br><span class="line">            _this.$message.error(&quot;访问服务器异常，请检查访问链接是否正常&quot;)</span><br><span class="line">            _this.loading = false;</span><br><span class="line">          &#125;</span><br><span class="line">          xhr.send()</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">          console.log(e)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<h2 id="word"><a href="#word" class="headerlink" title="word"></a>word</h2><p>文档：<a href="https://www.npmjs.com/package/mammoth">mammoth.js</a><br>遗留问题：只支持.docx格式；样式没法一模一样还原；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">element-loading-text</span>=<span class="string">&quot;加载中&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;docHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> mammoth <span class="keyword">from</span> <span class="string">&#x27;mammoth&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&quot;officeDocPreview&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">file</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">Object</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">baseURL</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">loading</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">docHtml</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">emptyTips</span>: <span class="string">&#x27;暂无内容&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">file</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">handler</span>(<span class="params">newValue</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="title function_">initDocPreview</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">initDocPreview</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">/**</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">       * docx文件预览</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">       */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="title function_">initDocPreview</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 请求文件流</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">let</span> _this = <span class="variable language_">this</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (_this.<span class="property">loading</span> || !_this.<span class="property">file</span>.<span class="property">url</span>) <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          _this.<span class="property">loading</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="variable language_">this</span>.<span class="property">baseURL</span> + <span class="variable language_">this</span>.<span class="property">file</span>.<span class="property">url</span>, <span class="literal">true</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="property">responseType</span> = <span class="string">&#x27;arraybuffer&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              mammoth.<span class="title function_">convertToHtml</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">arrayBuffer</span>: <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(xhr.<span class="property">response</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resultObject</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                _this.<span class="property">docHtml</span> = resultObject.<span class="property">value</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">404</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              _this.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;文件不存在&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              _this.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;读取服务器文档异常&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            _this.<span class="property">loading</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            _this.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;访问服务器异常，请检查访问链接是否正常&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            _this.<span class="property">loading</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="title function_">send</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125; <span class="keyword">catch</span> (e) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">docHtml</span> = <span class="string">&#x27;&lt;h1 style=&quot;text-align: center&quot;&gt;&#x27;</span> + <span class="variable language_">this</span>.<span class="property">emptyTips</span> + <span class="string">&#x27;&lt;/h1&gt;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="集成弹窗"><a href="#集成弹窗" class="headerlink" title="集成弹窗"></a>集成弹窗</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:visible</span>=<span class="string">&quot;visible&quot;</span> <span class="attr">:close-on-click-modal</span>=<span class="string">&quot;false&quot;</span> <span class="attr">append-to-body</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">close</span>=<span class="string">&quot;handleClose&quot;</span> <span class="attr">width</span>=<span class="string">&quot;80%&quot;</span> <span class="attr">:fullscreen</span>=<span class="string">&quot;fullscreen&quot;</span> <span class="attr">custom-class</span>=<span class="string">&quot;office-preview-dialog&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;single-ellipsis dialog-title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;&#123; file.name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;icon-btn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-tooltip</span> <span class="attr">effect</span>=<span class="string">&quot;dark&quot;</span> <span class="attr">content</span>=<span class="string">&quot;刷新&quot;</span> <span class="attr">placement</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-refresh-right btn-item&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;initOfficePreview&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-tooltip</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-tooltip</span> <span class="attr">effect</span>=<span class="string">&quot;dark&quot;</span> <span class="attr">content</span>=<span class="string">&quot;浏览器模式&quot;</span> <span class="attr">placement</span>=<span class="string">&quot;bottom&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;fileType==1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-data-board btn-item&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;openPdfWindow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-tooltip</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-tooltip</span> <span class="attr">effect</span>=<span class="string">&quot;dark&quot;</span> <span class="attr">:content</span>=<span class="string">&quot;fullscreen ? &#x27;退出全屏&#x27; : &#x27;全屏&#x27;&quot;</span> <span class="attr">placement</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">SvgIcon</span> <span class="attr">class</span>=<span class="string">&quot;btn-item btn-screen&quot;</span> <span class="attr">:iconClass</span>=<span class="string">&quot;fullscreen ? &#x27;icon-quxiaoquanping&#x27; : &#x27;icon-quanping&#x27;&quot;</span> @<span class="attr">click.native</span>=<span class="string">&quot;fullscreen = !fullscreen&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">SvgIcon</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-tooltip</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;office-preview&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- Pdf文档预览 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">PdfPreview</span> <span class="attr">v-if</span>=<span class="string">&quot;fileType == 1&quot;</span> <span class="attr">:refname</span>=<span class="string">&quot;refname + &#x27;_pdf&#x27;&quot;</span> <span class="attr">:file</span>=<span class="string">&quot;file&quot;</span> <span class="attr">:baseURL</span>=<span class="string">&quot;baseURL&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">PdfPreview</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- Excel文档预览 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ExcelPreview</span> <span class="attr">v-if</span>=<span class="string">&quot;fileType == 3&quot;</span> <span class="attr">:file</span>=<span class="string">&quot;file&quot;</span> <span class="attr">:baseURL</span>=<span class="string">&quot;baseURL&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ExcelPreview</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- word文档预览 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">DocPreview</span> <span class="attr">v-if</span>=<span class="string">&quot;fileType == 2&quot;</span> <span class="attr">:file</span>=<span class="string">&quot;file&quot;</span> <span class="attr">:baseURL</span>=<span class="string">&quot;baseURL&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">DocPreview</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Empty</span> <span class="attr">v-if</span>=<span class="string">&quot;!fileType&quot;</span> <span class="attr">description</span>=<span class="string">&quot;仅支持pdf、docx、xlsx、xls文件预览&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Empty</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom-btns&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">plain</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;downloadFile&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleClose&quot;</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> <span class="title class_">SvgIcon</span> <span class="keyword">from</span> <span class="string">&quot;@_c/SvgIcon&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123; systemApi &#125; <span class="keyword">from</span> <span class="string">&#x27;@/js/api/index&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> <span class="title class_">PdfPreview</span> <span class="keyword">from</span> <span class="string">&#x27;./pdfPreview.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> <span class="title class_">ExcelPreview</span> <span class="keyword">from</span> <span class="string">&#x27;./excelPreview.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> <span class="title class_">DocPreview</span> <span class="keyword">from</span> <span class="string">&#x27;./docPreview.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&quot;officePreview&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">SvgIcon</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">PdfPreview</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">ExcelPreview</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">DocPreview</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">refname</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="string">&#x27;officePreview&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">visible</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// file:&#123;name:&#x27;&#x27;,url:&#x27;&#x27;&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">file</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">Object</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 基础链接</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">baseURL</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">downfile</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">Object</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 全屏</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">fullscreen</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 文件类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">fileType</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">file</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">handler</span>(<span class="params">newValue</span>) &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="title function_">initOfficePreview</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 下载文件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">downloadFile</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">downfile</span>.<span class="property">filePath</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          systemApi.<span class="title function_">downloadFile</span>(<span class="variable language_">this</span>.<span class="property">downfile</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">file</span>.<span class="property">filePath</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          systemApi.<span class="title function_">downloadFile</span>(<span class="variable language_">this</span>.<span class="property">file</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">handleClose</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">fullscreen</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.$emit(<span class="string">&quot;update:visible&quot;</span>, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">/**</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">       * 获取文件类型</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">       * <span class="doctag">@return</span> &#123;<span class="type">null|number</span>&#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">       */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">getFileType</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">file</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> <span class="literal">null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> fileName = <span class="variable language_">this</span>.<span class="property">file</span>.<span class="property">name</span>.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>);<span class="comment">//取到文件名开始到最后一个点的长度</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> fileNameLength = <span class="variable language_">this</span>.<span class="property">file</span>.<span class="property">name</span>.<span class="property">length</span>;<span class="comment">//取到文件名长度</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> fileFormat = <span class="variable language_">this</span>.<span class="property">file</span>.<span class="property">name</span>.<span class="title function_">substring</span>(fileName + <span class="number">1</span>, fileNameLength);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (fileFormat.<span class="title function_">toLowerCase</span>() === <span class="string">&quot;pdf&quot;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileFormat.<span class="title function_">toLowerCase</span>() === <span class="string">&quot;docx&quot;</span> || fileFormat.<span class="title function_">toLowerCase</span>() === <span class="string">&quot;doc&quot;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileFormat.<span class="title function_">toLowerCase</span>() === <span class="string">&quot;xlsx&quot;</span> || fileFormat.<span class="title function_">toLowerCase</span>() === <span class="string">&quot;xls&quot;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> <span class="number">3</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="literal">null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">initOfficePreview</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">fileType</span> = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">fileType</span> = <span class="variable language_">this</span>.<span class="title function_">getFileType</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">openPdfWindow</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="variable language_">this</span>.<span class="property">baseURL</span> + <span class="variable language_">this</span>.<span class="property">file</span>.<span class="property">url</span>, <span class="string">&#x27;_blank&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.office-preview-dialog</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &amp;<span class="selector-class">.is-fullscreen</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.office-preview</span> <span class="selector-class">.preview-content</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> - <span class="number">160px</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.el-dialog__body</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">padding-bottom</span>: <span class="number">15px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.dialog-title</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">55px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.icon-btn</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">top</span>: -<span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">right</span>: <span class="number">20px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="selector-class">.btn-screen</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="selector-class">.btn-item</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">4px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">vertical-align</span>: bottom;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &amp;<span class="selector-pseudo">:hover</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">          <span class="attribute">color</span>: <span class="number">#3C7BFF</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.bottom-btns</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">text-align</span>: right;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.office-preview</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.preview-content</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">overflow</span>: auto;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">height</span>: <span class="number">65vh</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
</search>
